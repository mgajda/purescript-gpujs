// Generated by psc-bundle 0.11.6
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["apply"] = apply;
  exports["applyFlipped"] = applyFlipped;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 12, column 1 - line 12, column 37: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];        
  var showUnit = new Data_Show.Show(function (v) {
      return "unit";
  });
  exports["showUnit"] = showUnit;
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  var flap = function (dictFunctor) {
      return function (ff) {
          return function (x) {
              return map(dictFunctor)(function (f) {
                  return f(x);
              })(ff);
          };
      };
  };
  exports["Functor"] = Functor;
  exports["flap"] = flap;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Show = PS["Data.Show"];        
  var Void = function (x) {
      return x;
  };
  var absurd = function (a) {
      var spin = function ($copy_v) {
          var $tco_result;
          function $tco_loop(v) {
              $copy_v = v;
              return;
          };
          while (!false) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return spin(a);
  };
  var showVoid = new Data_Show.Show(absurd);
  exports["absurd"] = absurd;
  exports["showVoid"] = showVoid;
})(PS["Data.Void"] = PS["Data.Void"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };
  var semigroupVoid = new Semigroup(function (v) {
      return Data_Void.absurd;
  });
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupVoid"] = semigroupVoid;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Data_Functor.functorArray;
  }, Data_Semigroup.append(Data_Semigroup.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
  exports["altArray"] = altArray;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };
  var applyFn = new Apply(function () {
      return Data_Functor.functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  var lift3 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                  };
              };
          };
      };
  };
  var lift4 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                      };
                  };
              };
          };
      };
  };
  var lift5 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["lift3"] = lift3;
  exports["lift4"] = lift4;
  exports["lift5"] = lift5;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 62, column 1 - line 62, column 65: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeFn = new Applicative(function () {
      return Control_Apply.applyFn;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeFn"] = applicativeFn;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  var alternativeArray = new Alternative(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Plus.plusArray;
  });
  exports["Alternative"] = Alternative;
  exports["alternativeArray"] = alternativeArray;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Function = PS["Data.Function"];        
  var Biapply = function (Bifunctor0, biapply) {
      this.Bifunctor0 = Bifunctor0;
      this.biapply = biapply;
  };
  var biapply = function (dict) {
      return dict.biapply;
  };
  var biapplyFirst = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.id(Control_Category.categoryFn))))(a))(b);
          };
      };
  };
  var biapplySecond = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
          };
      };
  };
  var bilift2 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
                  };
              };
          };
      };
  };
  var bilift3 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return function (c) {
                          return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
                      };
                  };
              };
          };
      };
  };
  exports["Biapply"] = Biapply;
  exports["biapply"] = biapply;
  exports["biapplyFirst"] = biapplyFirst;
  exports["biapplySecond"] = biapplySecond;
  exports["bilift2"] = bilift2;
  exports["bilift3"] = bilift3;
})(PS["Control.Biapply"] = PS["Control.Biapply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Biapply = PS["Control.Biapply"];        
  var Biapplicative = function (Biapply0, bipure) {
      this.Biapply0 = Biapply0;
      this.bipure = bipure;
  };
  var bipure = function (dict) {
      return dict.bipure;
  };
  exports["Biapplicative"] = Biapplicative;
  exports["bipure"] = bipure;
})(PS["Control.Biapplicative"] = PS["Control.Biapplicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };
  var bindFn = new Bind(function () {
      return Control_Apply.applyFn;
  }, function (m) {
      return function (f) {
          return function (x) {
              return f(m(x))(x);
          };
      };
  });
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var ifM = function (dictBind) {
      return function (cond) {
          return function (t) {
              return function (f) {
                  return bind(dictBind)(cond)(function (cond$prime) {
                      if (cond$prime) {
                          return t;
                      };
                      return f;
                  });
              };
          };
      };
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["Discard"] = Discard;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discard"] = discard;
  exports["ifM"] = ifM;
  exports["join"] = join;
  exports["bindFn"] = bindFn;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Extend = function (Functor0, extend) {
      this.Functor0 = Functor0;
      this.extend = extend;
  };
  var extendFn = function (dictSemigroup) {
      return new Extend(function () {
          return Data_Functor.functorFn;
      }, function (f) {
          return function (g) {
              return function (w) {
                  return f(function (w$prime) {
                      return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                  });
              };
          };
      });
  };
  var extend = function (dict) {
      return dict.extend;
  };
  var extendFlipped = function (dictExtend) {
      return function (w) {
          return function (f) {
              return extend(dictExtend)(f)(w);
          };
      };
  };
  var duplicate = function (dictExtend) {
      return extend(dictExtend)(Control_Category.id(Control_Category.categoryFn));
  };
  var composeCoKleisliFlipped = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return f(extend(dictExtend)(g)(w));
              };
          };
      };
  };
  var composeCoKleisli = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return g(extend(dictExtend)(f)(w));
              };
          };
      };
  };
  exports["Extend"] = Extend;
  exports["composeCoKleisli"] = composeCoKleisli;
  exports["composeCoKleisliFlipped"] = composeCoKleisliFlipped;
  exports["duplicate"] = duplicate;
  exports["extend"] = extend;
  exports["extendFlipped"] = extendFlipped;
  exports["extendFn"] = extendFn;
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor = PS["Data.Functor"];        
  var Comonad = function (Extend0, extract) {
      this.Extend0 = Extend0;
      this.extract = extract;
  };
  var extract = function (dict) {
      return dict.extract;
  };
  exports["Comonad"] = Comonad;
  exports["extract"] = extract;
})(PS["Control.Comonad"] = PS["Control.Comonad"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];        
  var ComonadTrans = function (lower) {
      this.lower = lower;
  };
  var lower = function (dict) {
      return dict.lower;
  };
  exports["ComonadTrans"] = ComonadTrans;
  exports["lower"] = lower;
})(PS["Control.Comonad.Trans.Class"] = PS["Control.Comonad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var underF2 = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($50) {
                              return function ($51) {
                                  return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(Data_Function.on(f)(Data_Functor.map(dictFunctor)(wrap(dictNewtype)))($50)($51));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var underF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($52) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($52)));
                          };
                      };
                  };
              };
          };
      };
  };
  var under2 = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($53) {
                      return function ($54) {
                          return unwrap(dictNewtype1)(Data_Function.on(f)(wrap(dictNewtype))($53)($54));
                      };
                  };
              };
          };
      };
  };
  var under = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($55) {
                      return unwrap(dictNewtype1)(f(wrap(dictNewtype)($55)));
                  };
              };
          };
      };
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap(dictNewtype);
      };
  };
  var traverse = function (dictFunctor) {
      return function (dictNewtype) {
          return function (v) {
              return function (f) {
                  return function ($56) {
                      return Data_Functor.map(dictFunctor)(wrap(dictNewtype))(f(unwrap(dictNewtype)($56)));
                  };
              };
          };
      };
  };
  var overF2 = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($57) {
                              return function ($58) {
                                  return Data_Functor.map(dictFunctor1)(wrap(dictNewtype1))(Data_Function.on(f)(Data_Functor.map(dictFunctor)(unwrap(dictNewtype)))($57)($58));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var overF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($59) {
                              return Data_Functor.map(dictFunctor1)(wrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(unwrap(dictNewtype))($59)));
                          };
                      };
                  };
              };
          };
      };
  };
  var over2 = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($60) {
                      return function ($61) {
                          return wrap(dictNewtype1)(Data_Function.on(f)(unwrap(dictNewtype))($60)($61));
                      };
                  };
              };
          };
      };
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($62) {
                      return wrap(dictNewtype1)(f(unwrap(dictNewtype)($62)));
                  };
              };
          };
      };
  };
  var op = function (dictNewtype) {
      return un(dictNewtype);
  };
  var collect = function (dictFunctor) {
      return function (dictNewtype) {
          return function (v) {
              return function (f) {
                  return function ($63) {
                      return wrap(dictNewtype)(f(Data_Functor.map(dictFunctor)(unwrap(dictNewtype))($63)));
                  };
              };
          };
      };
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  var ala = function (dictFunctor) {
      return function (dictNewtype) {
          return function (dictNewtype1) {
              return function (v) {
                  return function (f) {
                      return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["ala"] = ala;
  exports["alaF"] = alaF;
  exports["collect"] = collect;
  exports["op"] = op;
  exports["over"] = over;
  exports["over2"] = over2;
  exports["overF"] = overF;
  exports["overF2"] = overF2;
  exports["traverse"] = traverse;
  exports["un"] = un;
  exports["under"] = under;
  exports["under2"] = under2;
  exports["underF"] = underF;
  exports["underF2"] = underF2;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Unit = PS["Data.Unit"];        
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["defer"] = defer;
  exports["fix"] = fix;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var whenM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                  return Control_Applicative.when(dictMonad.Applicative0())(v)(m);
              });
          };
      };
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(v)(m);
              });
          };
      };
  };
  var monadFn = new Monad(function () {
      return Control_Applicative.applicativeFn;
  }, function () {
      return Control_Bind.bindFn;
  });
  var monadArray = new Monad(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Bind.bindArray;
  });
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(v));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
  exports["liftM1"] = liftM1;
  exports["unlessM"] = unlessM;
  exports["whenM"] = whenM;
  exports["monadFn"] = monadFn;
  exports["monadArray"] = monadArray;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.refIneq = function (r1) {
    return function (r2) {
      return r1 !== r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Eq1 = function (eq1) {
      this.eq1 = eq1;
  };
  var eqVoid = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq1 = function (dict) {
      return dict.eq1;
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var eq1Array = new Eq1(function (dictEq) {
      return eq(eqArray(dictEq));
  });
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  var notEq1 = function (dictEq1) {
      return function (dictEq) {
          return function (x) {
              return function (y) {
                  return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
              };
          };
      };
  };
  exports["Eq"] = Eq;
  exports["Eq1"] = Eq1;
  exports["eq"] = eq;
  exports["eq1"] = eq1;
  exports["notEq"] = notEq;
  exports["notEq1"] = notEq1;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqVoid"] = eqVoid;
  exports["eqArray"] = eqArray;
  exports["eq1Array"] = eq1Array;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var showOrdering = new Data_Show.Show(function (v) {
      if (v instanceof LT) {
          return "LT";
      };
      if (v instanceof GT) {
          return "GT";
      };
      if (v instanceof EQ) {
          return "EQ";
      };
      throw new Error("Failed pattern match at Data.Ordering line 26, column 1 - line 26, column 39: " + [ v.constructor.name ]);
  });
  var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          if (v instanceof EQ) {
              return v1;
          };
          throw new Error("Failed pattern match at Data.Ordering line 21, column 1 - line 21, column 49: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var invert = function (v) {
      if (v instanceof GT) {
          return LT.value;
      };
      if (v instanceof EQ) {
          return EQ.value;
      };
      if (v instanceof LT) {
          return GT.value;
      };
      throw new Error("Failed pattern match at Data.Ordering line 33, column 1 - line 33, column 31: " + [ v.constructor.name ]);
  };
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["invert"] = invert;
  exports["eqOrdering"] = eqOrdering;
  exports["semigroupOrdering"] = semigroupOrdering;
  exports["showOrdering"] = showOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringUnit = new Semiring(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, Data_Unit.unit, Data_Unit.unit);
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  var semiringFn = function (dictSemiring) {
      return new Semiring(function (f) {
          return function (g) {
              return function (x) {
                  return add(dictSemiring)(f(x))(g(x));
              };
          };
      }, function (f) {
          return function (g) {
              return function (x) {
                  return mul(dictSemiring)(f(x))(g(x));
              };
          };
      }, function (v) {
          return one(dictSemiring);
      }, function (v) {
          return zero(dictSemiring);
      });
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringFn"] = semiringFn;
  exports["semiringUnit"] = semiringUnit;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var ringUnit = new Ring(function () {
      return Data_Semiring.semiringUnit;
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var ringFn = function (dictRing) {
      return new Ring(function () {
          return Data_Semiring.semiringFn(dictRing.Semiring0());
      }, function (f) {
          return function (g) {
              return function (x) {
                  return sub(dictRing)(f(x))(g(x));
              };
          };
      });
  };
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
  exports["ringUnit"] = ringUnit;
  exports["ringFn"] = ringFn;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };
  var Ord1 = function (Eq10, compare1) {
      this.Eq10 = Eq10;
      this.compare1 = compare1;
  };
  var ordVoid = new Ord(function () {
      return Data_Eq.eqVoid;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordUnit = new Ord(function () {
      return Data_Eq.eqUnit;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordOrdering = new Ord(function () {
      return Data_Ordering.eqOrdering;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          throw new Error("Failed pattern match at Data.Ord line 68, column 1 - line 68, column 37: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordBoolean = new Ord(function () {
      return Data_Eq.eqBoolean;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare1 = function (dict) {
      return dict.compare1;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return Data_Function.on(compare(dictOrd))(f);
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $33 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($33) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 114, column 3 - line 117, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return Data_Eq.eqArray(dictOrd.Eq0());
      }, (function () {
          var toDelta = function (x) {
              return function (y) {
                  var v = compare(dictOrd)(x)(y);
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Ord line 61, column 7 - line 66, column 1: " + [ v.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
              };
          };
      })());
  };
  var ord1Array = new Ord1(function () {
      return Data_Eq.eq1Array;
  }, function (dictOrd) {
      return compare(ordArray(dictOrd));
  });
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  if (lessThan(dictOrd)(x)(low)) {
                      return false;
                  };
                  if (greaterThan(dictOrd)(x)(hi)) {
                      return false;
                  };
                  return true;
              };
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $42 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($42) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["Ord1"] = Ord1;
  exports["abs"] = abs;
  exports["between"] = between;
  exports["clamp"] = clamp;
  exports["compare"] = compare;
  exports["compare1"] = compare1;
  exports["comparing"] = comparing;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["lessThan"] = lessThan;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["max"] = max;
  exports["min"] = min;
  exports["signum"] = signum;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordUnit"] = ordUnit;
  exports["ordVoid"] = ordVoid;
  exports["ordArray"] = ordArray;
  exports["ordOrdering"] = ordOrdering;
  exports["ord1Array"] = ord1Array;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Clown = function (x) {
      return x;
  };
  var showClown = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordClown = function (dictOrd) {
      return dictOrd;
  };
  var newtypeClown = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Clown);
  var functorClown = new Data_Functor.Functor(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var eqClown = function (dictEq) {
      return dictEq;
  };
  var bifunctorClown = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (v) {
              return function (v1) {
                  return Data_Functor.map(dictFunctor)(f)(v1);
              };
          };
      });
  };
  var biapplyClown = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorClown(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(dictApply)(v)(v1);
          };
      });
  };
  var biapplicativeClown = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyClown(dictApplicative.Apply0());
      }, function (a) {
          return function (v) {
              return Control_Applicative.pure(dictApplicative)(a);
          };
      });
  };
  exports["Clown"] = Clown;
  exports["newtypeClown"] = newtypeClown;
  exports["eqClown"] = eqClown;
  exports["ordClown"] = ordClown;
  exports["showClown"] = showClown;
  exports["functorClown"] = functorClown;
  exports["bifunctorClown"] = bifunctorClown;
  exports["biapplyClown"] = biapplyClown;
  exports["biapplicativeClown"] = biapplicativeClown;
})(PS["Data.Bifunctor.Clown"] = PS["Data.Bifunctor.Clown"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Flip = function (x) {
      return x;
  };
  var showFlip = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordFlip = function (dictOrd) {
      return dictOrd;
  };
  var newtypeFlip = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Flip);
  var functorFlip = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
          };
      });
  };
  var eqFlip = function (dictEq) {
      return dictEq;
  };
  var bifunctorFlip = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
              };
          };
      });
  };
  var biapplyFlip = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorFlip(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeFlip = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyFlip(dictBiapplicative.Biapply0());
      }, function (a) {
          return function (b) {
              return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
          };
      });
  };
  exports["Flip"] = Flip;
  exports["newtypeFlip"] = newtypeFlip;
  exports["eqFlip"] = eqFlip;
  exports["ordFlip"] = ordFlip;
  exports["showFlip"] = showFlip;
  exports["functorFlip"] = functorFlip;
  exports["bifunctorFlip"] = bifunctorFlip;
  exports["biapplyFlip"] = biapplyFlip;
  exports["biapplicativeFlip"] = biapplicativeFlip;
})(PS["Data.Bifunctor.Flip"] = PS["Data.Bifunctor.Flip"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Joker = function (x) {
      return x;
  };
  var showJoker = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordJoker = function (dictOrd) {
      return dictOrd;
  };
  var newtypeJoker = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Joker);
  var functorJoker = function (dictFunctor) {
      return new Data_Functor.Functor(function (g) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(g)(v);
          };
      });
  };
  var eqJoker = function (dictEq) {
      return dictEq;
  };
  var bifunctorJoker = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (v) {
          return function (g) {
              return function (v1) {
                  return Data_Functor.map(dictFunctor)(g)(v1);
              };
          };
      });
  };
  var biapplyJoker = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorJoker(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(dictApply)(v)(v1);
          };
      });
  };
  var biapplicativeJoker = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyJoker(dictApplicative.Apply0());
      }, function (v) {
          return function (b) {
              return Control_Applicative.pure(dictApplicative)(b);
          };
      });
  };
  exports["Joker"] = Joker;
  exports["newtypeJoker"] = newtypeJoker;
  exports["eqJoker"] = eqJoker;
  exports["ordJoker"] = ordJoker;
  exports["showJoker"] = showJoker;
  exports["functorJoker"] = functorJoker;
  exports["bifunctorJoker"] = bifunctorJoker;
  exports["biapplyJoker"] = biapplyJoker;
  exports["biapplicativeJoker"] = biapplicativeJoker;
})(PS["Data.Bifunctor.Joker"] = PS["Data.Bifunctor.Joker"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, Data_Unit.unit, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return Data_Unit.unit;
  }, Data_Unit.unit);
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraUnit"] = heytingAlgebraUnit;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var showProduct = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var eqProduct = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordProduct = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqProduct(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  var bifunctorProduct = function (dictBifunctor) {
      return function (dictBifunctor1) {
          return new Data_Bifunctor.Bifunctor(function (f) {
              return function (g) {
                  return function (v) {
                      return new Product(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                  };
              };
          });
      };
  };
  var biapplyProduct = function (dictBiapply) {
      return function (dictBiapply1) {
          return new Control_Biapply.Biapply(function () {
              return bifunctorProduct(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
          }, function (v) {
              return function (v1) {
                  return new Product(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var biapplicativeProduct = function (dictBiapplicative) {
      return function (dictBiapplicative1) {
          return new Control_Biapplicative.Biapplicative(function () {
              return biapplyProduct(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
          }, function (a) {
              return function (b) {
                  return new Product(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
              };
          });
      };
  };
  exports["Product"] = Product;
  exports["eqProduct"] = eqProduct;
  exports["ordProduct"] = ordProduct;
  exports["showProduct"] = showProduct;
  exports["bifunctorProduct"] = bifunctorProduct;
  exports["biapplyProduct"] = biapplyProduct;
  exports["biapplicativeProduct"] = biapplicativeProduct;
})(PS["Data.Bifunctor.Product"] = PS["Data.Bifunctor.Product"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Wrap = function (x) {
      return x;
  };
  var showWrap = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Wrap " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordWrap = function (dictOrd) {
      return dictOrd;
  };
  var newtypeWrap = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Wrap);
  var functorWrap = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.rmap(dictBifunctor)(f)(v);
          };
      });
  };
  var eqWrap = function (dictEq) {
      return dictEq;
  };
  var bifunctorWrap = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v);
              };
          };
      });
  };
  var biapplyWrap = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorWrap(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeWrap = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyWrap(dictBiapplicative.Biapply0());
      }, function (a) {
          return function (b) {
              return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
          };
      });
  };
  exports["Wrap"] = Wrap;
  exports["newtypeWrap"] = newtypeWrap;
  exports["eqWrap"] = eqWrap;
  exports["ordWrap"] = ordWrap;
  exports["showWrap"] = showWrap;
  exports["functorWrap"] = functorWrap;
  exports["bifunctorWrap"] = bifunctorWrap;
  exports["biapplyWrap"] = biapplyWrap;
  exports["biapplicativeWrap"] = biapplicativeWrap;
})(PS["Data.Bifunctor.Wrap"] = PS["Data.Bifunctor.Wrap"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadZero = function (Alternative1, Monad0) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
  };
  var monadZeroArray = new MonadZero(function () {
      return Control_Alternative.alternativeArray;
  }, function () {
      return Control_Monad.monadArray;
  });
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
          };
          throw new Error("Failed pattern match at Control.MonadZero line 54, column 1 - line 54, column 52: " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
  exports["monadZeroArray"] = monadZeroArray;
})(PS["Control.MonadZero"] = PS["Control.MonadZero"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };
  var boundedUnit = new Bounded(function () {
      return Data_Ord.ordUnit;
  }, Data_Unit.unit, Data_Unit.unit);
  var boundedOrdering = new Bounded(function () {
      return Data_Ord.ordOrdering;
  }, Data_Ordering.LT.value, Data_Ordering.GT.value);
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var boundedBoolean = new Bounded(function () {
      return Data_Ord.ordBoolean;
  }, false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
  exports["boundedOrdering"] = boundedOrdering;
  exports["boundedUnit"] = boundedUnit;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Functor = PS["Data.Functor"];        
  var Invariant = function (imap) {
      this.imap = imap;
  };
  var imapF = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(f);
          };
      };
  };
  var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
  var invariantFn = new Invariant(imapF(Data_Functor.functorFn));
  var imap = function (dict) {
      return dict.imap;
  };
  exports["Invariant"] = Invariant;
  exports["imap"] = imap;
  exports["imapF"] = imapF;
  exports["invariantFn"] = invariantFn;
  exports["invariantArray"] = invariantArray;
})(PS["Data.Functor.Invariant"] = PS["Data.Functor.Invariant"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var BooleanAlgebra = function (HeytingAlgebra0) {
      this.HeytingAlgebra0 = HeytingAlgebra0;
  };
  var booleanAlgebraUnit = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraUnit;
  });
  var booleanAlgebraFn = function (dictBooleanAlgebra) {
      return new BooleanAlgebra(function () {
          return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
      });
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraBoolean;
  });
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["booleanAlgebraUnit"] = booleanAlgebraUnit;
  exports["booleanAlgebraFn"] = booleanAlgebraFn;
})(PS["Data.BooleanAlgebra"] = PS["Data.BooleanAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  };
  var commutativeRingUnit = new CommutativeRing(function () {
      return Data_Ring.ringUnit;
  });
  var commutativeRingNumber = new CommutativeRing(function () {
      return Data_Ring.ringNumber;
  });
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  var commutativeRingFn = function (dictCommutativeRing) {
      return new CommutativeRing(function () {
          return Data_Ring.ringFn(dictCommutativeRing.Ring0());
      });
  };
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
  exports["commutativeRingNumber"] = commutativeRingNumber;
  exports["commutativeRingUnit"] = commutativeRingUnit;
  exports["commutativeRingFn"] = commutativeRingFn;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];        
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var euclideanRingNumber = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingNumber;
  }, function (v) {
      return 1;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var lcm = function (dictEq) {
      return function (dictEuclideanRing) {
          return function (a) {
              return function (b) {
                  var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                  if ($8) {
                      return Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
                  };
                  return div(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
              };
          };
      };
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["gcd"] = gcd;
  exports["lcm"] = lcm;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
  exports["euclideanRingNumber"] = euclideanRingNumber;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, Data_Function["const"](mempty(dictMonoid)));
  };
  var power = function (dictMonoid) {
      return function (x) {
          var go = function (p) {
              if (p <= 0) {
                  return mempty(dictMonoid);
              };
              if (p === 1) {
                  return x;
              };
              if (p % 2 === 0) {
                  var x$prime = go(p / 2 | 0);
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
              };
              if (Data_Boolean.otherwise) {
                  var x$prime = go(p / 2 | 0);
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
              };
              throw new Error("Failed pattern match at Data.Monoid line 48, column 3 - line 48, column 17: " + [ p.constructor.name ]);
          };
          return go;
      };
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["power"] = power;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 207, column 1 - line 207, column 47: " + [ v.constructor.name ]);
      });
  };
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe line 176, column 1 - line 176, column 62: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Data_Unit.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 232, column 1 - line 232, column 62: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
  var fromMaybe$prime = function (a) {
      return maybe$prime(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar34) {
                  return $dollar34;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 270, column 1 - line 270, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var extendMaybe = new Control_Extend.Extend(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Nothing) {
              return Nothing.value;
          };
          return new Just(v(v1));
      };
  });
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMaybe(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Nothing) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Nothing) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 196, column 8 - line 196, column 51: " + [ x.constructor.name, y.constructor.name ]);
          };
      });
  };
  var eq1Maybe = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqMaybe(dictEq));
  });
  var ord1Maybe = new Data_Ord.Ord1(function () {
      return eq1Maybe;
  }, function (dictOrd) {
      return Data_Ord.compare(ordMaybe(dictOrd));
  });
  var boundedMaybe = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordMaybe(dictBounded.Ord0());
      }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 68, column 1 - line 68, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["fromMaybe"] = fromMaybe;
  exports["fromMaybe'"] = fromMaybe$prime;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["maybe"] = maybe;
  exports["maybe'"] = maybe$prime;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["extendMaybe"] = extendMaybe;
  exports["invariantMaybe"] = invariantMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["eq1Maybe"] = eq1Maybe;
  exports["ordMaybe"] = ordMaybe;
  exports["ord1Maybe"] = ord1Maybe;
  exports["boundedMaybe"] = boundedMaybe;
  exports["showMaybe"] = showMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var First = function (x) {
      return x;
  };
  var showFirst = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });
  var ordFirst = function (dictOrd) {
      return Data_Maybe.ordMaybe(dictOrd);
  };
  var ord1First = Data_Maybe.ord1Maybe;
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  var monadFirst = Data_Maybe.monadMaybe;
  var invariantFirst = Data_Maybe.invariantMaybe;
  var functorFirst = Data_Maybe.functorMaybe;
  var extendFirst = Data_Maybe.extendMaybe;
  var eqFirst = function (dictEq) {
      return Data_Maybe.eqMaybe(dictEq);
  };
  var eq1First = Data_Maybe.eq1Maybe;
  var boundedFirst = function (dictBounded) {
      return Data_Maybe.boundedMaybe(dictBounded);
  };
  var bindFirst = Data_Maybe.bindMaybe;
  var applyFirst = Data_Maybe.applyMaybe;
  var applicativeFirst = Data_Maybe.applicativeMaybe;
  exports["First"] = First;
  exports["newtypeFirst"] = newtypeFirst;
  exports["eqFirst"] = eqFirst;
  exports["eq1First"] = eq1First;
  exports["ordFirst"] = ordFirst;
  exports["ord1First"] = ord1First;
  exports["boundedFirst"] = boundedFirst;
  exports["functorFirst"] = functorFirst;
  exports["invariantFirst"] = invariantFirst;
  exports["applyFirst"] = applyFirst;
  exports["applicativeFirst"] = applicativeFirst;
  exports["bindFirst"] = bindFirst;
  exports["monadFirst"] = monadFirst;
  exports["extendFirst"] = extendFirst;
  exports["showFirst"] = showFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Last = function (x) {
      return x;
  };
  var showLast = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
              return v1;
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return v;
          };
          throw new Error("Failed pattern match at Data.Maybe.Last line 53, column 1 - line 53, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordLast = function (dictOrd) {
      return Data_Maybe.ordMaybe(dictOrd);
  };
  var ord1Last = Data_Maybe.ord1Maybe;
  var newtypeLast = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Last);
  var monoidLast = new Data_Monoid.Monoid(function () {
      return semigroupLast;
  }, Data_Maybe.Nothing.value);
  var monadLast = Data_Maybe.monadMaybe;
  var invariantLast = Data_Maybe.invariantMaybe;
  var functorLast = Data_Maybe.functorMaybe;
  var extendLast = Data_Maybe.extendMaybe;
  var eqLast = function (dictEq) {
      return Data_Maybe.eqMaybe(dictEq);
  };
  var eq1Last = Data_Maybe.eq1Maybe;
  var boundedLast = function (dictBounded) {
      return Data_Maybe.boundedMaybe(dictBounded);
  };
  var bindLast = Data_Maybe.bindMaybe;
  var applyLast = Data_Maybe.applyMaybe;
  var applicativeLast = Data_Maybe.applicativeMaybe;
  exports["Last"] = Last;
  exports["newtypeLast"] = newtypeLast;
  exports["eqLast"] = eqLast;
  exports["eq1Last"] = eq1Last;
  exports["ordLast"] = ordLast;
  exports["ord1Last"] = ord1Last;
  exports["boundedLast"] = boundedLast;
  exports["functorLast"] = functorLast;
  exports["invariantLast"] = invariantLast;
  exports["applyLast"] = applyLast;
  exports["applicativeLast"] = applicativeLast;
  exports["bindLast"] = bindLast;
  exports["monadLast"] = monadLast;
  exports["extendLast"] = extendLast;
  exports["showLast"] = showLast;
  exports["semigroupLast"] = semigroupLast;
  exports["monoidLast"] = monoidLast;
})(PS["Data.Maybe.Last"] = PS["Data.Maybe.Last"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Additive = function (x) {
      return x;
  };
  var showAdditive = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupAdditive = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.add(dictSemiring)(v)(v1);
          };
      });
  };
  var ordAdditive = function (dictOrd) {
      return dictOrd;
  };
  var newtypeAdditive = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Additive);
  var monoidAdditive = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAdditive(dictSemiring);
      }, Data_Semiring.zero(dictSemiring));
  };
  var invariantAdditive = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorAdditive = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendAdditive = new Control_Extend.Extend(function () {
      return functorAdditive;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqAdditive = function (dictEq) {
      return dictEq;
  };
  var comonadAdditive = new Control_Comonad.Comonad(function () {
      return extendAdditive;
  }, Data_Newtype.unwrap(newtypeAdditive));
  var boundedAdditive = function (dictBounded) {
      return dictBounded;
  };
  var applyAdditive = new Control_Apply.Apply(function () {
      return functorAdditive;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindAdditive = new Control_Bind.Bind(function () {
      return applyAdditive;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeAdditive = new Control_Applicative.Applicative(function () {
      return applyAdditive;
  }, Additive);
  var monadAdditive = new Control_Monad.Monad(function () {
      return applicativeAdditive;
  }, function () {
      return bindAdditive;
  });
  exports["Additive"] = Additive;
  exports["newtypeAdditive"] = newtypeAdditive;
  exports["eqAdditive"] = eqAdditive;
  exports["ordAdditive"] = ordAdditive;
  exports["boundedAdditive"] = boundedAdditive;
  exports["functorAdditive"] = functorAdditive;
  exports["invariantAdditive"] = invariantAdditive;
  exports["applyAdditive"] = applyAdditive;
  exports["applicativeAdditive"] = applicativeAdditive;
  exports["bindAdditive"] = bindAdditive;
  exports["monadAdditive"] = monadAdditive;
  exports["extendAdditive"] = extendAdditive;
  exports["comonadAdditive"] = comonadAdditive;
  exports["showAdditive"] = showAdditive;
  exports["semigroupAdditive"] = semigroupAdditive;
  exports["monoidAdditive"] = monoidAdditive;
})(PS["Data.Monoid.Additive"] = PS["Data.Monoid.Additive"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Conj = function (x) {
      return x;
  };
  var showConj = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringConj = function (dictHeytingAlgebra) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var ordConj = function (dictOrd) {
      return dictOrd;
  };
  var newtypeConj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Conj);
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var invariantConj = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorConj = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendConj = new Control_Extend.Extend(function () {
      return functorConj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqConj = function (dictEq) {
      return dictEq;
  };
  var comonadConj = new Control_Comonad.Comonad(function () {
      return extendConj;
  }, Data_Newtype.unwrap(newtypeConj));
  var boundedConj = function (dictBounded) {
      return dictBounded;
  };
  var applyConj = new Control_Apply.Apply(function () {
      return functorConj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindConj = new Control_Bind.Bind(function () {
      return applyConj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeConj = new Control_Applicative.Applicative(function () {
      return applyConj;
  }, Conj);
  var monadConj = new Control_Monad.Monad(function () {
      return applicativeConj;
  }, function () {
      return bindConj;
  });
  exports["Conj"] = Conj;
  exports["newtypeConj"] = newtypeConj;
  exports["eqConj"] = eqConj;
  exports["ordConj"] = ordConj;
  exports["boundedConj"] = boundedConj;
  exports["functorConj"] = functorConj;
  exports["invariantConj"] = invariantConj;
  exports["applyConj"] = applyConj;
  exports["applicativeConj"] = applicativeConj;
  exports["bindConj"] = bindConj;
  exports["monadConj"] = monadConj;
  exports["extendConj"] = extendConj;
  exports["comonadConj"] = comonadConj;
  exports["showConj"] = showConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
  exports["semiringConj"] = semiringConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Disj = function (x) {
      return x;
  };
  var showDisj = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringDisj = function (dictHeytingAlgebra) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var ordDisj = function (dictOrd) {
      return dictOrd;
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  var invariantDisj = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorDisj = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDisj = new Control_Extend.Extend(function () {
      return functorDisj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDisj = function (dictEq) {
      return dictEq;
  };
  var comonadDisj = new Control_Comonad.Comonad(function () {
      return extendDisj;
  }, Data_Newtype.unwrap(newtypeDisj));
  var boundedDisj = function (dictBounded) {
      return dictBounded;
  };
  var applyDisj = new Control_Apply.Apply(function () {
      return functorDisj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDisj = new Control_Bind.Bind(function () {
      return applyDisj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDisj = new Control_Applicative.Applicative(function () {
      return applyDisj;
  }, Disj);
  var monadDisj = new Control_Monad.Monad(function () {
      return applicativeDisj;
  }, function () {
      return bindDisj;
  });
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["eqDisj"] = eqDisj;
  exports["ordDisj"] = ordDisj;
  exports["boundedDisj"] = boundedDisj;
  exports["functorDisj"] = functorDisj;
  exports["invariantDisj"] = invariantDisj;
  exports["applyDisj"] = applyDisj;
  exports["applicativeDisj"] = applicativeDisj;
  exports["bindDisj"] = bindDisj;
  exports["monadDisj"] = monadDisj;
  exports["extendDisj"] = extendDisj;
  exports["comonadDisj"] = comonadDisj;
  exports["showDisj"] = showDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
  exports["semiringDisj"] = semiringDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Dual = function (x) {
      return x;
  };
  var showDual = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupDual = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v1)(v);
          };
      });
  };
  var ordDual = function (dictOrd) {
      return dictOrd;
  };
  var newtypeDual = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Dual);
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid.Semigroup0());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var invariantDual = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorDual = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDual = new Control_Extend.Extend(function () {
      return functorDual;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDual = function (dictEq) {
      return dictEq;
  };
  var comonadDual = new Control_Comonad.Comonad(function () {
      return extendDual;
  }, Data_Newtype.unwrap(newtypeDual));
  var boundedDual = function (dictBounded) {
      return dictBounded;
  };
  var applyDual = new Control_Apply.Apply(function () {
      return functorDual;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDual = new Control_Bind.Bind(function () {
      return applyDual;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDual = new Control_Applicative.Applicative(function () {
      return applyDual;
  }, Dual);
  var monadDual = new Control_Monad.Monad(function () {
      return applicativeDual;
  }, function () {
      return bindDual;
  });
  exports["Dual"] = Dual;
  exports["newtypeDual"] = newtypeDual;
  exports["eqDual"] = eqDual;
  exports["ordDual"] = ordDual;
  exports["boundedDual"] = boundedDual;
  exports["functorDual"] = functorDual;
  exports["invariantDual"] = invariantDual;
  exports["applyDual"] = applyDual;
  exports["applicativeDual"] = applicativeDual;
  exports["bindDual"] = bindDual;
  exports["monadDual"] = monadDual;
  exports["extendDual"] = extendDual;
  exports["comonadDual"] = comonadDual;
  exports["showDual"] = showDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];        
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function ($11) {
              return v(v1($11));
          };
      };
  });
  var newtypeEndo = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Endo);
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Control_Category.id(Control_Category.categoryFn));
  var invariantEndo = new Data_Functor_Invariant.Invariant(function (ab) {
      return function (ba) {
          return function (v) {
              return function ($12) {
                  return ab(v(ba($12)));
              };
          };
      };
  });
  exports["Endo"] = Endo;
  exports["newtypeEndo"] = newtypeEndo;
  exports["invariantEndo"] = invariantEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Multiplicative = function (x) {
      return x;
  };
  var showMultiplicative = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupMultiplicative = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.mul(dictSemiring)(v)(v1);
          };
      });
  };
  var ordMultiplicative = function (dictOrd) {
      return dictOrd;
  };
  var newtypeMultiplicative = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Multiplicative);
  var monoidMultiplicative = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMultiplicative(dictSemiring);
      }, Data_Semiring.one(dictSemiring));
  };
  var invariantMultiplicative = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorMultiplicative = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendMultiplicative = new Control_Extend.Extend(function () {
      return functorMultiplicative;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqMultiplicative = function (dictEq) {
      return dictEq;
  };
  var comonadMultiplicative = new Control_Comonad.Comonad(function () {
      return extendMultiplicative;
  }, Data_Newtype.unwrap(newtypeMultiplicative));
  var boundedMultiplicative = function (dictBounded) {
      return dictBounded;
  };
  var applyMultiplicative = new Control_Apply.Apply(function () {
      return functorMultiplicative;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindMultiplicative = new Control_Bind.Bind(function () {
      return applyMultiplicative;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
      return applyMultiplicative;
  }, Multiplicative);
  var monadMultiplicative = new Control_Monad.Monad(function () {
      return applicativeMultiplicative;
  }, function () {
      return bindMultiplicative;
  });
  exports["Multiplicative"] = Multiplicative;
  exports["newtypeMultiplicative"] = newtypeMultiplicative;
  exports["eqMultiplicative"] = eqMultiplicative;
  exports["ordMultiplicative"] = ordMultiplicative;
  exports["boundedMultiplicative"] = boundedMultiplicative;
  exports["functorMultiplicative"] = functorMultiplicative;
  exports["invariantMultiplicative"] = invariantMultiplicative;
  exports["applyMultiplicative"] = applyMultiplicative;
  exports["applicativeMultiplicative"] = applicativeMultiplicative;
  exports["bindMultiplicative"] = bindMultiplicative;
  exports["monadMultiplicative"] = monadMultiplicative;
  exports["extendMultiplicative"] = extendMultiplicative;
  exports["comonadMultiplicative"] = comonadMultiplicative;
  exports["showMultiplicative"] = showMultiplicative;
  exports["semigroupMultiplicative"] = semigroupMultiplicative;
  exports["monoidMultiplicative"] = monoidMultiplicative;
})(PS["Data.Monoid.Multiplicative"] = PS["Data.Monoid.Multiplicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var $$null = function (dictFoldable) {
      return foldr(dictFoldable)(function (v) {
          return function (v1) {
              return false;
          };
      })(true);
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($175) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($175));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var length = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(function (c) {
              return function (v) {
                  return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
              };
          })(Data_Semiring.zero(dictSemiring));
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $98 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($98) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 296, column 3 - line 296, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $102 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                          if ($102) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 309, column 3 - line 309, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var product = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  };
  var foldableMultiplicative = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 125, column 1 - line 125, column 41: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 125, column 1 - line 125, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 125, column 1 - line 125, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldableDual = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableDisj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableConj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableAdditive = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldl(dictFoldable)(function (acc) {
                  return function (x) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldableFirst = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldableLast = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(Data_Newtype.unwrap(Data_Monoid_Dual.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($176) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c)($176)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($177) {
                      return Data_Monoid_Endo.Endo(c($177));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var findMap = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return p(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($178) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($178));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($179) {
                  return !elem(dictFoldable)(dictEq)(x)($179);
              };
          };
      };
  };
  var or = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  var and = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["all"] = all;
  exports["and"] = and;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["findMap"] = findMap;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldlDefault"] = foldlDefault;
  exports["foldr"] = foldr;
  exports["foldrDefault"] = foldrDefault;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["length"] = length;
  exports["maximum"] = maximum;
  exports["maximumBy"] = maximumBy;
  exports["minimum"] = minimum;
  exports["minimumBy"] = minimumBy;
  exports["notElem"] = notElem;
  exports["null"] = $$null;
  exports["oneOf"] = oneOf;
  exports["or"] = or;
  exports["product"] = product;
  exports["sequence_"] = sequence_;
  exports["sum"] = sum;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableFirst"] = foldableFirst;
  exports["foldableLast"] = foldableLast;
  exports["foldableAdditive"] = foldableAdditive;
  exports["foldableDual"] = foldableDual;
  exports["foldableDisj"] = foldableDisj;
  exports["foldableConj"] = foldableConj;
  exports["foldableMultiplicative"] = foldableMultiplicative;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor_Clown = PS["Data.Bifunctor.Clown"];
  var Data_Bifunctor_Flip = PS["Data.Bifunctor.Flip"];
  var Data_Bifunctor_Joker = PS["Data.Bifunctor.Joker"];
  var Data_Bifunctor_Product = PS["Data.Bifunctor.Product"];
  var Data_Bifunctor_Wrap = PS["Data.Bifunctor.Wrap"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldr = function (dict) {
      return dict.bifoldr;
  };
  var bitraverse_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)(function ($97) {
                      return Control_Apply.applySecond(dictApplicative.Apply0())(f($97));
                  })(function ($98) {
                      return Control_Apply.applySecond(dictApplicative.Apply0())(g($98));
                  })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
              };
          };
      };
  };
  var bifor_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  var bisequence_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var bifoldl = function (dict) {
      return dict.bifoldl;
  };
  var bifoldableJoker = function (dictFoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (v) {
              return function (r) {
                  return function (v1) {
                      return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
                  };
              };
          };
      }, function (v) {
          return function (r) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
                  };
              };
          };
      }, function (v) {
          return function (r) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
                  };
              };
          };
      });
  };
  var bifoldableClown = function (dictFoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (l) {
              return function (v) {
                  return function (v1) {
                      return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
                  };
              };
          };
      }, function (l) {
          return function (v) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
                  };
              };
          };
      }, function (l) {
          return function (v) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
                  };
              };
          };
      });
  };
  var bifoldMapDefaultR = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)(function ($99) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f($99));
                  })(function ($100) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(g($100));
                  })(Data_Monoid.mempty(dictMonoid));
              };
          };
      };
  };
  var bifoldMapDefaultL = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return bifoldl(dictBifoldable)(function (m) {
                      return function (a) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
                      };
                  })(function (m) {
                      return function (b) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
                      };
                  })(Data_Monoid.mempty(dictMonoid));
              };
          };
      };
  };
  var bifoldMap = function (dict) {
      return dict.bifoldMap;
  };
  var bifoldableFlip = function (dictBifoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (r) {
              return function (l) {
                  return function (v) {
                      return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                  };
              };
          };
      }, function (r) {
          return function (l) {
              return function (u) {
                  return function (v) {
                      return bifoldl(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      }, function (r) {
          return function (l) {
              return function (u) {
                  return function (v) {
                      return bifoldr(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      });
  };
  var bifoldableWrap = function (dictBifoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (l) {
              return function (r) {
                  return function (v) {
                      return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                  };
              };
          };
      }, function (l) {
          return function (r) {
              return function (u) {
                  return function (v) {
                      return bifoldl(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      }, function (l) {
          return function (r) {
              return function (u) {
                  return function (v) {
                      return bifoldr(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      });
  };
  var bifoldlDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(Data_Newtype.unwrap(Data_Monoid_Dual.newtypeDual)(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($101) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(f)($101)));
                      })(function ($102) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(g)($102)));
                      })(p)))(z);
                  };
              };
          };
      };
  };
  var bifoldrDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo)(function ($103) {
                          return Data_Monoid_Endo.Endo(f($103));
                      })(function ($104) {
                          return Data_Monoid_Endo.Endo(g($104));
                      })(p))(z);
                  };
              };
          };
      };
  };
  var bifoldableProduct = function (dictBifoldable) {
      return function (dictBifoldable1) {
          return new Bifoldable(function (dictMonoid) {
              return function (l) {
                  return function (r) {
                      return function (v) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
                      };
                  };
              };
          }, function (l) {
              return function (r) {
                  return function (u) {
                      return function (m) {
                          return bifoldlDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                      };
                  };
              };
          }, function (l) {
              return function (r) {
                  return function (u) {
                      return function (m) {
                          return bifoldrDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                      };
                  };
              };
          });
      };
  };
  var bifold = function (dictBifoldable) {
      return function (dictMonoid) {
          return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var biany = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($105) {
                      return Data_Newtype.unwrap(Data_Monoid_Disj.newtypeDisj)(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($106) {
                          return Data_Monoid_Disj.Disj(p($106));
                      })(function ($107) {
                          return Data_Monoid_Disj.Disj(q($107));
                      })($105));
                  };
              };
          };
      };
  };
  var biall = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($108) {
                      return Data_Newtype.unwrap(Data_Monoid_Conj.newtypeConj)(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($109) {
                          return Data_Monoid_Conj.Conj(p($109));
                      })(function ($110) {
                          return Data_Monoid_Conj.Conj(q($110));
                      })($108));
                  };
              };
          };
      };
  };
  exports["Bifoldable"] = Bifoldable;
  exports["biall"] = biall;
  exports["biany"] = biany;
  exports["bifold"] = bifold;
  exports["bifoldMap"] = bifoldMap;
  exports["bifoldMapDefaultL"] = bifoldMapDefaultL;
  exports["bifoldMapDefaultR"] = bifoldMapDefaultR;
  exports["bifoldl"] = bifoldl;
  exports["bifoldlDefault"] = bifoldlDefault;
  exports["bifoldr"] = bifoldr;
  exports["bifoldrDefault"] = bifoldrDefault;
  exports["bifor_"] = bifor_;
  exports["bisequence_"] = bisequence_;
  exports["bitraverse_"] = bitraverse_;
  exports["bifoldableClown"] = bifoldableClown;
  exports["bifoldableJoker"] = bifoldableJoker;
  exports["bifoldableFlip"] = bifoldableFlip;
  exports["bifoldableProduct"] = bifoldableProduct;
  exports["bifoldableWrap"] = bifoldableWrap;
})(PS["Data.Bifoldable"] = PS["Data.Bifoldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Prelude = PS["Prelude"];        
  var StateL = function (x) {
      return x;
  };
  var StateR = function (x) {
      return x;
  };
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableMultiplicative = new Traversable(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function () {
      return Data_Monoid_Multiplicative.functorMultiplicative;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
      };
  });
  var traversableMaybe = new Traversable(function () {
      return Data_Foldable.foldableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable line 84, column 1 - line 84, column 47: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable line 84, column 1 - line 84, column 47: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableDual = new Traversable(function () {
      return Data_Foldable.foldableDual;
  }, function () {
      return Data_Monoid_Dual.functorDual;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(f(v));
          };
      };
  });
  var traversableDisj = new Traversable(function () {
      return Data_Foldable.foldableDisj;
  }, function () {
      return Data_Monoid_Disj.functorDisj;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(f(v));
          };
      };
  });
  var traversableConj = new Traversable(function () {
      return Data_Foldable.foldableConj;
  }, function () {
      return Data_Monoid_Conj.functorConj;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(f(v));
          };
      };
  });
  var traversableAdditive = new Traversable(function () {
      return Data_Foldable.foldableAdditive;
  }, function () {
      return Data_Monoid_Additive.functorAdditive;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(f(v));
          };
      };
  });
  var stateR = function (v) {
      return v;
  };
  var stateL = function (v) {
      return v;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var traversableFirst = new Traversable(function () {
      return Data_Foldable.foldableFirst;
  }, function () {
      return Data_Maybe_First.functorFirst;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traversableLast = new Traversable(function () {
      return Data_Foldable.foldableLast;
  }, function () {
      return Data_Maybe_Last.functorLast;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traverseDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (ta) {
                  return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
              };
          };
      };
  };
  var functorStateR = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var v = stateR(k)(s);
              return {
                  accum: v.accum, 
                  value: f(v.value)
              };
          };
      };
  });
  var functorStateL = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var v = stateL(k)(s);
              return {
                  accum: v.accum, 
                  value: f(v.value)
              };
          };
      };
  });
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  var applyStateR = new Control_Apply.Apply(function () {
      return functorStateR;
  }, function (f) {
      return function (x) {
          return function (s) {
              var v = stateR(x)(s);
              var v1 = stateR(f)(v.accum);
              return {
                  accum: v1.accum, 
                  value: v1.value(v.value)
              };
          };
      };
  });
  var applyStateL = new Control_Apply.Apply(function () {
      return functorStateL;
  }, function (f) {
      return function (x) {
          return function (s) {
              var v = stateL(f)(s);
              var v1 = stateL(x)(v.accum);
              return {
                  accum: v1.accum, 
                  value: v.value(v1.value)
              };
          };
      };
  });
  var applicativeStateR = new Control_Applicative.Applicative(function () {
      return applyStateR;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumR = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateR(traverse(dictTraversable)(applicativeStateR)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanr = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumR(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(a)(b);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var applicativeStateL = new Control_Applicative.Applicative(function () {
      return applyStateL;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumL = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateL(traverse(dictTraversable)(applicativeStateL)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanl = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumL(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(b)(a);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["mapAccumL"] = mapAccumL;
  exports["mapAccumR"] = mapAccumR;
  exports["scanl"] = scanl;
  exports["scanr"] = scanr;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverse"] = traverse;
  exports["traverseDefault"] = traverseDefault;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableFirst"] = traversableFirst;
  exports["traversableLast"] = traversableLast;
  exports["traversableAdditive"] = traversableAdditive;
  exports["traversableDual"] = traversableDual;
  exports["traversableConj"] = traversableConj;
  exports["traversableDisj"] = traversableDisj;
  exports["traversableMultiplicative"] = traversableMultiplicative;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bifunctor_Clown = PS["Data.Bifunctor.Clown"];
  var Data_Bifunctor_Flip = PS["Data.Bifunctor.Flip"];
  var Data_Bifunctor_Joker = PS["Data.Bifunctor.Joker"];
  var Data_Bifunctor_Product = PS["Data.Bifunctor.Product"];
  var Data_Bifunctor_Wrap = PS["Data.Bifunctor.Wrap"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Bitraversable = function (Bifoldable1, Bifunctor0, bisequence, bitraverse) {
      this.Bifoldable1 = Bifoldable1;
      this.Bifunctor0 = Bifunctor0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var lfor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
              };
          };
      };
  };
  var ltraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
          };
      };
  };
  var rfor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
              };
          };
      };
  };
  var rtraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
      };
  };
  var bitraversableJoker = function (dictTraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
      }, function () {
          return Data_Bifunctor_Joker.bifunctorJoker(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (v) {
              return function (r) {
                  return function (v1) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
                  };
              };
          };
      });
  };
  var bitraversableClown = function (dictTraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
      }, function () {
          return Data_Bifunctor_Clown.bifunctorClown(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (l) {
              return function (v) {
                  return function (v1) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
                  };
              };
          };
      });
  };
  var bisequenceDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  var bitraversableFlip = function (dictBitraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
      }, function () {
          return Data_Bifunctor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (r) {
              return function (l) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                  };
              };
          };
      });
  };
  var bitraversableProduct = function (dictBitraversable) {
      return function (dictBitraversable1) {
          return new Bitraversable(function () {
              return Data_Bifoldable.bifoldableProduct(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
          }, function () {
              return Data_Bifunctor_Product.bifunctorProduct(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
          }, function (dictApplicative) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
              };
          }, function (dictApplicative) {
              return function (l) {
                  return function (r) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
                      };
                  };
              };
          });
      };
  };
  var bitraversableWrap = function (dictBitraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableWrap(dictBitraversable.Bifoldable1());
      }, function () {
          return Data_Bifunctor_Wrap.bifunctorWrap(dictBitraversable.Bifunctor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bisequence(dictBitraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (l) {
              return function (r) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                  };
              };
          };
      });
  };
  var bitraverseDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return function (t) {
                      return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
                  };
              };
          };
      };
  };
  var bifor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  exports["Bitraversable"] = Bitraversable;
  exports["bifor"] = bifor;
  exports["bisequence"] = bisequence;
  exports["bisequenceDefault"] = bisequenceDefault;
  exports["bitraverse"] = bitraverse;
  exports["bitraverseDefault"] = bitraverseDefault;
  exports["lfor"] = lfor;
  exports["ltraverse"] = ltraverse;
  exports["rfor"] = rfor;
  exports["rtraverse"] = rtraverse;
  exports["bitraversableClown"] = bitraversableClown;
  exports["bitraversableJoker"] = bitraversableJoker;
  exports["bitraversableFlip"] = bitraversableFlip;
  exports["bitraversableProduct"] = bitraversableProduct;
  exports["bitraversableWrap"] = bitraversableWrap;
})(PS["Data.Bitraversable"] = PS["Data.Bitraversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var swap = function (v) {
      return new Tuple(v.value1, v.value0);
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var semiringTuple = function (dictSemiring) {
      return function (dictSemiring1) {
          return new Data_Semiring.Semiring(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
              };
          }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
      };
  };
  var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return new Tuple(v1.value0, v.value1);
      };
  });
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var ringTuple = function (dictRing) {
      return function (dictRing1) {
          return new Data_Ring.Ring(function () {
              return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function ($261) {
                  return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $143 = Data_Eq.eq(dictEq)(a)(v.value0);
                      if ($143) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      return Data_Maybe.Nothing.value;
                  })($261));
              };
          };
      };
  };
  var heytingAlgebraTuple = function (dictHeytingAlgebra) {
      return function (dictHeytingAlgebra1) {
          return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
          }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
      };
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });
  var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
  var fst = function (v) {
      return v.value0;
  };
  var lazyTuple = function (dictLazy) {
      return function (dictLazy1) {
          return new Control_Lazy.Lazy(function (f) {
              return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                  return fst(f(Data_Unit.unit));
              }), Control_Lazy.defer(dictLazy1)(function (v) {
                  return snd(f(Data_Unit.unit));
              }));
          });
      };
  };
  var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v.value1)(z);
          };
      };
  });
  var traversableTuple = new Data_Traversable.Traversable(function () {
      return foldableTuple;
  }, function () {
      return functorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var extendTuple = new Control_Extend.Extend(function () {
      return functorTuple;
  }, function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v));
      };
  });
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  var eq1Tuple = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
      });
  };
  var ord1Tuple = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Tuple(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
      });
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  var comonadTuple = new Control_Comonad.Comonad(function () {
      return extendTuple;
  }, snd);
  var commutativeRingTuple = function (dictCommutativeRing) {
      return function (dictCommutativeRing1) {
          return new Data_CommutativeRing.CommutativeRing(function () {
              return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
          });
      };
  };
  var boundedTuple = function (dictBounded) {
      return function (dictBounded1) {
          return new Data_Bounded.Bounded(function () {
              return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
          }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
      };
  };
  var booleanAlgebraTuple = function (dictBooleanAlgebra) {
      return function (dictBooleanAlgebra1) {
          return new Data_BooleanAlgebra.BooleanAlgebra(function () {
              return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
          });
      };
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return g(f(z)(v.value0))(v.value1);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return f(v.value0)(g(v.value1)(z));
              };
          };
      };
  });
  var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableTuple;
  }, function () {
      return bifunctorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  var biapplyTuple = new Control_Biapply.Biapply(function () {
      return bifunctorTuple;
  }, function (v) {
      return function (v1) {
          return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
      };
  });
  var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
      return biapplyTuple;
  }, Tuple.create);
  var applyTuple = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorTuple;
      }, function (v) {
          return function (v1) {
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
          };
      });
  };
  var bindTuple = function (dictSemigroup) {
      return new Control_Bind.Bind(function () {
          return applyTuple(dictSemigroup);
      }, function (v) {
          return function (f) {
              var v1 = f(v.value1);
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
          };
      });
  };
  var applicativeTuple = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyTuple(dictMonoid.Semigroup0());
      }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
  };
  var monadTuple = function (dictMonoid) {
      return new Control_Monad.Monad(function () {
          return applicativeTuple(dictMonoid);
      }, function () {
          return bindTuple(dictMonoid.Semigroup0());
      });
  };
  exports["Tuple"] = Tuple;
  exports["curry"] = curry;
  exports["fst"] = fst;
  exports["lookup"] = lookup;
  exports["snd"] = snd;
  exports["swap"] = swap;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["eq1Tuple"] = eq1Tuple;
  exports["ordTuple"] = ordTuple;
  exports["ord1Tuple"] = ord1Tuple;
  exports["boundedTuple"] = boundedTuple;
  exports["semigroupoidTuple"] = semigroupoidTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["monoidTuple"] = monoidTuple;
  exports["semiringTuple"] = semiringTuple;
  exports["ringTuple"] = ringTuple;
  exports["commutativeRingTuple"] = commutativeRingTuple;
  exports["heytingAlgebraTuple"] = heytingAlgebraTuple;
  exports["booleanAlgebraTuple"] = booleanAlgebraTuple;
  exports["functorTuple"] = functorTuple;
  exports["invariantTuple"] = invariantTuple;
  exports["bifunctorTuple"] = bifunctorTuple;
  exports["applyTuple"] = applyTuple;
  exports["biapplyTuple"] = biapplyTuple;
  exports["applicativeTuple"] = applicativeTuple;
  exports["biapplicativeTuple"] = biapplicativeTuple;
  exports["bindTuple"] = bindTuple;
  exports["monadTuple"] = monadTuple;
  exports["extendTuple"] = extendTuple;
  exports["comonadTuple"] = comonadTuple;
  exports["lazyTuple"] = lazyTuple;
  exports["foldableTuple"] = foldableTuple;
  exports["bifoldableTuple"] = bifoldableTuple;
  exports["traversableTuple"] = traversableTuple;
  exports["bitraversableTuple"] = bitraversableTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans_Class = PS["Control.Comonad.Trans.Class"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var EnvT = function (x) {
      return x;
  };
  var withEnvT = function (f) {
      return function (v) {
          return EnvT(new Data_Tuple.Tuple(f(v.value0), v.value1));
      };
  };
  var runEnvT = function (v) {
      return v;
  };
  var newtypeEnvT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, EnvT);
  var mapEnvT = function (f) {
      return function (v) {
          return EnvT(new Data_Tuple.Tuple(v.value0, f(v.value1)));
      };
  };
  var functorEnvT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return EnvT(new Data_Tuple.Tuple(v.value0, Data_Functor.map(dictFunctor)(f)(v.value1)));
          };
      });
  };
  var extendEnvT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorEnvT(dictExtend.Functor0());
      }, function (f) {
          return function (v) {
              return EnvT(new Data_Tuple.Tuple(v.value0, Data_Functor.map(dictExtend.Functor0())(f)(Control_Extend.extend(dictExtend)(function ($37) {
                  return EnvT(Data_Tuple.Tuple.create(v.value0)($37));
              })(v.value1))));
          };
      });
  };
  var comonadTransEnvT = new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
      return function (v) {
          return v.value1;
      };
  });
  var comonadEnvT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendEnvT(dictComonad.Extend0());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value1);
      });
  };
  exports["EnvT"] = EnvT;
  exports["mapEnvT"] = mapEnvT;
  exports["runEnvT"] = runEnvT;
  exports["withEnvT"] = withEnvT;
  exports["newtypeEnvT"] = newtypeEnvT;
  exports["functorEnvT"] = functorEnvT;
  exports["extendEnvT"] = extendEnvT;
  exports["comonadEnvT"] = comonadEnvT;
  exports["comonadTransEnvT"] = comonadTransEnvT;
})(PS["Control.Comonad.Env.Trans"] = PS["Control.Comonad.Env.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Data_Tuple = PS["Data.Tuple"];        
  var ComonadAsk = function (Comonad0, ask) {
      this.Comonad0 = Comonad0;
      this.ask = ask;
  };
  var ComonadEnv = function (ComonadAsk0, local) {
      this.ComonadAsk0 = ComonadAsk0;
      this.local = local;
  };
  var local = function (dict) {
      return dict.local;
  };
  var comonadAskTuple = new ComonadAsk(function () {
      return Data_Tuple.comonadTuple;
  }, Data_Tuple.fst);
  var comonadEnvTuple = new ComonadEnv(function () {
      return comonadAskTuple;
  }, function (f) {
      return function (v) {
          return new Data_Tuple.Tuple(f(v.value0), v.value1);
      };
  });
  var comonadAskEnvT = function (dictComonad) {
      return new ComonadAsk(function () {
          return Control_Comonad_Env_Trans.comonadEnvT(dictComonad);
      }, function (v) {
          return Data_Tuple.fst(v);
      });
  };
  var comonadEnvEnvT = function (dictComonad) {
      return new ComonadEnv(function () {
          return comonadAskEnvT(dictComonad);
      }, function (f) {
          return function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          };
      });
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictComonadEnv) {
      return function (f) {
          return function (x) {
              return f(ask(dictComonadEnv.ComonadAsk0())(x));
          };
      };
  };
  exports["ComonadAsk"] = ComonadAsk;
  exports["ComonadEnv"] = ComonadEnv;
  exports["ask"] = ask;
  exports["asks"] = asks;
  exports["local"] = local;
  exports["comonadAskTuple"] = comonadAskTuple;
  exports["comonadEnvTuple"] = comonadEnvTuple;
  exports["comonadAskEnvT"] = comonadAskEnvT;
  exports["comonadEnvEnvT"] = comonadEnvEnvT;
})(PS["Control.Comonad.Env.Class"] = PS["Control.Comonad.Env.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Field = function (EuclideanRing0) {
      this.EuclideanRing0 = EuclideanRing0;
  };
  var fieldNumber = new Field(function () {
      return Data_EuclideanRing.euclideanRingNumber;
  });
  exports["Field"] = Field;
  exports["fieldNumber"] = fieldNumber;
})(PS["Data.Field"] = PS["Data.Field"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var showIdentity = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringIdentity = function (dictSemiring) {
      return dictSemiring;
  };
  var semigroupIdenity = function (dictSemigroup) {
      return dictSemigroup;
  };
  var ringIdentity = function (dictRing) {
      return dictRing;
  };
  var ordIdentity = function (dictOrd) {
      return dictOrd;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var monoidIdentity = function (dictMonoid) {
      return dictMonoid;
  };
  var lazyIdentity = function (dictLazy) {
      return dictLazy;
  };
  var heytingAlgebraIdentity = function (dictHeytingAlgebra) {
      return dictHeytingAlgebra;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
  var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var traversableIdentity = new Data_Traversable.Traversable(function () {
      return foldableIdentity;
  }, function () {
      return functorIdentity;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(v));
          };
      };
  });
  var fieldIdentity = function (dictField) {
      return dictField;
  };
  var extendIdentity = new Control_Extend.Extend(function () {
      return functorIdentity;
  }, function (f) {
      return function (m) {
          return f(m);
      };
  });
  var euclideanRingIdentity = function (dictEuclideanRing) {
      return dictEuclideanRing;
  };
  var eqIdentity = function (dictEq) {
      return dictEq;
  };
  var comonadIdentity = new Control_Comonad.Comonad(function () {
      return extendIdentity;
  }, function (v) {
      return v;
  });
  var commutativeRingIdentity = function (dictCommutativeRing) {
      return dictCommutativeRing;
  };
  var boundedIdentity = function (dictBounded) {
      return dictBounded;
  };
  var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
      return dictBooleanAlgebra;
  };
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  var altIdentity = new Control_Alt.Alt(function () {
      return functorIdentity;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["eqIdentity"] = eqIdentity;
  exports["ordIdentity"] = ordIdentity;
  exports["boundedIdentity"] = boundedIdentity;
  exports["heytingAlgebraIdentity"] = heytingAlgebraIdentity;
  exports["booleanAlgebraIdentity"] = booleanAlgebraIdentity;
  exports["semigroupIdenity"] = semigroupIdenity;
  exports["monoidIdentity"] = monoidIdentity;
  exports["semiringIdentity"] = semiringIdentity;
  exports["euclideanRingIdentity"] = euclideanRingIdentity;
  exports["ringIdentity"] = ringIdentity;
  exports["commutativeRingIdentity"] = commutativeRingIdentity;
  exports["fieldIdentity"] = fieldIdentity;
  exports["lazyIdentity"] = lazyIdentity;
  exports["showIdentity"] = showIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["invariantIdentity"] = invariantIdentity;
  exports["altIdentity"] = altIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
  exports["extendIdentity"] = extendIdentity;
  exports["comonadIdentity"] = comonadIdentity;
  exports["foldableIdentity"] = foldableIdentity;
  exports["traversableIdentity"] = traversableIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Comonad_Env_Class = PS["Control.Comonad.Env.Class"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var withEnv = Control_Comonad_Env_Trans.withEnvT;
  var runEnv = function (v) {
      return Data_Functor.map(Data_Tuple.functorTuple)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity))(v);
  };
  var mapEnv = Data_Functor.map(Control_Comonad_Env_Trans.functorEnvT(Data_Identity.functorIdentity));
  var env = function (e) {
      return function (a) {
          return Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(e)(a));
      };
  };
  exports["env"] = env;
  exports["mapEnv"] = mapEnv;
  exports["runEnv"] = runEnv;
  exports["withEnv"] = withEnv;
})(PS["Control.Comonad.Env"] = PS["Control.Comonad.Env"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans_Class = PS["Control.Comonad.Trans.Class"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var StoreT = function (x) {
      return x;
  };
  var runStoreT = function (v) {
      return v;
  };
  var newtypeStoreT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, StoreT);
  var functorStoreT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return StoreT(new Data_Tuple.Tuple(Data_Functor.map(dictFunctor)(function (h) {
                  return function ($28) {
                      return f(h($28));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var extendStoreT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorStoreT(dictExtend.Functor0());
      }, function (f) {
          return function (v) {
              return StoreT(new Data_Tuple.Tuple(Control_Extend.extend(dictExtend)(function (w$prime) {
                  return function (s$prime) {
                      return f(StoreT(new Data_Tuple.Tuple(w$prime, s$prime)));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var comonadTransStoreT = new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
      return function (v) {
          return Data_Functor.map((dictComonad.Extend0()).Functor0())(function (v1) {
              return v1(v.value1);
          })(v.value0);
      };
  });
  var comonadStoreT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendStoreT(dictComonad.Extend0());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value0)(v.value1);
      });
  };
  exports["StoreT"] = StoreT;
  exports["runStoreT"] = runStoreT;
  exports["newtypeStoreT"] = newtypeStoreT;
  exports["functorStoreT"] = functorStoreT;
  exports["extendStoreT"] = extendStoreT;
  exports["comonadStoreT"] = comonadStoreT;
  exports["comonadTransStoreT"] = comonadTransStoreT;
})(PS["Control.Comonad.Store.Trans"] = PS["Control.Comonad.Store.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Store_Trans = PS["Control.Comonad.Store.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ComonadStore = function (Comonad0, peek, pos) {
      this.Comonad0 = Comonad0;
      this.peek = peek;
      this.pos = pos;
  };
  var pos = function (dict) {
      return dict.pos;
  };
  var peek = function (dict) {
      return dict.peek;
  };
  var peeks = function (dictComonadStore) {
      return function (f) {
          return function (x) {
              return peek(dictComonadStore)(f(pos(dictComonadStore)(x)))(x);
          };
      };
  };
  var seeks = function (dictComonadStore) {
      return function (f) {
          return function ($15) {
              return peeks(dictComonadStore)(f)(Control_Extend.duplicate((dictComonadStore.Comonad0()).Extend0())($15));
          };
      };
  };
  var seek = function (dictComonadStore) {
      return function (s) {
          return function ($16) {
              return peek(dictComonadStore)(s)(Control_Extend.duplicate((dictComonadStore.Comonad0()).Extend0())($16));
          };
      };
  };
  var experiment = function (dictComonadStore) {
      return function (dictFunctor) {
          return function (f) {
              return function (x) {
                  return Data_Functor.map(dictFunctor)(Data_Function.flip(peek(dictComonadStore))(x))(f(pos(dictComonadStore)(x)));
              };
          };
      };
  };
  var comonadStoreStoreT = function (dictComonad) {
      return new ComonadStore(function () {
          return Control_Comonad_Store_Trans.comonadStoreT(dictComonad);
      }, function (s) {
          return function (v) {
              return Control_Comonad.extract(dictComonad)(v.value0)(s);
          };
      }, function (v) {
          return v.value1;
      });
  };
  exports["ComonadStore"] = ComonadStore;
  exports["experiment"] = experiment;
  exports["peek"] = peek;
  exports["peeks"] = peeks;
  exports["pos"] = pos;
  exports["seek"] = seek;
  exports["seeks"] = seeks;
  exports["comonadStoreStoreT"] = comonadStoreStoreT;
})(PS["Control.Comonad.Store.Class"] = PS["Control.Comonad.Store.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Comonad_Store_Class = PS["Control.Comonad.Store.Class"];
  var Control_Comonad_Store_Trans = PS["Control.Comonad.Store.Trans"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var store = function (f) {
      return function (x) {
          return Control_Comonad_Store_Trans.StoreT(new Data_Tuple.Tuple(f, x));
      };
  };
  var runStore = function (v) {
      return Data_Tuple.swap(Data_Functor.map(Data_Tuple.functorTuple)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity))(Data_Tuple.swap(v)));
  };
  exports["runStore"] = runStore;
  exports["store"] = store;
})(PS["Control.Comonad.Store"] = PS["Control.Comonad.Store"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans_Class = PS["Control.Comonad.Trans.Class"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];        
  var TracedT = function (x) {
      return x;
  };
  var runTracedT = function (v) {
      return v;
  };
  var newtypeTracedT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, TracedT);
  var functorTracedT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (g) {
                  return function (t) {
                      return f(g(t));
                  };
              })(v);
          };
      });
  };
  var extendTracedT = function (dictExtend) {
      return function (dictSemigroup) {
          return new Control_Extend.Extend(function () {
              return functorTracedT(dictExtend.Functor0());
          }, function (f) {
              return function (v) {
                  return Control_Extend.extend(dictExtend)(function (w$prime) {
                      return function (t) {
                          return f(Data_Functor.map(dictExtend.Functor0())(function (h) {
                              return function (t$prime) {
                                  return h(Data_Semigroup.append(dictSemigroup)(t)(t$prime));
                              };
                          })(w$prime));
                      };
                  })(v);
              };
          });
      };
  };
  var comonadTransTracedT = function (dictMonoid) {
      return new Control_Comonad_Trans_Class.ComonadTrans(function (dictComonad) {
          return function (v) {
              return Data_Functor.map((dictComonad.Extend0()).Functor0())(function (f) {
                  return f(Data_Monoid.mempty(dictMonoid));
              })(v);
          };
      });
  };
  var comonadTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new Control_Comonad.Comonad(function () {
              return extendTracedT(dictComonad.Extend0())(dictMonoid.Semigroup0());
          }, function (v) {
              return Control_Comonad.extract(dictComonad)(v)(Data_Monoid.mempty(dictMonoid));
          });
      };
  };
  exports["TracedT"] = TracedT;
  exports["runTracedT"] = runTracedT;
  exports["newtypeTracedT"] = newtypeTracedT;
  exports["functorTracedT"] = functorTracedT;
  exports["extendTracedT"] = extendTracedT;
  exports["comonadTracedT"] = comonadTracedT;
  exports["comonadTransTracedT"] = comonadTransTracedT;
})(PS["Control.Comonad.Traced.Trans"] = PS["Control.Comonad.Traced.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ComonadTraced = function (Comonad0, track) {
      this.Comonad0 = Comonad0;
      this.track = track;
  };
  var track = function (dict) {
      return dict.track;
  };
  var tracks = function (dictComonadTraced) {
      return function (f) {
          return function (w) {
              return track(dictComonadTraced)(f(Control_Comonad.extract(dictComonadTraced.Comonad0())(w)))(w);
          };
      };
  };
  var listens = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (g) {
                  return function (t) {
                      return new Data_Tuple.Tuple(g(t), f(t));
                  };
              })(v);
          };
      };
  };
  var listen = function (dictFunctor) {
      return function (v) {
          return Data_Functor.map(dictFunctor)(function (f) {
              return function (t) {
                  return new Data_Tuple.Tuple(f(t), t);
              };
          })(v);
      };
  };
  var comonadTracedTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new ComonadTraced(function () {
              return Control_Comonad_Traced_Trans.comonadTracedT(dictComonad)(dictMonoid);
          }, function (t) {
              return function (v) {
                  return Control_Comonad.extract(dictComonad)(v)(t);
              };
          });
      };
  };
  var censor = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (v1) {
                  return function ($18) {
                      return v1(f($18));
                  };
              })(v);
          };
      };
  };
  exports["ComonadTraced"] = ComonadTraced;
  exports["censor"] = censor;
  exports["listen"] = listen;
  exports["listens"] = listens;
  exports["track"] = track;
  exports["tracks"] = tracks;
  exports["comonadTracedTracedT"] = comonadTracedTracedT;
})(PS["Control.Comonad.Traced.Class"] = PS["Control.Comonad.Traced.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Comonad_Traced_Class = PS["Control.Comonad.Traced.Class"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var traced = function ($2) {
      return Control_Comonad_Traced_Trans.TracedT(Data_Identity.Identity($2));
  };
  var runTraced = function (v) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(v);
  };
  exports["runTraced"] = runTraced;
  exports["traced"] = traced;
})(PS["Control.Comonad.Traced"] = PS["Control.Comonad.Traced"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadCont = function (Monad0, callCC) {
      this.Monad0 = Monad0;
      this.callCC = callCC;
  };
  var callCC = function (dict) {
      return dict.callCC;
  };
  exports["MonadCont"] = MonadCont;
  exports["callCC"] = callCC;
})(PS["Control.Monad.Cont.Class"] = PS["Control.Monad.Cont.Class"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.untilE = function (f) {
    return function () {
      while (!f());
      return {};
    };
  };

  exports.whileE = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
        return {};
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["forE"] = $foreign.forE;
  exports["foreachE"] = $foreign.foreachE;
  exports["runPure"] = $foreign.runPure;
  exports["untilE"] = $foreign.untilE;
  exports["whileE"] = $foreign.whileE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
  exports["monadEffEff"] = monadEffEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var MonadReader = function (MonadAsk0, local) {
      this.MonadAsk0 = MonadAsk0;
      this.local = local;
  };
  var monadAskFun = new MonadAsk(function () {
      return Control_Monad.monadFn;
  }, Control_Category.id(Control_Category.categoryFn));
  var monadReaderFun = new MonadReader(function () {
      return monadAskFun;
  }, Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));
  var local = function (dict) {
      return dict.local;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictMonadAsk) {
      return function (f) {
          return Data_Functor.map((((dictMonadAsk.Monad0()).Bind1()).Apply0()).Functor0())(f)(ask(dictMonadAsk));
      };
  };
  exports["MonadAsk"] = MonadAsk;
  exports["MonadReader"] = MonadReader;
  exports["ask"] = ask;
  exports["asks"] = asks;
  exports["local"] = local;
  exports["monadAskFun"] = monadAskFun;
  exports["monadReaderFun"] = monadReaderFun;
})(PS["Control.Monad.Reader.Class"] = PS["Control.Monad.Reader.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["modify"] = modify;
  exports["put"] = put;
  exports["state"] = state;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["MonadTrans"] = MonadTrans;
  exports["lift"] = lift;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var ContT = function (x) {
      return x;
  };
  var withContT = function (f) {
      return function (v) {
          return function (k) {
              return v(f(k));
          };
      };
  };
  var runContT = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var newtypeContT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ContT);
  var monadTransContT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(k);
          };
      };
  });
  var mapContT = function (f) {
      return function (v) {
          return function (k) {
              return f(v(k));
          };
      };
  };
  var functorContT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (k) {
                  return v(function (a) {
                      return k(f(a));
                  });
              };
          };
      });
  };
  var applyContT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorContT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (k) {
                  return v(function (g) {
                      return v1(function (a) {
                          return k(g(a));
                      });
                  });
              };
          };
      });
  };
  var bindContT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyContT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (k$prime) {
                  return v(function (a) {
                      var v1 = k(a);
                      return v1(k$prime);
                  });
              };
          };
      });
  };
  var applicativeContT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyContT(dictApplicative.Apply0());
      }, function (a) {
          return function (k) {
              return k(a);
          };
      });
  };
  var monadContT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeContT(dictMonad.Applicative0());
      }, function () {
          return bindContT(dictMonad.Bind1());
      });
  };
  var monadAskContT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadContT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderContT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskContT(dictMonadReader.MonadAsk0());
      }, function (f) {
          return function (v) {
              return function (k) {
                  return Control_Bind.bind(((dictMonadReader.MonadAsk0()).Monad0()).Bind1())(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()))(function (v1) {
                      return Control_Monad_Reader_Class.local(dictMonadReader)(f)(v(function ($45) {
                          return Control_Monad_Reader_Class.local(dictMonadReader)(Data_Function["const"](v1))(k($45));
                      }));
                  });
              };
          };
      });
  };
  var monadContContT = function (dictMonad) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadContT(dictMonad);
      }, function (f) {
          return function (k) {
              var v = f(function (a) {
                  return function (v1) {
                      return k(a);
                  };
              });
              return v(k);
          };
      });
  };
  var monadEffContT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadContT(dictMonadEff.Monad0());
      }, function ($46) {
          return Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($46));
      });
  };
  var monadStateContT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadContT(dictMonadState.Monad0());
      }, function ($47) {
          return Control_Monad_Trans_Class.lift(monadTransContT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)($47));
      });
  };
  exports["ContT"] = ContT;
  exports["mapContT"] = mapContT;
  exports["runContT"] = runContT;
  exports["withContT"] = withContT;
  exports["newtypeContT"] = newtypeContT;
  exports["monadContContT"] = monadContContT;
  exports["functorContT"] = functorContT;
  exports["applyContT"] = applyContT;
  exports["applicativeContT"] = applicativeContT;
  exports["bindContT"] = bindContT;
  exports["monadContT"] = monadContT;
  exports["monadTransContT"] = monadTransContT;
  exports["monadEffContT"] = monadEffContT;
  exports["monadAskContT"] = monadAskContT;
  exports["monadReaderContT"] = monadReaderContT;
  exports["monadStateContT"] = monadStateContT;
})(PS["Control.Monad.Cont.Trans"] = PS["Control.Monad.Cont.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var withCont = function (f) {
      return Control_Monad_Cont_Trans.withContT(function ($0) {
          return function ($1) {
              return Data_Identity.Identity(f(function ($2) {
                  return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($0($2));
              })($1));
          };
      });
  };
  var runCont = function (cc) {
      return function (k) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Cont_Trans.runContT(cc)(function ($3) {
              return Data_Identity.Identity(k($3));
          }));
      };
  };
  var mapCont = function (f) {
      return Control_Monad_Cont_Trans.mapContT(function ($4) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($4)));
      });
  };
  var cont = function (f) {
      return function (c) {
          return f(function ($5) {
              return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(c($5));
          });
      };
  };
  exports["cont"] = cont;
  exports["runCont"] = runCont;
})(PS["Control.Monad.Cont"] = PS["Control.Monad.Cont"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.warn = function (s) {
    return function () {
      console.warn(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };

  exports.info = function (s) {
    return function () {
      console.info(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];        
  var warnShow = function (dictShow) {
      return function (a) {
          return $foreign.warn(Data_Show.show(dictShow)(a));
      };
  };
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  var infoShow = function (dictShow) {
      return function (a) {
          return $foreign.info(Data_Show.show(dictShow)(a));
      };
  };
  var errorShow = function (dictShow) {
      return function (a) {
          return $foreign.error(Data_Show.show(dictShow)(a));
      };
  };
  exports["errorShow"] = errorShow;
  exports["infoShow"] = infoShow;
  exports["logShow"] = logShow;
  exports["warnShow"] = warnShow;
  exports["error"] = $foreign.error;
  exports["info"] = $foreign.info;
  exports["log"] = $foreign.log;
  exports["warn"] = $foreign.warn;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.stackImpl = function (just) {
    return function (nothing) {
      return function (e) {
        return e.stack ? just(e.stack) : nothing;
      };
    };
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Left) {
                  return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Right) {
                  return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Either line 160, column 1 - line 160, column 61: " + [ v.constructor.name ]);
          });
      };
  };
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));
  var fromRight = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar62) {
                  return $dollar62;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Right) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 252, column 1 - line 252, column 52: " + [ v.constructor.name ]);
          })());
      };
  };
  var fromLeft = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar66) {
                  return $dollar66;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Left) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 247, column 1 - line 247, column 51: " + [ v.constructor.name ]);
          })());
      };
  };
  var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Right) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 184, column 1 - line 184, column 47: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 184, column 1 - line 184, column 47: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Either line 184, column 1 - line 184, column 47: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableEither = new Data_Traversable.Traversable(function () {
      return foldableEither;
  }, function () {
      return functorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
          };
          if (v instanceof Right) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 200, column 1 - line 200, column 53: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
              };
              if (v1 instanceof Right) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 200, column 1 - line 200, column 53: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var extendEither = new Control_Extend.Extend(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          return new Right(v(v1));
      };
  });
  var eqEither = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  if (x instanceof Left && y instanceof Left) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  if (x instanceof Right && y instanceof Right) {
                      return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                  };
                  return false;
              };
          });
      };
  };
  var ordEither = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  if (x instanceof Left && y instanceof Left) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  if (x instanceof Left) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof Left) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof Right && y instanceof Right) {
                      return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 176, column 8 - line 176, column 64: " + [ x.constructor.name, y.constructor.name ]);
              };
          });
      };
  };
  var eq1Either = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqEither(dictEq)(dictEq1));
      });
  };
  var ord1Either = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Either(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
      });
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  var choose = function (dictAlt) {
      return function (a) {
          return function (b) {
              return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
          };
      };
  };
  var boundedEither = function (dictBounded) {
      return function (dictBounded1) {
          return new Data_Bounded.Bounded(function () {
              return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
          }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 43, column 1 - line 43, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(v2.value0);
                  };
                  if (v2 instanceof Right) {
                      return v1(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 192, column 1 - line 192, column 47: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(z)(v2.value0);
                  };
                  if (v2 instanceof Right) {
                      return v1(z)(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 192, column 1 - line 192, column 47: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(v2.value0)(z);
                  };
                  if (v2 instanceof Right) {
                      return v1(v2.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Either line 192, column 1 - line 192, column 47: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableEither;
  }, function () {
      return bifunctorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 206, column 1 - line 206, column 53: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v(v2.value0));
                  };
                  if (v2 instanceof Right) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Either line 206, column 1 - line 206, column 53: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 79, column 1 - line 79, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var semigroupEither = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
          };
      });
  };
  var semiringEither = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semiring.add(dictSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semiring.mul(dictSemiring))(x))(y);
          };
      }, new Right(Data_Semiring.one(dictSemiring)), new Right(Data_Semiring.zero(dictSemiring)));
  };
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["choose"] = choose;
  exports["either"] = either;
  exports["fromLeft"] = fromLeft;
  exports["fromRight"] = fromRight;
  exports["isLeft"] = isLeft;
  exports["isRight"] = isRight;
  exports["functorEither"] = functorEither;
  exports["invariantEither"] = invariantEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
  exports["extendEither"] = extendEither;
  exports["showEither"] = showEither;
  exports["eqEither"] = eqEither;
  exports["eq1Either"] = eq1Either;
  exports["ordEither"] = ordEither;
  exports["ord1Either"] = ord1Either;
  exports["boundedEither"] = boundedEither;
  exports["foldableEither"] = foldableEither;
  exports["bifoldableEither"] = bifoldableEither;
  exports["traversableEither"] = traversableEither;
  exports["bitraversableEither"] = bitraversableEither;
  exports["semiringEither"] = semiringEither;
  exports["semigroupEither"] = semigroupEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var $$try = function (action) {
      return $foreign.catchException(function ($0) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Either.Left.create($0));
      })(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)(action));
  };
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["stack"] = stack;
  exports["throw"] = $$throw;
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["catchException"] = $foreign.catchException;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeCoerceEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  // module Data.Int.Bits

  exports.and = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 & n2;
    };
  };

  exports.or = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 | n2;
    };
  };

  exports.xor = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };

  exports.shl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 << n2;
    };
  };

  exports.shr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >> n2;
    };
  };

  exports.zshr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >>> n2;
    };
  };

  exports.complement = function (n) {
    /* jshint bitwise: false */
    return ~n;
  };
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Int.Bits"];
  exports["and"] = $foreign.and;
  exports["complement"] = $foreign.complement;
  exports["or"] = $foreign.or;
  exports["shl"] = $foreign.shl;
  exports["shr"] = $foreign.shr;
  exports["xor"] = $foreign.xor;
  exports["zshr"] = $foreign.zshr;
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  /* globals exports */
  "use strict";

  // module Global

  exports.nan = NaN;

  exports.isNaN = isNaN;

  exports.infinity = Infinity;

  exports.isFinite = isFinite;

  exports.readInt = function (radix) {
    return function (n) {
      return parseInt(n, radix);
    };
  };

  exports.readFloat = parseFloat;

  exports.decodeURI = decodeURI;
  exports.encodeURI = encodeURI;
  exports.decodeURIComponent = decodeURIComponent;
  exports.encodeURIComponent = encodeURIComponent;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Global"];
  exports["decodeURI"] = $foreign["decodeURI"];
  exports["decodeURIComponent"] = $foreign["decodeURIComponent"];
  exports["encodeURI"] = $foreign["encodeURI"];
  exports["encodeURIComponent"] = $foreign["encodeURIComponent"];
  exports["infinity"] = $foreign.infinity;
  exports["isFinite"] = $foreign["isFinite"];
  exports["isNaN"] = $foreign["isNaN"];
  exports["nan"] = $foreign.nan;
  exports["readFloat"] = $foreign.readFloat;
  exports["readInt"] = $foreign.readInt;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.acos = Math.acos;

  exports.asin = Math.asin;

  exports.atan = Math.atan;

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };

  exports.ceil = Math.ceil;

  exports.cos = Math.cos;

  exports.exp = Math.exp;

  exports.floor = Math.floor;

  exports.trunc = Math.trunc || function (n) {
    return n < 0 ? Math.ceil(n) : Math.floor(n);
  };

  exports.log = Math.log;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;

  exports.tan = Math.tan;

  exports.e = Math.E;

  exports.ln2 = Math.LN2;

  exports.ln10 = Math.LN10;

  exports.log2e = Math.LOG2E;

  exports.log10e = Math.LOG10E;

  exports.pi = Math.PI;

  exports.sqrt1_2 = Math.SQRT1_2;

  exports.sqrt2 = Math.SQRT2;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["acos"] = $foreign.acos;
  exports["asin"] = $foreign.asin;
  exports["atan"] = $foreign.atan;
  exports["atan2"] = $foreign.atan2;
  exports["ceil"] = $foreign.ceil;
  exports["cos"] = $foreign.cos;
  exports["e"] = $foreign.e;
  exports["exp"] = $foreign.exp;
  exports["floor"] = $foreign.floor;
  exports["ln10"] = $foreign.ln10;
  exports["ln2"] = $foreign.ln2;
  exports["log"] = $foreign.log;
  exports["log10e"] = $foreign.log10e;
  exports["log2e"] = $foreign.log2e;
  exports["max"] = $foreign.max;
  exports["min"] = $foreign.min;
  exports["pi"] = $foreign.pi;
  exports["pow"] = $foreign.pow;
  exports["remainder"] = $foreign.remainder;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["sqrt1_2"] = $foreign.sqrt1_2;
  exports["sqrt2"] = $foreign.sqrt2;
  exports["tan"] = $foreign.tan;
  exports["trunc"] = $foreign.trunc;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];        
  var Radix = function (x) {
      return x;
  };
  var radix = function (n) {
      if (n >= 2 && n <= 36) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Int line 123, column 1 - line 123, column 28: " + [ n.constructor.name ]);
  };
  var odd = function (x) {
      return (x & 1) !== 0;
  };
  var octal = 8;
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 62, column 1 - line 62, column 29: " + [ x.constructor.name ]);
  };
  var round = function ($2) {
      return unsafeClamp($$Math.round($2));
  };
  var floor = function ($3) {
      return unsafeClamp($$Math.floor($3));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };
  var decimal = 10;
  var ceil = function ($4) {
      return unsafeClamp($$Math.ceil($4));
  };
  var binary = 2;
  var base36 = 36;
  exports["base36"] = base36;
  exports["binary"] = binary;
  exports["ceil"] = ceil;
  exports["decimal"] = decimal;
  exports["even"] = even;
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["hexadecimal"] = hexadecimal;
  exports["octal"] = octal;
  exports["odd"] = odd;
  exports["radix"] = radix;
  exports["round"] = round;
  exports["pow"] = $foreign.pow;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];        
  var randomRange = function (min) {
      return function (max) {
          return function __do() {
              var v = $foreign.random();
              return v * (max - min) + min;
          };
      };
  };
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  var randomBool = Data_Functor.map(Control_Monad_Eff.functorEff)(function (v) {
      return v < 0.5;
  })($foreign.random);
  exports["randomBool"] = randomBool;
  exports["randomInt"] = randomInt;
  exports["randomRange"] = randomRange;
  exports["random"] = $foreign.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setTimeout = function (ms) {
    return function (fn) {
      return function () {
        return setTimeout(fn, ms);
      };
    };
  };

  exports.clearTimeout = function (id) {
    return function () {
      clearTimeout(id);
    };
  };

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };

  exports.clearInterval = function (id) {
    return function () {
      clearInterval(id);
    };
  };
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Timer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];        
  var TimeoutId = function (x) {
      return x;
  };
  var IntervalId = function (x) {
      return x;
  };
  var eqTimeoutId = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordTimeoutId = new Data_Ord.Ord(function () {
      return eqTimeoutId;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var eqIntervalId = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordIntervalId = new Data_Ord.Ord(function () {
      return eqIntervalId;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  exports["eqTimeoutId"] = eqTimeoutId;
  exports["ordTimeoutId"] = ordTimeoutId;
  exports["eqIntervalId"] = eqIntervalId;
  exports["ordIntervalId"] = ordIntervalId;
  exports["clearInterval"] = $foreign.clearInterval;
  exports["clearTimeout"] = $foreign.clearTimeout;
  exports["setInterval"] = $foreign.setInterval;
  exports["setTimeout"] = $foreign.setTimeout;
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
    "use strict";

  exports.mkEffFn1 = function mkEffFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.mkEffFn2 = function mkEffFn2(fn) {
    return function(a, b) {
      return fn(a)(b)();
    };
  };

  exports.mkEffFn3 = function mkEffFn3(fn) {
    return function(a, b, c) {
      return fn(a)(b)(c)();
    };
  };

  exports.mkEffFn4 = function mkEffFn4(fn) {
    return function(a, b, c, d) {
      return fn(a)(b)(c)(d)();
    };
  };

  exports.mkEffFn5 = function mkEffFn5(fn) {
    return function(a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e)();
    };
  };

  exports.mkEffFn6 = function mkEffFn6(fn) {
    return function(a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f)();
    };
  };

  exports.mkEffFn7 = function mkEffFn7(fn) {
    return function(a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g)();
    };
  };

  exports.mkEffFn8 = function mkEffFn8(fn) {
    return function(a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)();
    };
  };

  exports.mkEffFn9 = function mkEffFn9(fn) {
    return function(a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)();
    };
  };

  exports.mkEffFn10 = function mkEffFn10(fn) {
    return function(a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)();
    };
  };

  exports.runEffFn1 = function runEffFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn3 = function runEffFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };

  exports.runEffFn4 = function runEffFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };

  exports.runEffFn5 = function runEffFn5(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function() {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    };
  };

  exports.runEffFn6 = function runEffFn6(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function() {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffFn7 = function runEffFn7(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function() {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffFn8 = function runEffFn8(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function() {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffFn9 = function runEffFn9(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function(i) {
                      return function() {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffFn10 = function runEffFn10(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function(i) {
                      return function(j) {
                        return function() {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["mkEffFn1"] = $foreign.mkEffFn1;
  exports["mkEffFn10"] = $foreign.mkEffFn10;
  exports["mkEffFn2"] = $foreign.mkEffFn2;
  exports["mkEffFn3"] = $foreign.mkEffFn3;
  exports["mkEffFn4"] = $foreign.mkEffFn4;
  exports["mkEffFn5"] = $foreign.mkEffFn5;
  exports["mkEffFn6"] = $foreign.mkEffFn6;
  exports["mkEffFn7"] = $foreign.mkEffFn7;
  exports["mkEffFn8"] = $foreign.mkEffFn8;
  exports["mkEffFn9"] = $foreign.mkEffFn9;
  exports["runEffFn1"] = $foreign.runEffFn1;
  exports["runEffFn10"] = $foreign.runEffFn10;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn3"] = $foreign.runEffFn3;
  exports["runEffFn4"] = $foreign.runEffFn4;
  exports["runEffFn5"] = $foreign.runEffFn5;
  exports["runEffFn6"] = $foreign.runEffFn6;
  exports["runEffFn7"] = $foreign.runEffFn7;
  exports["runEffFn8"] = $foreign.runEffFn8;
  exports["runEffFn9"] = $foreign.runEffFn9;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  var monadThrowMaybe = new MonadThrow(function () {
      return Data_Maybe.monadMaybe;
  }, Data_Function["const"](Data_Maybe.Nothing.value));
  var monadThrowEither = new MonadThrow(function () {
      return Data_Either.monadEither;
  }, Data_Either.Left.create);
  var monadErrorMaybe = new MonadError(function () {
      return monadThrowMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Nothing) {
              return v1(Data_Unit.unit);
          };
          if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class line 68, column 1 - line 68, column 50: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var monadErrorEither = new MonadError(function () {
      return monadThrowEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Either.Left) {
              return v1(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class line 61, column 1 - line 61, column 53: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var catchError = function (dict) {
      return dict.catchError;
  };
  var catchJust = function (dictMonadError) {
      return function (p) {
          return function (act) {
              return function (handler) {
                  var handle = function (e) {
                      var v = p(e);
                      if (v instanceof Data_Maybe.Nothing) {
                          return throwError(dictMonadError.MonadThrow0())(e);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return handler(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Error.Class line 54, column 5 - line 56, column 26: " + [ v.constructor.name ]);
                  };
                  return catchError(dictMonadError)(act)(handle);
              };
          };
      };
  };
  var withResource = function (dictMonadError) {
      return function (acquire) {
          return function (release) {
              return function (kleisli) {
                  return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(acquire)(function (v) {
                      return Control_Bind.bind(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(kleisli(v)))(function ($20) {
                          return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Either.Left.create($20));
                      }))(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadError.MonadThrow0()).Monad0()).Bind1())(release(v))(function () {
                              return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0()))(v1);
                          });
                      });
                  });
              };
          };
      };
  };
  exports["MonadError"] = MonadError;
  exports["MonadThrow"] = MonadThrow;
  exports["catchError"] = catchError;
  exports["catchJust"] = catchJust;
  exports["throwError"] = throwError;
  exports["withResource"] = withResource;
  exports["monadThrowEither"] = monadThrowEither;
  exports["monadErrorEither"] = monadErrorEither;
  exports["monadThrowMaybe"] = monadThrowMaybe;
  exports["monadErrorMaybe"] = monadErrorMaybe;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
    "use strict";

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        return ref.value = f(ref.value); // eslint-disable-line no-return-assign
      };
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };

  exports.runST = function (f) {
    return f;
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var pureST = function (st) {
      return Control_Monad_Eff.runPure($foreign.runST(st));
  };
  exports["pureST"] = pureST;
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["newSTRef"] = $foreign.newSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["runST"] = $foreign.runST;
  exports["writeSTRef"] = $foreign.writeSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };

  exports.unsafePartialBecause = function (reason) {
    return function (f) {
      try {
        return exports.unsafePartial(f);
      } catch (err) {
        throw new Error("unsafePartial failed. The following " +
                        "assumption was incorrect: '" + reason + "'.");
      }
    };
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Partial"];       
  var crash = function (dictPartial) {
      return $foreign.crashWith(dictPartial)("Partial.crash: partial function");
  };
  exports["crash"] = crash;
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];        
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
  exports["unsafePartial"] = $foreign.unsafePartial;
  exports["unsafePartialBecause"] = $foreign.unsafePartialBecause;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecM2 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return tailRecM(dictMonadRec)(function (o) {
                      return f(o.a)(o.b);
                  })({
                      a: a, 
                      b: b
                  });
              };
          };
      };
  };
  var tailRecM3 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return tailRecM(dictMonadRec)(function (o) {
                          return f(o.a)(o.b)(o.c);
                      })({
                          a: a, 
                          b: b, 
                          c: c
                      });
                  };
              };
          };
      };
  };
  var tailRecEff = function (f) {
      return function (a) {
          var fromDone = function (v) {
              var __unused = function (dictPartial1) {
                  return function ($dollar16) {
                      return $dollar16;
                  };
              };
              return __unused()((function () {
                  if (v instanceof Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 130, column 28 - line 130, column 42: " + [ v.constructor.name ]);
              })());
          };
          var f$prime = function ($48) {
              return Control_Monad_Eff_Unsafe.unsafeCoerceEff(f($48));
          };
          return function __do() {
              var v = f$prime(a)();
              var v1 = {
                  value: v
              };
              (function () {
                  while (!(function __do() {
                      var v2 = v1.value;
                      if (v2 instanceof Loop) {
                          var v3 = f$prime(v2.value0)();
                          var v4 = v1.value = v3;
                          return false;
                      };
                      if (v2 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 119, column 5 - line 124, column 26: " + [ v2.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Control_Monad_Eff.functorEff)(fromDone)(Control_Monad_ST.readSTRef(v1))();
          };
      };
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 95, column 3 - line 95, column 25: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($49) {
          return go(f($49));
      };
  };
  var monadRecIdentity = new MonadRec(function () {
      return Data_Identity.monadIdentity;
  }, function (f) {
      var runIdentity = function (v) {
          return v;
      };
      return function ($50) {
          return Data_Identity.Identity(tailRec(function ($51) {
              return runIdentity(f($51));
          })($50));
      };
  });
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 108, column 7 - line 108, column 33: " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  var functorStep = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Loop) {
              return new Loop(v.value0);
          };
          if (v instanceof Done) {
              return new Done(f(v.value0));
          };
          throw new Error("Failed pattern match at Control.Monad.Rec.Class line 27, column 1 - line 27, column 41: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
          })(Data_Unit.unit);
      };
  };
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 31, column 1 - line 31, column 41: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["forever"] = forever;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["tailRecM2"] = tailRecM2;
  exports["tailRecM3"] = tailRecM3;
  exports["functorStep"] = functorStep;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecIdentity"] = monadRecIdentity;
  exports["monadRecEff"] = monadRecEff;
  exports["monadRecEither"] = monadRecEither;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var MonadTell = function (Monad0, tell) {
      this.Monad0 = Monad0;
      this.tell = tell;
  };
  var MonadWriter = function (MonadTell0, listen, pass) {
      this.MonadTell0 = MonadTell0;
      this.listen = listen;
      this.pass = pass;
  };
  var tell = function (dict) {
      return dict.tell;
  };
  var pass = function (dict) {
      return dict.pass;
  };
  var listen = function (dict) {
      return dict.listen;
  };
  var listens = function (dictMonadWriter) {
      return function (f) {
          return function (m) {
              return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(listen(dictMonadWriter)(m))(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
              });
          };
      };
  };
  var censor = function (dictMonadWriter) {
      return function (f) {
          return function (m) {
              return pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(v, f));
              }));
          };
      };
  };
  exports["MonadTell"] = MonadTell;
  exports["MonadWriter"] = MonadWriter;
  exports["censor"] = censor;
  exports["listen"] = listen;
  exports["listens"] = listens;
  exports["pass"] = pass;
  exports["tell"] = tell;
})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var MonadPlus = function (MonadZero0) {
      this.MonadZero0 = MonadZero0;
  };
  var monadPlusArray = new MonadPlus(function () {
      return Control_MonadZero.monadZeroArray;
  });
  exports["MonadPlus"] = MonadPlus;
  exports["monadPlusArray"] = monadPlusArray;
})(PS["Control.MonadPlus"] = PS["Control.MonadPlus"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 44, column 3 - line 44, column 32: " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };
  var newtypeExceptT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ExceptT);
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      return function ($96) {
          return ExceptT(Control_Applicative.pure(dictApplicative)($96));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadAskExceptT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadExceptT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderExceptT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskExceptT(dictMonadReader.MonadAsk0());
      }, function (f) {
          return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadContExceptT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadExceptT(dictMonadCont.Monad0());
      }, function (f) {
          return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              var v = f(function (a) {
                  return ExceptT(c(new Data_Either.Right(a)));
              });
              return v;
          }));
      });
  };
  var monadEffExceptT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadExceptT(dictMonadEff.Monad0());
      }, function ($99) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($99));
      });
  };
  var monadRecExceptT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadExceptT(dictMonadRec.Monad0());
      }, function (f) {
          return function ($100) {
              return ExceptT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                      var v = f(a);
                      return v;
                  })())(function (m$prime) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                          if (m$prime instanceof Data_Either.Left) {
                              return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
                          };
                          if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                              return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                          };
                          if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                              return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans line 76, column 14 - line 79, column 43: " + [ m$prime.constructor.name ]);
                      })());
                  });
              })($100));
          };
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadTellExceptT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadExceptT(dictMonadTell.Monad0());
      }, function ($101) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($101));
      });
  };
  var monadWriterExceptT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellExceptT(dictMonadWriter.MonadTell0());
      }, mapExceptT(function (m) {
          return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(Data_Functor.map(Data_Either.functorEither)(function (r) {
                  return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
          });
      }), mapExceptT(function (m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())((function () {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Tuple.Tuple(new Data_Either.Left(v.value0), Control_Category.id(Control_Category.categoryFn));
                  };
                  if (v instanceof Data_Either.Right) {
                      return new Data_Tuple.Tuple(new Data_Either.Right(v.value0.value0), v.value0.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans line 138, column 10 - line 140, column 44: " + [ v.constructor.name ]);
              })());
          }));
      }));
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                  var v1 = k(a);
                  return v1;
              })(function ($103) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($103));
              }));
          };
      });
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v2.value0));
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (v3) {
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v3.value0));
                              };
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v2.value0)(v3.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans line 88, column 9 - line 90, column 49: " + [ v3.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 84, column 5 - line 90, column 49: " + [ v2.constructor.name ]);
                  });
              };
          });
      };
  };
  var plusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Plus.Plus(function () {
              return altExceptT(dictMonoid.Semigroup0())(dictMonad);
          }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var alternativeExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Alternative.Alternative(function () {
              return applicativeExceptT(dictMonad);
          }, function () {
              return plusExceptT(dictMonoid)(dictMonad);
          });
      };
  };
  var monadZeroExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_MonadZero.MonadZero(function () {
              return alternativeExceptT(dictMonoid)(dictMonad);
          }, function () {
              return monadExceptT(dictMonad);
          });
      };
  };
  var monadPlusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_MonadPlus.MonadPlus(function () {
              return monadZeroExceptT(dictMonoid)(dictMonad);
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["except"] = except;
  exports["mapExceptT"] = mapExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["newtypeExceptT"] = newtypeExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadRecExceptT"] = monadRecExceptT;
  exports["altExceptT"] = altExceptT;
  exports["plusExceptT"] = plusExceptT;
  exports["alternativeExceptT"] = alternativeExceptT;
  exports["monadPlusExceptT"] = monadPlusExceptT;
  exports["monadZeroExceptT"] = monadZeroExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffExceptT"] = monadEffExceptT;
  exports["monadContExceptT"] = monadContExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadAskExceptT"] = monadAskExceptT;
  exports["monadReaderExceptT"] = monadReaderExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
  exports["monadTellExceptT"] = monadTellExceptT;
  exports["monadWriterExceptT"] = monadWriterExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT(function ($1) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($1)));
      });
  };
  exports["mapExcept"] = mapExcept;
  exports["runExcept"] = runExcept;
  exports["withExcept"] = withExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
    "use strict";

  exports.defer = function () {

    function Defer(thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      this.thunk = null;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var showLazy = function (dictShow) {
      return new Data_Show.Show(function (x) {
          return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
      });
  };
  var semiringLazy = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, $foreign.defer(function (v) {
          return Data_Semiring.one(dictSemiring);
      }), $foreign.defer(function (v) {
          return Data_Semiring.zero(dictSemiring);
      }));
  };
  var semigroupLazy = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var ringLazy = function (dictRing) {
      return new Data_Ring.Ring(function () {
          return semiringLazy(dictRing.Semiring0());
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var monoidLazy = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupLazy(dictMonoid.Semigroup0());
      }, $foreign.defer(function (v) {
          return Data_Monoid.mempty(dictMonoid);
      }));
  };
  var lazyLazy = new Control_Lazy.Lazy(function (f) {
      return $foreign.defer(function (v) {
          return $foreign.force(f(Data_Unit.unit));
      });
  });
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var invariantLazy = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLazy));
  var extendLazy = new Control_Extend.Extend(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return f(x);
          });
      };
  });
  var eqLazy = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var ordLazy = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqLazy(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var comonadLazy = new Control_Comonad.Comonad(function () {
      return extendLazy;
  }, $foreign.force);
  var commutativeRingLazy = function (dictCommutativeRing) {
      return new Data_CommutativeRing.CommutativeRing(function () {
          return ringLazy(dictCommutativeRing.Ring0());
      });
  };
  var euclideanRingLazy = function (dictEuclideanRing) {
      return new Data_EuclideanRing.EuclideanRing(function () {
          return commutativeRingLazy(dictEuclideanRing.CommutativeRing0());
      }, function ($32) {
          return Data_EuclideanRing.degree(dictEuclideanRing)($foreign.force($32));
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var fieldLazy = function (dictField) {
      return new Data_Field.Field(function () {
          return euclideanRingLazy(dictField.EuclideanRing0());
      });
  };
  var boundedLazy = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordLazy(dictBounded.Ord0());
      }, $foreign.defer(function (v) {
          return Data_Bounded.bottom(dictBounded);
      }), $foreign.defer(function (v) {
          return Data_Bounded.top(dictBounded);
      }));
  };
  var applyLazy = new Control_Apply.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Control_Bind.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  var heytingAlgebraLazy = function (dictHeytingAlgebra) {
      return new Data_HeytingAlgebra.HeytingAlgebra(function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
          };
      }, function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
          };
      }, $foreign.defer(function (v) {
          return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
      }), function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
          };
      }, function (a) {
          return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
      }, $foreign.defer(function (v) {
          return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
      }));
  };
  var booleanAlgebraLazy = function (dictBooleanAlgebra) {
      return new Data_BooleanAlgebra.BooleanAlgebra(function () {
          return heytingAlgebraLazy(dictBooleanAlgebra.HeytingAlgebra0());
      });
  };
  var applicativeLazy = new Control_Applicative.Applicative(function () {
      return applyLazy;
  }, function (a) {
      return $foreign.defer(function (v) {
          return a;
      });
  });
  var monadLazy = new Control_Monad.Monad(function () {
      return applicativeLazy;
  }, function () {
      return bindLazy;
  });
  exports["semiringLazy"] = semiringLazy;
  exports["ringLazy"] = ringLazy;
  exports["commutativeRingLazy"] = commutativeRingLazy;
  exports["euclideanRingLazy"] = euclideanRingLazy;
  exports["fieldLazy"] = fieldLazy;
  exports["eqLazy"] = eqLazy;
  exports["ordLazy"] = ordLazy;
  exports["boundedLazy"] = boundedLazy;
  exports["semigroupLazy"] = semigroupLazy;
  exports["monoidLazy"] = monoidLazy;
  exports["heytingAlgebraLazy"] = heytingAlgebraLazy;
  exports["booleanAlgebraLazy"] = booleanAlgebraLazy;
  exports["functorLazy"] = functorLazy;
  exports["invariantLazy"] = invariantLazy;
  exports["applyLazy"] = applyLazy;
  exports["applicativeLazy"] = applicativeLazy;
  exports["bindLazy"] = bindLazy;
  exports["monadLazy"] = monadLazy;
  exports["extendLazy"] = extendLazy;
  exports["comonadLazy"] = comonadLazy;
  exports["showLazy"] = showLazy;
  exports["lazyLazy"] = lazyLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $8 = i <= 0;
                  if ($8) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  var singleton = function (dictUnfoldable) {
      return replicate(dictUnfoldable)(1);
  };
  var none = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
  };
  var fromMaybe = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(function (b) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
      });
  };
  exports["Unfoldable"] = Unfoldable;
  exports["fromMaybe"] = fromMaybe;
  exports["none"] = none;
  exports["replicate"] = replicate;
  exports["replicateA"] = replicateA;
  exports["singleton"] = singleton;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Yield = (function () {
      function Yield(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Yield.create = function (value0) {
          return function (value1) {
              return new Yield(value0, value1);
          };
      };
      return Yield;
  })();
  var Skip = (function () {
      function Skip(value0) {
          this.value0 = value0;
      };
      Skip.create = function (value0) {
          return new Skip(value0);
      };
      return Skip;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var ListT = function (x) {
      return x;
  };
  var wrapLazy = function (dictApplicative) {
      return function (v) {
          return ListT(Control_Applicative.pure(dictApplicative)(new Skip(v)));
      };
  };
  var wrapEffect = function (dictFunctor) {
      return function (v) {
          return ListT(Data_Functor.map(dictFunctor)(function ($178) {
              return Skip.create(Data_Lazy.defer(Data_Function["const"]($178)));
          })(v));
      };
  };
  var unfold = function (dictMonad) {
      return function (f) {
          return function (z) {
              var g = function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
                          return unfold(dictMonad)(f)(v.value0.value0);
                      }));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 131, column 3 - line 131, column 60: " + [ v.constructor.name ]);
              };
              return ListT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(g)(f(z)));
          };
      };
  };
  var uncons = function (dictMonad) {
      return function (v) {
          var g = function (v1) {
              if (v1 instanceof Yield) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create(new Data_Tuple.Tuple(v1.value0, Data_Lazy.force(v1.value1))));
              };
              if (v1 instanceof Skip) {
                  return uncons(dictMonad)(Data_Lazy.force(v1.value0));
              };
              if (v1 instanceof Done) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 196, column 3 - line 196, column 50: " + [ v1.constructor.name ]);
          };
          return Control_Bind.bind(dictMonad.Bind1())(v)(g);
      };
  };
  var tail = function (dictMonad) {
      return function (l) {
          return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
      };
  };
  var stepMap = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return ListT(Data_Functor.map(dictFunctor)(f)(v));
          };
      };
  };
  var takeWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $98 = f(v.value0);
                  if ($98) {
                      return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
                  };
                  return Done.value;
              };
              if (v instanceof Skip) {
                  return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 155, column 3 - line 155, column 68: " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative.Apply0()).Functor0())(g);
      };
  };
  var scanl = function (dictMonad) {
      return function (f) {
          return function (b) {
              return function (l) {
                  var g = function (v) {
                      var h = function (v1) {
                          if (v1 instanceof Yield) {
                              var b$prime$prime = f(v.value0)(v1.value0);
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime$prime, Data_Lazy.force(v1.value1)), v.value0));
                          };
                          if (v1 instanceof Skip) {
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
                          };
                          if (v1 instanceof Done) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Control.Monad.List.Trans line 249, column 5 - line 249, column 78: " + [ v1.constructor.name ]);
                      };
                      return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(h)(v.value1);
                  };
                  return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
              };
          };
      };
  };
  var prepend$prime = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return ListT(Control_Applicative.pure(dictApplicative)(new Yield(h, t)));
          };
      };
  };
  var prepend = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return prepend$prime(dictApplicative)(h)(Data_Lazy.defer(Data_Function["const"](t)));
          };
      };
  };
  var nil = function (dictApplicative) {
      return ListT(Control_Applicative.pure(dictApplicative)(Done.value));
  };
  var singleton = function (dictApplicative) {
      return function (a) {
          return prepend(dictApplicative)(a)(nil(dictApplicative));
      };
  };
  var take = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return nil(dictApplicative);
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Yield(v1.value0, Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v - 1 | 0))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 148, column 3 - line 148, column 47: " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
          };
      };
  };
  var zipWith$prime = function (dictMonad) {
      return function (f) {
          var g = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(nil(dictMonad.Applicative0()));
                  };
                  if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                      return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Function.flip(prepend$prime(dictMonad.Applicative0()))(Data_Lazy.defer(function (v2) {
                          return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
                      })))(f(v.value0.value0)(v1.value0.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 261, column 3 - line 261, column 25: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var loop = function (fa) {
              return function (fb) {
                  return wrapEffect(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fa))(function (v) {
                      return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(fb))(function (v1) {
                          return g(v)(v1);
                      });
                  }));
              };
          };
          return loop;
      };
  };
  var zipWith = function (dictMonad) {
      return function (f) {
          var g = function (a) {
              return function (b) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a)(b));
              };
          };
          return zipWith$prime(dictMonad)(g);
      };
  };
  var newtypeListT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ListT);
  var mapMaybe = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return Data_Maybe.fromMaybe(Skip.create)(Data_Functor.map(Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 184, column 3 - line 184, column 72: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var iterate = function (dictMonad) {
      return function (f) {
          return function (a) {
              var g = function (x) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(x), x)));
              };
              return unfold(dictMonad)(g)(a);
          };
      };
  };
  var repeat = function (dictMonad) {
      return iterate(dictMonad)(Control_Category.id(Control_Category.categoryFn));
  };
  var head = function (dictMonad) {
      return function (l) {
          return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
      };
  };
  var functorListT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return new Yield(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 281, column 5 - line 281, column 48: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      });
  };
  var fromEffect = function (dictApplicative) {
      return function (fa) {
          return ListT(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(Yield.create)(Data_Lazy.defer(function (v) {
              return nil(dictApplicative);
          })))(fa));
      };
  };
  var monadTransListT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return fromEffect(dictMonad.Applicative0());
  });
  var foldlRec$prime = function (dictMonadRec) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(b)(v.value0.value0))(function (b$prime) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                  a: b$prime, 
                                  b: v.value0.value1
                              }));
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 222, column 5 - line 222, column 45: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
              };
          };
          return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
      };
  };
  var runListTRec = function (dictMonadRec) {
      return foldlRec$prime(dictMonadRec)(function (v) {
          return function (v1) {
              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Data_Unit.unit);
          };
      })(Data_Unit.unit);
  };
  var foldlRec = function (dictMonadRec) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(b));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                              a: f(b)(v.value0.value0), 
                              b: v.value0.value1
                          }));
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 240, column 7 - line 240, column 47: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(uncons(dictMonadRec.Monad0())(l))(g);
              };
          };
          return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(loop);
      };
  };
  var foldl$prime = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0.value0))(Data_Function.flip(loop)(v.value0.value1));
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 213, column 5 - line 213, column 35: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var runListT = function (dictMonad) {
      return foldl$prime(dictMonad)(function (v) {
          return function (v1) {
              return Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit);
          };
      })(Data_Unit.unit);
  };
  var foldl = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return loop(f(b)(v.value0.value0))(v.value0.value1);
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 230, column 5 - line 230, column 35: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind(dictMonad.Bind1())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var filter = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
                  var $151 = f(v.value0);
                  if ($151) {
                      return new Yield(v.value0, s$prime);
                  };
                  return new Skip(s$prime);
              };
              if (v instanceof Skip) {
                  var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
                  return new Skip(s$prime);
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 177, column 3 - line 177, column 80: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var dropWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $156 = f(v.value0);
                  if ($156) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
                  };
                  return new Yield(v.value0, v.value1);
              };
              if (v instanceof Skip) {
                  return Skip.create(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 170, column 3 - line 170, column 70: " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative.Apply0()).Functor0())(g);
      };
  };
  var drop = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return fa;
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1 | 0))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 163, column 3 - line 163, column 44: " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative.Apply0()).Functor0())(f)(fa);
          };
      };
  };
  var cons = function (dictApplicative) {
      return function (lh) {
          return function (t) {
              return ListT(Control_Applicative.pure(dictApplicative)(new Yield(Data_Lazy.force(lh), t)));
          };
      };
  };
  var unfoldableListT = function (dictMonad) {
      return new Data_Unfoldable.Unfoldable(function (f) {
          return function (b) {
              var go = function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return nil(dictMonad.Applicative0());
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return cons(dictMonad.Applicative0())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
                          return go(f(v.value0.value1));
                      }));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 287, column 11 - line 287, column 27: " + [ v.constructor.name ]);
              };
              return go(f(b));
          };
      });
  };
  var semigroupListT = function (dictApplicative) {
      return new Data_Semigroup.Semigroup(concat(dictApplicative));
  };
  var concat = function (dictApplicative) {
      return function (x) {
          return function (y) {
              var f = function (v) {
                  if (v instanceof Yield) {
                      return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                      })(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return new Skip(Data_Lazy.defer(Data_Function["const"](y)));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 107, column 3 - line 107, column 43: " + [ v.constructor.name ]);
              };
              return stepMap((dictApplicative.Apply0()).Functor0())(f)(x);
          };
      };
  };
  var monoidListT = function (dictApplicative) {
      return new Data_Monoid.Monoid(function () {
          return semigroupListT(dictApplicative);
      }, nil(dictApplicative));
  };
  var catMaybes = function (dictFunctor) {
      return mapMaybe(dictFunctor)(Control_Category.id(Control_Category.categoryFn));
  };
  var monadListT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeListT(dictMonad);
      }, function () {
          return bindListT(dictMonad);
      });
  };
  var bindListT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyListT(dictMonad);
      }, function (fa) {
          return function (f) {
              var g = function (v) {
                  if (v instanceof Yield) {
                      var h = function (s$prime) {
                          return Data_Semigroup.append(semigroupListT(dictMonad.Applicative0()))(f(v.value0))(Control_Bind.bind(bindListT(dictMonad))(s$prime)(f));
                      };
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(h)(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Control_Bind.bind(bindListT(dictMonad))(v1)(f);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 298, column 5 - line 300, column 31: " + [ v.constructor.name ]);
              };
              return stepMap(((dictMonad.Bind1()).Apply0()).Functor0())(g)(fa);
          };
      });
  };
  var applyListT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorListT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadListT(dictMonad)));
  };
  var applicativeListT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyListT(dictMonad);
      }, singleton(dictMonad.Applicative0()));
  };
  var monadEffListT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadListT(dictMonadEff.Monad0());
      }, function ($179) {
          return Control_Monad_Trans_Class.lift(monadTransListT)(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($179));
      });
  };
  var altListT = function (dictApplicative) {
      return new Control_Alt.Alt(function () {
          return functorListT((dictApplicative.Apply0()).Functor0());
      }, concat(dictApplicative));
  };
  var plusListT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altListT(dictMonad.Applicative0());
      }, nil(dictMonad.Applicative0()));
  };
  var alternativeListT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeListT(dictMonad);
      }, function () {
          return plusListT(dictMonad);
      });
  };
  var monadZeroListT = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeListT(dictMonad);
      }, function () {
          return monadListT(dictMonad);
      });
  };
  var monadPlusListT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroListT(dictMonad);
      });
  };
  exports["ListT"] = ListT;
  exports["Yield"] = Yield;
  exports["Skip"] = Skip;
  exports["Done"] = Done;
  exports["catMaybes"] = catMaybes;
  exports["cons"] = cons;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["filter"] = filter;
  exports["foldl"] = foldl;
  exports["foldl'"] = foldl$prime;
  exports["foldlRec"] = foldlRec;
  exports["foldlRec'"] = foldlRec$prime;
  exports["fromEffect"] = fromEffect;
  exports["head"] = head;
  exports["iterate"] = iterate;
  exports["mapMaybe"] = mapMaybe;
  exports["nil"] = nil;
  exports["prepend"] = prepend;
  exports["prepend'"] = prepend$prime;
  exports["repeat"] = repeat;
  exports["runListT"] = runListT;
  exports["runListTRec"] = runListTRec;
  exports["scanl"] = scanl;
  exports["singleton"] = singleton;
  exports["tail"] = tail;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["uncons"] = uncons;
  exports["unfold"] = unfold;
  exports["wrapEffect"] = wrapEffect;
  exports["wrapLazy"] = wrapLazy;
  exports["zipWith"] = zipWith;
  exports["zipWith'"] = zipWith$prime;
  exports["newtypeListT"] = newtypeListT;
  exports["semigroupListT"] = semigroupListT;
  exports["monoidListT"] = monoidListT;
  exports["functorListT"] = functorListT;
  exports["unfoldableListT"] = unfoldableListT;
  exports["applyListT"] = applyListT;
  exports["applicativeListT"] = applicativeListT;
  exports["bindListT"] = bindListT;
  exports["monadListT"] = monadListT;
  exports["monadTransListT"] = monadTransListT;
  exports["altListT"] = altListT;
  exports["plusListT"] = plusListT;
  exports["alternativeListT"] = alternativeListT;
  exports["monadZeroListT"] = monadZeroListT;
  exports["monadPlusListT"] = monadPlusListT;
  exports["monadEffListT"] = monadEffListT;
})(PS["Control.Monad.List.Trans"] = PS["Control.Monad.List.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var MaybeT = function (x) {
      return x;
  };
  var runMaybeT = function (v) {
      return v;
  };
  var newtypeMaybeT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MaybeT);
  var monadTransMaybeT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($75) {
          return MaybeT(Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create)($75));
      };
  });
  var mapMaybeT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorMaybeT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v);
          };
      });
  };
  var monadMaybeT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return bindMaybeT(dictMonad);
      });
  };
  var bindMaybeT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyMaybeT(dictMonad);
      }, function (v) {
          return function (f) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      var v2 = f(v1.value0);
                      return v2;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 55, column 11 - line 57, column 42: " + [ v1.constructor.name ]);
              });
          };
      });
  };
  var applyMaybeT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadMaybeT(dictMonad)));
  };
  var applicativeMaybeT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyMaybeT(dictMonad);
      }, function ($76) {
          return MaybeT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Just.create($76)));
      });
  };
  var monadAskMaybeT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadMaybeT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderMaybeT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskMaybeT(dictMonadReader.MonadAsk0());
      }, function (f) {
          return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadContMaybeT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadMaybeT(dictMonadCont.Monad0());
      }, function (f) {
          return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              var v = f(function (a) {
                  return MaybeT(c(new Data_Maybe.Just(a)));
              });
              return v;
          }));
      });
  };
  var monadEffMaybe = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadMaybeT(dictMonadEff.Monad0());
      }, function ($77) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($77));
      });
  };
  var monadRecMaybeT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadMaybeT(dictMonadRec.Monad0());
      }, function (f) {
          return function ($78) {
              return MaybeT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                      var v = f(a);
                      return v;
                  })())(function (m$prime) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                          if (m$prime instanceof Data_Maybe.Nothing) {
                              return new Control_Monad_Rec_Class.Done(Data_Maybe.Nothing.value);
                          };
                          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                              return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                          };
                          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                              return new Control_Monad_Rec_Class.Done(new Data_Maybe.Just(m$prime.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 85, column 16 - line 88, column 43: " + [ m$prime.constructor.name ]);
                      })());
                  });
              })($78));
          };
      });
  };
  var monadStateMaybeT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadMaybeT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadTellMaybeT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadMaybeT(dictMonadTell.Monad0());
      }, function ($79) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($79));
      });
  };
  var monadWriterMaybeT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellMaybeT(dictMonadWriter.MonadTell0());
      }, mapMaybeT(function (m) {
          return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(Data_Functor.map(Data_Maybe.functorMaybe)(function (r) {
                  return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
          });
      }), mapMaybeT(function (m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m)(function (v) {
              return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())((function () {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Control_Category.id(Control_Category.categoryFn));
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Tuple.Tuple(new Data_Maybe.Just(v.value0.value0), v.value0.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 122, column 10 - line 124, column 42: " + [ v.constructor.name ]);
              })());
          }));
      }));
  };
  var monadThrowMaybeT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadMaybeT(dictMonadThrow.Monad0());
      }, function (e) {
          return Control_Monad_Trans_Class.lift(monadTransMaybeT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
      });
  };
  var monadErrorMaybeT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowMaybeT(dictMonadError.MonadThrow0());
      }, function (v) {
          return function (h) {
              return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (a) {
                  var v1 = h(a);
                  return v1;
              }));
          };
      });
  };
  var altMaybeT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorMaybeT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v2) {
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return v1;
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(v2);
              });
          };
      });
  };
  var plusMaybeT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altMaybeT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value));
  };
  var alternativeMaybeT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return plusMaybeT(dictMonad);
      });
  };
  var monadZeroMaybeT = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeMaybeT(dictMonad);
      }, function () {
          return monadMaybeT(dictMonad);
      });
  };
  var monadPlusMaybeT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroMaybeT(dictMonad);
      });
  };
  exports["MaybeT"] = MaybeT;
  exports["mapMaybeT"] = mapMaybeT;
  exports["runMaybeT"] = runMaybeT;
  exports["newtypeMaybeT"] = newtypeMaybeT;
  exports["functorMaybeT"] = functorMaybeT;
  exports["applyMaybeT"] = applyMaybeT;
  exports["applicativeMaybeT"] = applicativeMaybeT;
  exports["bindMaybeT"] = bindMaybeT;
  exports["monadMaybeT"] = monadMaybeT;
  exports["monadTransMaybeT"] = monadTransMaybeT;
  exports["altMaybeT"] = altMaybeT;
  exports["plusMaybeT"] = plusMaybeT;
  exports["alternativeMaybeT"] = alternativeMaybeT;
  exports["monadPlusMaybeT"] = monadPlusMaybeT;
  exports["monadZeroMaybeT"] = monadZeroMaybeT;
  exports["monadRecMaybeT"] = monadRecMaybeT;
  exports["monadEffMaybe"] = monadEffMaybe;
  exports["monadContMaybeT"] = monadContMaybeT;
  exports["monadThrowMaybeT"] = monadThrowMaybeT;
  exports["monadErrorMaybeT"] = monadErrorMaybeT;
  exports["monadAskMaybeT"] = monadAskMaybeT;
  exports["monadReaderMaybeT"] = monadReaderMaybeT;
  exports["monadStateMaybeT"] = monadStateMaybeT;
  exports["monadTellMaybeT"] = monadTellMaybeT;
  exports["monadWriterMaybeT"] = monadWriterMaybeT;
})(PS["Control.Monad.Maybe.Trans"] = PS["Control.Monad.Maybe.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var RWSResult = (function () {
      function RWSResult(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RWSResult.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RWSResult(value0, value1, value2);
              };
          };
      };
      return RWSResult;
  })();
  var RWST = function (x) {
      return x;
  };
  var withRWST = function (f) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return Data_Tuple.uncurry(m)(f(r)(s));
              };
          };
      };
  };
  var runRWST = function (v) {
      return v;
  };
  var newtypeRWST = new Data_Newtype.Newtype(function (n) {
      return n;
  }, RWST);
  var monadTransRWST = function (dictMonoid) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (m) {
              return function (v) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      });
                  };
              };
          };
      });
  };
  var mapRWST = function (f) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return f(v(r)(s));
              };
          };
      };
  };
  var lazyRWST = new Control_Lazy.Lazy(function (f) {
      return function (r) {
          return function (s) {
              var v = f(Data_Unit.unit);
              return v(r)(s);
          };
      };
  });
  var functorRWST = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (r) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new RWSResult(v1.value0, f(v1.value1), v1.value2);
                      })(v(r)(s));
                  };
              };
          };
      });
  };
  var execRWST = function (dictMonad) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value2));
                  });
              };
          };
      };
  };
  var evalRWST = function (dictMonad) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(r)(s))(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value1, v1.value2));
                  });
              };
          };
      };
  };
  var applyRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Apply.Apply(function () {
              return functorRWST((dictBind.Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
                              return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v1(r)(v2.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid.Semigroup0())(v2.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var bindRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Bind.Bind(function () {
              return applyRWST(dictBind)(dictMonoid);
          }, function (v) {
              return function (f) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
                              var v2 = f(v1.value1);
                              return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v2(r)(v1.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v3.value1, Data_Semigroup.append(dictMonoid.Semigroup0())(v1.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var applicativeRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Applicative.Applicative(function () {
              return applyRWST(dictMonad.Bind1())(dictMonoid);
          }, function (a) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad.Monad(function () {
              return applicativeRWST(dictMonad)(dictMonoid);
          }, function () {
              return bindRWST(dictMonad.Bind1())(dictMonoid);
          });
      };
  };
  var monadAskRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadAsk(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (r) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
              };
          });
      };
  };
  var monadReaderRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadAskRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return m(f(r))(s);
                      };
                  };
              };
          });
      };
  };
  var monadEffRWS = function (dictMonoid) {
      return function (dictMonadEff) {
          return new Control_Monad_Eff_Class.MonadEff(function () {
              return monadRWST(dictMonadEff.Monad0())(dictMonoid);
          }, function ($155) {
              return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($155));
          });
      };
  };
  var monadRecRWST = function (dictMonadRec) {
      return function (dictMonoid) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadRWST(dictMonadRec.Monad0())(dictMonoid);
          }, function (k) {
              return function (a) {
                  var k$prime = function (r) {
                      return function (v) {
                          var v1 = k(v.value1);
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v1(r)(v.value0))(function (v2) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                                  if (v2.value1 instanceof Control_Monad_Rec_Class.Loop) {
                                      return new Control_Monad_Rec_Class.Loop(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                  };
                                  if (v2.value1 instanceof Control_Monad_Rec_Class.Done) {
                                      return new Control_Monad_Rec_Class.Done(new RWSResult(v2.value0, v2.value1.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value2)(v2.value2)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.RWS.Trans line 129, column 16 - line 131, column 68: " + [ v2.value1.constructor.name ]);
                              })());
                          });
                      };
                  };
                  return function (r) {
                      return function (s) {
                          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      };
                  };
              };
          });
      };
  };
  var monadStateRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (v) {
                  return function (s) {
                      var v1 = f(s);
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v1.value1, v1.value0, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadTellRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (w) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, Data_Unit.unit, w));
                  };
              };
          });
      };
  };
  var monadWriterRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadTellRWST(dictMonad)(dictMonoid);
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                      });
                  };
              };
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                      });
                  };
              };
          });
      };
  };
  var monadThrowRWST = function (dictMonadThrow) {
      return function (dictMonoid) {
          return new Control_Monad_Error_Class.MonadThrow(function () {
              return monadRWST(dictMonadThrow.Monad0())(dictMonoid);
          }, function (e) {
              return Control_Monad_Trans_Class.lift(monadTransRWST(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
          });
      };
  };
  var monadErrorRWST = function (dictMonadError) {
      return function (dictMonoid) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadThrowRWST(dictMonadError.MonadThrow0())(dictMonoid);
          }, function (m) {
              return function (h) {
                  return RWST(function (r) {
                      return function (s) {
                          return Control_Monad_Error_Class.catchError(dictMonadError)(m(r)(s))(function (e) {
                              var v = h(e);
                              return v(r)(s);
                          });
                      };
                  });
              };
          });
      };
  };
  var altRWST = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorRWST(dictAlt.Functor0());
      }, function (v) {
          return function (v1) {
              return RWST(function (r) {
                  return function (s) {
                      return Control_Alt.alt(dictAlt)(v(r)(s))(v1(r)(s));
                  };
              });
          };
      });
  };
  var plusRWST = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altRWST(dictPlus.Alt0());
      }, function (v) {
          return function (v1) {
              return Control_Plus.empty(dictPlus);
          };
      });
  };
  var alternativeRWST = function (dictMonoid) {
      return function (dictAlternative) {
          return function (dictMonad) {
              return new Control_Alternative.Alternative(function () {
                  return applicativeRWST(dictMonad)(dictMonoid);
              }, function () {
                  return plusRWST(dictAlternative.Plus1());
              });
          };
      };
  };
  exports["RWSResult"] = RWSResult;
  exports["RWST"] = RWST;
  exports["evalRWST"] = evalRWST;
  exports["execRWST"] = execRWST;
  exports["mapRWST"] = mapRWST;
  exports["runRWST"] = runRWST;
  exports["withRWST"] = withRWST;
  exports["newtypeRWST"] = newtypeRWST;
  exports["functorRWST"] = functorRWST;
  exports["applyRWST"] = applyRWST;
  exports["altRWST"] = altRWST;
  exports["alternativeRWST"] = alternativeRWST;
  exports["bindRWST"] = bindRWST;
  exports["applicativeRWST"] = applicativeRWST;
  exports["monadRWST"] = monadRWST;
  exports["monadTransRWST"] = monadTransRWST;
  exports["lazyRWST"] = lazyRWST;
  exports["monadEffRWS"] = monadEffRWS;
  exports["monadAskRWST"] = monadAskRWST;
  exports["monadReaderRWST"] = monadReaderRWST;
  exports["monadStateRWST"] = monadStateRWST;
  exports["monadTellRWST"] = monadTellRWST;
  exports["monadWriterRWST"] = monadWriterRWST;
  exports["monadThrowRWST"] = monadThrowRWST;
  exports["monadErrorRWST"] = monadErrorRWST;
  exports["monadRecRWST"] = monadRecRWST;
  exports["plusRWST"] = plusRWST;
})(PS["Control.Monad.RWS.Trans"] = PS["Control.Monad.RWS.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var withRWS = Control_Monad_RWS_Trans.withRWST;
  var rws = function (f) {
      return function (r) {
          return function (s) {
              return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(r)(s));
          };
      };
  };
  var runRWS = function (m) {
      return function (r) {
          return function (s) {
              var v = m(r)(s);
              return v;
          };
      };
  };
  var mapRWS = function (f) {
      return Control_Monad_RWS_Trans.mapRWST(function ($3) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($3)));
      });
  };
  var execRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_RWS_Trans.execRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  var evalRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_RWS_Trans.evalRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  exports["evalRWS"] = evalRWS;
  exports["execRWS"] = execRWS;
  exports["mapRWS"] = mapRWS;
  exports["runRWS"] = runRWS;
  exports["rws"] = rws;
  exports["withRWS"] = withRWS;
})(PS["Control.Monad.RWS"] = PS["Control.Monad.RWS"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var Distributive = function (Functor0, collect, distribute) {
      this.Functor0 = Functor0;
      this.collect = collect;
      this.distribute = distribute;
  };
  var distributiveIdentity = new Distributive(function () {
      return Data_Identity.functorIdentity;
  }, function (dictFunctor) {
      return function (f) {
          return function ($11) {
              return Data_Identity.Identity(Data_Functor.map(dictFunctor)(function ($12) {
                  return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(f($12));
              })($11));
          };
      };
  }, function (dictFunctor) {
      return function ($13) {
          return Data_Identity.Identity(Data_Functor.map(dictFunctor)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity))($13));
      };
  });
  var distribute = function (dict) {
      return dict.distribute;
  };
  var distributiveFunction = new Distributive(function () {
      return Data_Functor.functorFn;
  }, function (dictFunctor) {
      return function (f) {
          return function ($14) {
              return distribute(distributiveFunction)(dictFunctor)(Data_Functor.map(dictFunctor)(f)($14));
          };
      };
  }, function (dictFunctor) {
      return function (a) {
          return function (e) {
              return Data_Functor.map(dictFunctor)(function (v) {
                  return v(e);
              })(a);
          };
      };
  });
  var cotraverse = function (dictDistributive) {
      return function (dictFunctor) {
          return function (f) {
              return function ($15) {
                  return Data_Functor.map(dictDistributive.Functor0())(f)(distribute(dictDistributive)(dictFunctor)($15));
              };
          };
      };
  };
  var collectDefault = function (dictDistributive) {
      return function (dictFunctor) {
          return function (f) {
              return function ($16) {
                  return distribute(dictDistributive)(dictFunctor)(Data_Functor.map(dictFunctor)(f)($16));
              };
          };
      };
  };
  var collect = function (dict) {
      return dict.collect;
  };
  var distributeDefault = function (dictDistributive) {
      return function (dictFunctor) {
          return collect(dictDistributive)(dictFunctor)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Distributive"] = Distributive;
  exports["collect"] = collect;
  exports["collectDefault"] = collectDefault;
  exports["cotraverse"] = cotraverse;
  exports["distribute"] = distribute;
  exports["distributeDefault"] = distributeDefault;
  exports["distributiveIdentity"] = distributiveIdentity;
  exports["distributiveFunction"] = distributiveFunction;
})(PS["Data.Distributive"] = PS["Data.Distributive"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var ReaderT = function (x) {
      return x;
  };
  var withReaderT = function (f) {
      return function (v) {
          return function ($62) {
              return v(f($62));
          };
      };
  };
  var runReaderT = function (v) {
      return v;
  };
  var newtypeReaderT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ReaderT);
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($63) {
          return ReaderT(Data_Function["const"]($63));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($64) {
              return f(v($64));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor(function ($65) {
          return mapReaderT(Data_Functor.map(dictFunctor)($65));
      });
  };
  var distributiveReaderT = function (dictDistributive) {
      return new Data_Distributive.Distributive(function () {
          return functorReaderT(dictDistributive.Functor0());
      }, function (dictFunctor) {
          return function (f) {
              return function ($66) {
                  return Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor)(Data_Functor.map(dictFunctor)(f)($66));
              };
          };
      }, function (dictFunctor) {
          return function (a) {
              return function (e) {
                  return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (r) {
                      return r(e);
                  })(a);
              };
          };
      });
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, function ($67) {
          return ReaderT(Data_Function["const"](Control_Applicative.pure(dictApplicative)($67)));
      });
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  var monadReaderReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskReaderT(dictMonad);
      }, withReaderT);
  };
  var monadContReaderT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadReaderT(dictMonadCont.Monad0());
      }, function (f) {
          return function (r) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var v = f(function ($68) {
                      return ReaderT(Data_Function["const"](c($68)));
                  });
                  return v(r);
              });
          };
      });
  };
  var monadEffReader = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadReaderT(dictMonadEff.Monad0());
      }, function ($69) {
          return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($69));
      });
  };
  var monadRecReaderT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadReaderT(dictMonadRec.Monad0());
      }, function (k) {
          return function (a) {
              var k$prime = function (r) {
                  return function (a$prime) {
                      var v = k(a$prime);
                      return Control_Bind.bindFlipped((dictMonadRec.Monad0()).Bind1())(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0()))(v(r));
                  };
              };
              return function (r) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
              };
          };
      });
  };
  var monadStateReaderT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadReaderT(dictMonadState.Monad0());
      }, function ($70) {
          return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)($70));
      });
  };
  var monadTellReaderT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadReaderT(dictMonadTell.Monad0());
      }, function ($71) {
          return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($71));
      });
  };
  var monadWriterReaderT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellReaderT(dictMonadWriter.MonadTell0());
      }, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)));
  };
  var monadThrowReaderT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadReaderT(dictMonadThrow.Monad0());
      }, function ($72) {
          return Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)($72));
      });
  };
  var monadErrorReaderT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowReaderT(dictMonadError.MonadThrow0());
      }, function (v) {
          return function (h) {
              return function (r) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
                      var v1 = h(e);
                      return v1(r);
                  });
              };
          };
      });
  };
  var altReaderT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorReaderT(dictAlt.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Alt.alt(dictAlt)(v(r))(v1(r));
              };
          };
      });
  };
  var plusReaderT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altReaderT(dictPlus.Alt0());
      }, Data_Function["const"](Control_Plus.empty(dictPlus)));
  };
  var alternativeReaderT = function (dictAlternative) {
      return new Control_Alternative.Alternative(function () {
          return applicativeReaderT(dictAlternative.Applicative0());
      }, function () {
          return plusReaderT(dictAlternative.Plus1());
      });
  };
  var monadZeroReaderT = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeReaderT(dictMonadZero.Alternative1());
      }, function () {
          return monadReaderT(dictMonadZero.Monad0());
      });
  };
  var monadPlusReaderT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroReaderT(dictMonadPlus.MonadZero0());
      });
  };
  exports["ReaderT"] = ReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["runReaderT"] = runReaderT;
  exports["withReaderT"] = withReaderT;
  exports["newtypeReaderT"] = newtypeReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["altReaderT"] = altReaderT;
  exports["plusReaderT"] = plusReaderT;
  exports["alternativeReaderT"] = alternativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadZeroReaderT"] = monadZeroReaderT;
  exports["monadPlusReaderT"] = monadPlusReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffReader"] = monadEffReader;
  exports["monadContReaderT"] = monadContReaderT;
  exports["monadThrowReaderT"] = monadThrowReaderT;
  exports["monadErrorReaderT"] = monadErrorReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
  exports["monadReaderReaderT"] = monadReaderReaderT;
  exports["monadStateReaderT"] = monadStateReaderT;
  exports["monadTellReaderT"] = monadTellReaderT;
  exports["monadWriterReaderT"] = monadWriterReaderT;
  exports["distributiveReaderT"] = distributiveReaderT;
  exports["monadRecReaderT"] = monadRecReaderT;
})(PS["Control.Monad.Reader.Trans"] = PS["Control.Monad.Reader.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var withReader = Control_Monad_Reader_Trans.withReaderT;
  var runReader = function (v) {
      return function ($2) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(v($2));
      };
  };
  var mapReader = function (f) {
      return Control_Monad_Reader_Trans.mapReaderT(function ($3) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($3)));
      });
  };
  exports["mapReader"] = mapReader;
  exports["runReader"] = runReader;
  exports["withReader"] = withReader;
})(PS["Control.Monad.Reader"] = PS["Control.Monad.Reader"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var StateT = function (x) {
      return x;
  };
  var withStateT = function (f) {
      return function (v) {
          return function ($107) {
              return v(f($107));
          };
      };
  };
  var runStateT = function (v) {
      return v;
  };
  var newtypeStateT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, StateT);
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var mapStateT = function (f) {
      return function (v) {
          return function ($108) {
              return f(v($108));
          };
      };
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var execStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
          };
      };
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadAskStateT = function (dictMonadAsk) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadStateT(dictMonadAsk.Monad0());
      }, Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
  };
  var monadReaderStateT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskStateT(dictMonadReader.MonadAsk0());
      }, function ($109) {
          return mapStateT(Control_Monad_Reader_Class.local(dictMonadReader)($109));
      });
  };
  var monadContStateT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadStateT(dictMonadCont.Monad0());
      }, function (f) {
          return function (s) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var v = f(function (a) {
                      return function (s$prime) {
                          return c(new Data_Tuple.Tuple(a, s$prime));
                      };
                  });
                  return v(s);
              });
          };
      });
  };
  var monadEffState = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadStateT(dictMonadEff.Monad0());
      }, function ($110) {
          return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($110));
      });
  };
  var monadRecStateT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadStateT(dictMonadRec.Monad0());
      }, function (f) {
          return function (a) {
              var f$prime = function (v) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                      var v1 = f(v.value0);
                      return v1;
                  })()(v.value1))(function (v1) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                          if (v1.value0 instanceof Control_Monad_Rec_Class.Loop) {
                              return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          if (v1.value0 instanceof Control_Monad_Rec_Class.Done) {
                              return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          throw new Error("Failed pattern match at Control.Monad.State.Trans line 88, column 16 - line 90, column 40: " + [ v1.value0.constructor.name ]);
                      })());
                  });
              };
              return function (s) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
              };
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  var monadTellStateT = function (dictMonadTell) {
      return new Control_Monad_Writer_Class.MonadTell(function () {
          return monadStateT(dictMonadTell.Monad0());
      }, function ($112) {
          return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadTell.Monad0())(Control_Monad_Writer_Class.tell(dictMonadTell)($112));
      });
  };
  var monadWriterStateT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadTellStateT(dictMonadWriter.MonadTell0());
      }, function (m) {
          return function (s) {
              return Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m(s)))(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
              });
          };
      }, function (m) {
          return function (s) {
              return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(m(s))(function (v) {
                  return Control_Applicative.pure(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
              }));
          };
      });
  };
  var monadThrowStateT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadStateT(dictMonadThrow.Monad0());
      }, function (e) {
          return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
      });
  };
  var monadErrorStateT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowStateT(dictMonadError.MonadThrow0());
      }, function (v) {
          return function (h) {
              return function (s) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
                      var v1 = h(e);
                      return v1(s);
                  });
              };
          };
      });
  };
  var altStateT = function (dictMonad) {
      return function (dictAlt) {
          return new Control_Alt.Alt(function () {
              return functorStateT(dictAlt.Functor0());
          }, function (v) {
              return function (v1) {
                  return function (s) {
                      return Control_Alt.alt(dictAlt)(v(s))(v1(s));
                  };
              };
          });
      };
  };
  var plusStateT = function (dictMonad) {
      return function (dictPlus) {
          return new Control_Plus.Plus(function () {
              return altStateT(dictMonad)(dictPlus.Alt0());
          }, function (v) {
              return Control_Plus.empty(dictPlus);
          });
      };
  };
  var alternativeStateT = function (dictMonad) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeStateT(dictMonad);
          }, function () {
              return plusStateT(dictMonad)(dictAlternative.Plus1());
          });
      };
  };
  var monadZeroStateT = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeStateT(dictMonadZero.Monad0())(dictMonadZero.Alternative1());
      }, function () {
          return monadStateT(dictMonadZero.Monad0());
      });
  };
  var monadPlusStateT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroStateT(dictMonadPlus.MonadZero0());
      });
  };
  exports["StateT"] = StateT;
  exports["evalStateT"] = evalStateT;
  exports["execStateT"] = execStateT;
  exports["mapStateT"] = mapStateT;
  exports["runStateT"] = runStateT;
  exports["withStateT"] = withStateT;
  exports["newtypeStateT"] = newtypeStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["altStateT"] = altStateT;
  exports["plusStateT"] = plusStateT;
  exports["alternativeStateT"] = alternativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadRecStateT"] = monadRecStateT;
  exports["monadZeroStateT"] = monadZeroStateT;
  exports["monadPlusStateT"] = monadPlusStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadEffState"] = monadEffState;
  exports["monadContStateT"] = monadContStateT;
  exports["monadThrowStateT"] = monadThrowStateT;
  exports["monadErrorStateT"] = monadErrorStateT;
  exports["monadAskStateT"] = monadAskStateT;
  exports["monadReaderStateT"] = monadReaderStateT;
  exports["monadStateStateT"] = monadStateStateT;
  exports["monadTellStateT"] = monadTellStateT;
  exports["monadWriterStateT"] = monadWriterStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var withState = Control_Monad_State_Trans.withStateT;
  var runState = function (v) {
      return function ($16) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(v($16));
      };
  };
  var mapState = function (f) {
      return Control_Monad_State_Trans.mapStateT(function ($17) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($17)));
      });
  };
  var execState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value1;
      };
  };
  var evalState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value0;
      };
  };
  exports["evalState"] = evalState;
  exports["execState"] = execState;
  exports["mapState"] = mapState;
  exports["runState"] = runState;
  exports["withState"] = withState;
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var newtypeWriterT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, WriterT);
  var monadTransWriterT = function (dictMonoid) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, Data_Monoid.mempty(dictMonoid)));
              });
          };
      });
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var execWriterT = function (dictFunctor) {
      return function (v) {
          return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v);
      };
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Control_Apply.Apply(function () {
              return functorWriterT(dictApply.Functor0());
          }, function (v) {
              return function (v1) {
                  var k = function (v3) {
                      return function (v4) {
                          return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                      };
                  };
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictBind) {
          return new Control_Bind.Bind(function () {
              return applyWriterT(dictSemigroup)(dictBind.Apply0());
          }, function (v) {
              return function (k) {
                  return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                      var v2 = k(v1.value0);
                      return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                          return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                      })(v2);
                  }));
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Control_Applicative.Applicative(function () {
              return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
          }, function (a) {
              return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
          }, function () {
              return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
          });
      };
  };
  var monadAskWriterT = function (dictMonoid) {
      return function (dictMonadAsk) {
          return new Control_Monad_Reader_Class.MonadAsk(function () {
              return monadWriterT(dictMonoid)(dictMonadAsk.Monad0());
          }, Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)));
      };
  };
  var monadReaderWriterT = function (dictMonoid) {
      return function (dictMonadReader) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadAskWriterT(dictMonoid)(dictMonadReader.MonadAsk0());
          }, function (f) {
              return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
          });
      };
  };
  var monadContWriterT = function (dictMonoid) {
      return function (dictMonadCont) {
          return new Control_Monad_Cont_Class.MonadCont(function () {
              return monadWriterT(dictMonoid)(dictMonadCont.Monad0());
          }, function (f) {
              return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var v = f(function (a) {
                      return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
                  });
                  return v;
              }));
          });
      };
  };
  var monadEffWriter = function (dictMonoid) {
      return function (dictMonadEff) {
          return new Control_Monad_Eff_Class.MonadEff(function () {
              return monadWriterT(dictMonoid)(dictMonadEff.Monad0());
          }, function ($123) {
              return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadEff.Monad0())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($123));
          });
      };
  };
  var monadRecWriterT = function (dictMonoid) {
      return function (dictMonadRec) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadWriterT(dictMonoid)(dictMonadRec.Monad0());
          }, function (f) {
              return function (a) {
                  var f$prime = function (v) {
                      return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                          var v1 = f(v.value0);
                          return v1;
                      })())(function (v1) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                              if (v1.value0 instanceof Control_Monad_Rec_Class.Loop) {
                                  return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v1.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v1.value1)));
                              };
                              if (v1.value0 instanceof Control_Monad_Rec_Class.Done) {
                                  return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v1.value0.value0, Data_Semigroup.append(dictMonoid.Semigroup0())(v.value1)(v1.value1)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Writer.Trans line 85, column 16 - line 87, column 47: " + [ v1.value0.constructor.name ]);
                          })());
                      });
                  };
                  return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
              };
          });
      };
  };
  var monadStateWriterT = function (dictMonoid) {
      return function (dictMonadState) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadWriterT(dictMonoid)(dictMonadState.Monad0());
          }, function (f) {
              return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
          });
      };
  };
  var monadTellWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, function ($124) {
              return WriterT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Tuple.Tuple.create(Data_Unit.unit)($124)));
          });
      };
  };
  var monadWriterWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadTellWriterT(dictMonoid)(dictMonad);
          }, function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1), v1.value1));
              });
          }, function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(function (v1) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1(v1.value1)));
              });
          });
      };
  };
  var monadThrowWriterT = function (dictMonoid) {
      return function (dictMonadThrow) {
          return new Control_Monad_Error_Class.MonadThrow(function () {
              return monadWriterT(dictMonoid)(dictMonadThrow.Monad0());
          }, function (e) {
              return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
          });
      };
  };
  var monadErrorWriterT = function (dictMonoid) {
      return function (dictMonadError) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadThrowWriterT(dictMonoid)(dictMonadError.MonadThrow0());
          }, function (v) {
              return function (h) {
                  return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (e) {
                      var v1 = h(e);
                      return v1;
                  }));
              };
          });
      };
  };
  var altWriterT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorWriterT(dictAlt.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Alt.alt(dictAlt)(v)(v1);
          };
      });
  };
  var plusWriterT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altWriterT(dictPlus.Alt0());
      }, Control_Plus.empty(dictPlus));
  };
  var alternativeWriterT = function (dictMonoid) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeWriterT(dictMonoid)(dictAlternative.Applicative0());
          }, function () {
              return plusWriterT(dictAlternative.Plus1());
          });
      };
  };
  var monadZeroWriterT = function (dictMonoid) {
      return function (dictMonadZero) {
          return new Control_MonadZero.MonadZero(function () {
              return alternativeWriterT(dictMonoid)(dictMonadZero.Alternative1());
          }, function () {
              return monadWriterT(dictMonoid)(dictMonadZero.Monad0());
          });
      };
  };
  var monadPlusWriterT = function (dictMonoid) {
      return function (dictMonadPlus) {
          return new Control_MonadPlus.MonadPlus(function () {
              return monadZeroWriterT(dictMonoid)(dictMonadPlus.MonadZero0());
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["execWriterT"] = execWriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["runWriterT"] = runWriterT;
  exports["newtypeWriterT"] = newtypeWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
  exports["altWriterT"] = altWriterT;
  exports["plusWriterT"] = plusWriterT;
  exports["alternativeWriterT"] = alternativeWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadWriterT"] = monadWriterT;
  exports["monadRecWriterT"] = monadRecWriterT;
  exports["monadZeroWriterT"] = monadZeroWriterT;
  exports["monadPlusWriterT"] = monadPlusWriterT;
  exports["monadTransWriterT"] = monadTransWriterT;
  exports["monadEffWriter"] = monadEffWriter;
  exports["monadContWriterT"] = monadContWriterT;
  exports["monadThrowWriterT"] = monadThrowWriterT;
  exports["monadErrorWriterT"] = monadErrorWriterT;
  exports["monadAskWriterT"] = monadAskWriterT;
  exports["monadReaderWriterT"] = monadReaderWriterT;
  exports["monadStateWriterT"] = monadStateWriterT;
  exports["monadTellWriterT"] = monadTellWriterT;
  exports["monadWriterWriterT"] = monadWriterWriterT;
})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var runWriter = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Writer_Trans.runWriterT($0));
  };
  var mapWriter = function (f) {
      return Control_Monad_Writer_Trans.mapWriterT(function ($1) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($1)));
      });
  };
  var execWriter = function (m) {
      return Data_Tuple.snd(runWriter(m));
  };
  exports["execWriter"] = execWriter;
  exports["mapWriter"] = mapWriter;
  exports["runWriter"] = runWriter;
})(PS["Control.Monad.Writer"] = PS["Control.Monad.Writer"] || {});
(function(exports) {
  /* global EventTarget */
  "use strict";

  exports._readEventTarget = function (left) {
    return function (right) {
      return function (foreign) {
        return foreign instanceof EventTarget ? left("Value is not an EventTarget") : right(foreign);
      };
    };
  };
})(PS["DOM.Event.Types"] = PS["DOM.Event.Types"] || {});
(function(exports) {
    "use strict";

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var tail = function (v) {
      return v.value1;
  };
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var oneOf = function (dictAlternative) {
      return function (v) {
          return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
      };
  };
  var head = function (v) {
      return v.value0;
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return new NonEmpty(f(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
          };
      });
  };
  var fromNonEmpty = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var foldl1 = function (dictFoldable) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  var traversableNonEmpty = function (dictTraversable) {
      return new Data_Traversable.Traversable(function () {
          return foldableNonEmpty(dictTraversable.Foldable1());
      }, function () {
          return functorNonEmpty(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
          };
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
              };
          };
      });
  };
  var foldMap1 = function (dictSemigroup) {
      return function (dictFoldable) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(function (s) {
                      return function (a1) {
                          return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                      };
                  })(f(v.value0))(v.value1);
              };
          };
      };
  };
  var fold1 = function (dictSemigroup) {
      return function (dictFoldable) {
          return foldMap1(dictSemigroup)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var eq1NonEmpty = function (dictEq1) {
      return new Data_Eq.Eq1(function (dictEq) {
          return function (v) {
              return function (v1) {
                  return Data_Eq.eq(dictEq)(v.value0)(v1.value0) && Data_Eq.eq1(dictEq1)(dictEq)(v.value1)(v1.value1);
              };
          };
      });
  };
  var eqNonEmpty = function (dictEq1) {
      return function (dictEq) {
          return new Data_Eq.Eq(Data_Eq.eq1(eq1NonEmpty(dictEq1))(dictEq));
      };
  };
  var ord1NonEmpty = function (dictOrd1) {
      return new Data_Ord.Ord1(function () {
          return eq1NonEmpty(dictOrd1.Eq10());
      }, function (dictOrd) {
          return function (v) {
              return function (v1) {
                  var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return Data_Ord.compare1(dictOrd1)(dictOrd)(v.value1)(v1.value1);
                  };
                  return v2;
              };
          };
      });
  };
  var ordNonEmpty = function (dictOrd1) {
      return function (dictOrd) {
          return new Data_Ord.Ord(function () {
              return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
          }, Data_Ord.compare1(ord1NonEmpty(dictOrd1))(dictOrd));
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["fold1"] = fold1;
  exports["foldMap1"] = foldMap1;
  exports["foldl1"] = foldl1;
  exports["fromNonEmpty"] = fromNonEmpty;
  exports["head"] = head;
  exports["oneOf"] = oneOf;
  exports["singleton"] = singleton;
  exports["tail"] = tail;
  exports["showNonEmpty"] = showNonEmpty;
  exports["eqNonEmpty"] = eqNonEmpty;
  exports["eq1NonEmpty"] = eq1NonEmpty;
  exports["ordNonEmpty"] = ordNonEmpty;
  exports["ord1NonEmpty"] = ord1NonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
  exports["traversableNonEmpty"] = traversableNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, NonEmptyList);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($116) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($116));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 76, column 12 - line 78, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = function ($copy_acc) {
              return function ($copy_v) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, v) {
                      if (v instanceof Nil) {
                          $tco_done = true;
                          return acc;
                      };
                      if (v instanceof Cons) {
                          $tco_var_acc = new Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 71, column 15 - line 73, column 33: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return function ($117) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)($117));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($118) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($119) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($119));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($118));
          };
      };
  });
  var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 84, column 22 - line 86, column 52: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var extendNonEmptyList = new Control_Extend.Extend(function () {
      return functorNonEmptyList;
  }, function (f) {
      return function (v) {
          var go = function (a) {
              return function (v1) {
                  return {
                      val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val), 
                      acc: new Cons(a, v1.acc)
                  };
              };
          };
          return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
              val: Nil.value, 
              acc: Nil.value
          })(v.value1)).val);
      };
  });
  var extendList = new Control_Extend.Extend(function () {
      return functorList;
  }, function (f) {
      return function (v) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              var go = function (a$prime) {
                  return function (v1) {
                      var acc$prime = new Cons(a$prime, v1.acc);
                      return {
                          val: new Cons(f(acc$prime), v1.val), 
                          acc: acc$prime
                      };
                  };
              };
              return new Cons(f(v), (Data_Foldable.foldr(foldableList)(go)({
                  val: Nil.value, 
                  acc: Nil.value
              })(v.value1)).val);
          };
          throw new Error("Failed pattern match at Data.List.Types line 117, column 1 - line 117, column 35: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var eq1List = new Data_Eq.Eq1(function (dictEq) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_v2) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, v2) {
                              if (!v2) {
                                  $tco_done = true;
                                  return false;
                              };
                              if (v instanceof Nil && v1 instanceof Nil) {
                                  $tco_done = true;
                                  return v2;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                  return;
                              };
                              $tco_done = true;
                              return false;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                          };
                          return $tco_result;
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      };
  });
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
  };
  var eqNonEmptyList = function (dictEq) {
      return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
  };
  var ord1List = new Data_Ord.Ord1(function () {
      return eq1List;
  }, function (dictOrd) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.EQ.value;
                          };
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_var_v = v.value1;
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              $tco_done = true;
                              return v2;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 51, column 5 - line 51, column 20: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(xs)(ys);
          };
      };
  });
  var ordList = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqList(dictOrd.Eq0());
      }, Data_Ord.compare1(ord1List)(dictOrd));
  };
  var ordNonEmptyList = function (dictOrd) {
      return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
  };
  var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
      return extendNonEmptyList;
  }, function (v) {
      return v.value0;
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 92, column 1 - line 92, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 99, column 1 - line 99, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindNonEmptyList = new Control_Bind.Bind(function () {
      return applyNonEmptyList;
  }, function (v) {
      return function (f) {
          var v1 = f(v.value0);
          return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function ($120) {
              return toList(f($120));
          })));
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  var monadList = new Control_Monad.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var altNonEmptyList = new Control_Alt.Alt(function () {
      return functorNonEmptyList;
  }, Data_Semigroup.append(semigroupNonEmptyList));
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return applicativeList;
  }, function () {
      return plusList;
  });
  var monadZeroList = new Control_MonadZero.MonadZero(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return monadZeroList;
  });
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function ($121) {
      return NonEmptyList(Data_NonEmpty.singleton(plusList)($121));
  });
  var monadNonEmptyList = new Control_Monad.Monad(function () {
      return applicativeNonEmptyList;
  }, function () {
      return bindNonEmptyList;
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["toList"] = toList;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["eq1List"] = eq1List;
  exports["ordList"] = ordList;
  exports["ord1List"] = ord1List;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadZeroList"] = monadZeroList;
  exports["monadPlusList"] = monadPlusList;
  exports["extendList"] = extendList;
  exports["newtypeNonEmptyList"] = newtypeNonEmptyList;
  exports["eqNonEmptyList"] = eqNonEmptyList;
  exports["ordNonEmptyList"] = ordNonEmptyList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["bindNonEmptyList"] = bindNonEmptyList;
  exports["monadNonEmptyList"] = monadNonEmptyList;
  exports["altNonEmptyList"] = altNonEmptyList;
  exports["extendNonEmptyList"] = extendNonEmptyList;
  exports["comonadNonEmptyList"] = comonadNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
  exports["traversableNonEmptyList"] = traversableNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var updateAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                  return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                      return new Data_List_Types.Cons(v2.value0, v3);
                  })(updateAt(v - 1 | 0)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
      };
  })(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 252, column 1 - line 252, column 66: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 238, column 1 - line 238, column 43: " + [ v.constructor.name ]);
  };
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
              var v2 = span(v)(v1.value1);
              return {
                  init: new Data_List_Types.Cons(v1.value0, v2.init), 
                  rest: v2.rest
              };
          };
          return {
              init: Data_List_Types.Nil.value, 
              rest: v1
          };
      };
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                      return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Data_List_Types.Nil) {
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List line 467, column 3 - line 467, column 38: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return v.value0;
              };
              $copy_v = mergePairs(v);
              return;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var sequences = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Data_Boolean.otherwise) {
                  return ascending(v.value1.value0)(function (v1) {
                      return new Data_List_Types.Cons(v.value0, v1);
                  })(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = new Data_List_Types.Cons(a, as);
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done = true;
                      return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      var ascending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = function (ys) {
                              return as(new Data_List_Types.Cons(a, ys));
                          };
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done = true;
                      return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      return function ($304) {
          return mergeAll(sequences($304));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 361, column 3 - line 361, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var snoc = function (xs) {
      return function (x) {
          return reverse(new Data_List_Types.Cons(x, reverse(xs)));
      };
  };
  var take = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              return function ($copy_v1) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_var_v = $copy_v;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, v, v1) {
                      if (v === 0) {
                          $tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return reverse(acc);
                      };
                      if (v1 instanceof Data_List_Types.Cons) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $tco_var_v = v - 1 | 0;
                          $copy_v1 = v1.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List line 488, column 3 - line 488, column 27: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
                  };
                  return $tco_result;
              };
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var takeWhile = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  $tco_done = true;
                  return reverse(acc);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var unsnoc = function (lst) {
      var go = function ($copy_v) {
          return function ($copy_acc) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, acc) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return new Data_Maybe.Just({
                          revInit: acc, 
                          last: v.value0
                      });
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_v = v.value1;
                      $copy_acc = new Data_List_Types.Cons(v.value0, acc);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 263, column 3 - line 263, column 23: " + [ v.constructor.name, acc.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_acc);
              };
              return $tco_result;
          };
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
          return {
              init: reverse(h.revInit), 
              last: h.last
          };
      })(go(lst)(Data_List_Types.Nil.value));
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, acc) {
                              if (v instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List line 652, column 3 - line 652, column 21: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function ($copy_s) {
                  return function ($copy_e) {
                      return function ($copy_step) {
                          return function ($copy_rest) {
                              var $tco_var_s = $copy_s;
                              var $tco_var_e = $copy_e;
                              var $tco_var_step = $copy_step;
                              var $tco_done = false;
                              var $tco_result;
                              function $tco_loop(s, e, step, rest) {
                                  if (s === e) {
                                      $tco_done = true;
                                      return new Data_List_Types.Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_s = s + step | 0;
                                      $tco_var_e = e;
                                      $tco_var_step = step;
                                      $copy_rest = new Data_List_Types.Cons(s, rest);
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 141, column 3 - line 142, column 65: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                              while (!$tco_done) {
                                  $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                              };
                              return $tco_result;
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $195 = start > end;
                  if ($195) {
                      return 1;
                  };
                  return -1 | 0;
              })())(Data_List_Types.Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 137, column 1 - line 137, column 32: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var mapWithIndex = function (f) {
      return function (lst) {
          var go = function ($copy_v) {
              return function ($copy_v1) {
                  return function ($copy_acc) {
                      var $tco_var_v = $copy_v;
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1, acc) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return acc;
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              $tco_var_v = v + 1 | 0;
                              $tco_var_v1 = v1.value1;
                              $copy_acc = new Data_List_Types.Cons(f(v)(v1.value0), acc);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List line 426, column 3 - line 426, column 21: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                      };
                      return $tco_result;
                  };
              };
          };
          return reverse(go(0)(lst)(Data_List_Types.Nil.value));
      };
  };
  var mapMaybe = function (f) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var v1 = f(v.value0);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List line 412, column 5 - line 414, column 32: " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List line 410, column 3 - line 410, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (v) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                          return new Data_List_Types.Cons(v1, acc);
                      })(function (v1) {
                          return reverse(acc);
                      })(v));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  var someRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
          };
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var last = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Cons) {
              $copy_v = v.value1;
              return;
          };
          $tco_done = true;
          return Data_Maybe.Nothing.value;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var insertBy = function (v) {
      return function (x) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return singleton(x);
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  var v2 = v(x)(v1.value0);
                  if (v2 instanceof Data_Ordering.GT) {
                      return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
                  };
                  return new Data_List_Types.Cons(x, v1);
              };
              throw new Error("Failed pattern match at Data.List line 209, column 1 - line 209, column 68: " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var insertAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0) {
                  return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                      return new Data_List_Types.Cons(v2.value0, v3);
                  })(insertAt(v - 1 | 0)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var init = function (lst) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.init;
      })(unsnoc(lst));
  };
  var index = function ($copy_v) {
      return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
              if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_List_Types.Cons && v1 === 0) {
                  $tco_done = true;
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Data_List_Types.Cons) {
                  $tco_var_v = v.value1;
                  $copy_v1 = v1 - 1 | 0;
                  return;
              };
              throw new Error("Failed pattern match at Data.List line 274, column 1 - line 274, column 44: " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
          };
          return $tco_result;
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 223, column 1 - line 223, column 22: " + [ v.constructor.name ]);
  };
  var transpose = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
          return transpose(v.value1);
      };
      if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
          return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
      };
      throw new Error("Failed pattern match at Data.List line 686, column 1 - line 686, column 54: " + [ v.constructor.name ]);
  };
  var groupBy = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v1 instanceof Data_List_Types.Cons) {
              var v2 = span(v(v1.value0))(v1.value1);
              return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
          };
          throw new Error("Failed pattern match at Data.List line 559, column 1 - line 559, column 80: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var group = function (dictEq) {
      return groupBy(Data_Eq.eq(dictEq));
  };
  var group$prime = function (dictOrd) {
      return function ($305) {
          return group(dictOrd.Eq0())(sort(dictOrd)($305));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var foldM = function (dictMonad) {
      return function (v) {
          return function (a) {
              return function (v1) {
                  if (v1 instanceof Data_List_Types.Nil) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(a);
                  };
                  if (v1 instanceof Data_List_Types.Cons) {
                      return Control_Bind.bind(dictMonad.Bind1())(v(a)(v1.value0))(function (a$prime) {
                          return foldM(dictMonad)(v)(a$prime)(v1.value1);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List line 697, column 1 - line 697, column 72: " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v1 instanceof Data_List_Types.Cons) {
                      if (fn(v1.value0)) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v);
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_v = v + 1 | 0;
                          $copy_v1 = v1.value1;
                          return;
                      };
                  };
                  if (v1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 294, column 3 - line 294, column 35: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(0);
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
              return (length(xs) - 1 | 0) - v | 0;
          })(findIndex(fn)(reverse(xs)));
      };
  };
  var filterM = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function (v2) {
                      return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function (v3) {
                          return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                              if (v2) {
                                  return new Data_List_Types.Cons(v1.value0, v3);
                              };
                              return v3;
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List line 396, column 1 - line 396, column 75: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 383, column 3 - line 383, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var intersectBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v2 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              return filter(function (x) {
                  return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
              })(v1);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var nubBy = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(v1.value0, nubBy(v)(filter(function (y) {
                  return !v(v1.value0)(y);
              })(v1.value1)));
          };
          throw new Error("Failed pattern match at Data.List line 578, column 1 - line 578, column 59: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Data_Eq.eq(dictEq));
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                  $copy_v = v.value1;
                  return;
              };
              $tco_done = true;
              return v;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return go;
  };
  var drop = function ($copy_v) {
      return function ($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
              if (v === 0) {
                  $tco_done = true;
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  $tco_var_v = v - 1 | 0;
                  $copy_v1 = v1.value1;
                  return;
              };
              throw new Error("Failed pattern match at Data.List line 504, column 1 - line 504, column 42: " + [ v.constructor.name, v1.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
          };
          return $tco_result;
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start | 0)(drop(start)(xs));
          };
      };
  };
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
                  return v2.value1;
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
              };
              throw new Error("Failed pattern match at Data.List line 605, column 1 - line 605, column 67: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var deleteAt = function (v) {
      return function (v1) {
          if (v === 0 && v1 instanceof Data_List_Types.Cons) {
              return new Data_Maybe.Just(v1.value1);
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                  return new Data_List_Types.Cons(v1.value0, v2);
              })(deleteAt(v - 1 | 0)(v1.value1));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
  var concat = function (v) {
      return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.id(Control_Category.categoryFn));
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  var alterAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                  return Data_Maybe.Just.create((function () {
                      var v3 = v1(v2.value0);
                      if (v3 instanceof Data_Maybe.Nothing) {
                          return v2.value1;
                      };
                      if (v3 instanceof Data_Maybe.Just) {
                          return new Data_List_Types.Cons(v3.value0, v2.value1);
                      };
                      throw new Error("Failed pattern match at Data.List line 345, column 3 - line 347, column 23: " + [ v3.constructor.name ]);
                  })());
              };
              if (v2 instanceof Data_List_Types.Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                      return new Data_List_Types.Cons(v2.value0, v3);
                  })(alterAt(v - 1 | 0)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($306) {
              return Data_Maybe.Just.create(f($306));
          });
      };
  };
  exports["alterAt"] = alterAt;
  exports["catMaybes"] = catMaybes;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["delete"] = $$delete;
  exports["deleteAt"] = deleteAt;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["filter"] = filter;
  exports["filterM"] = filterM;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["foldM"] = foldM;
  exports["fromFoldable"] = fromFoldable;
  exports["group"] = group;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["head"] = head;
  exports["index"] = index;
  exports["init"] = init;
  exports["insert"] = insert;
  exports["insertAt"] = insertAt;
  exports["insertBy"] = insertBy;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["last"] = last;
  exports["length"] = length;
  exports["many"] = many;
  exports["manyRec"] = manyRec;
  exports["mapMaybe"] = mapMaybe;
  exports["mapWithIndex"] = mapWithIndex;
  exports["modifyAt"] = modifyAt;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["null"] = $$null;
  exports["range"] = range;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
  exports["slice"] = slice;
  exports["snoc"] = snoc;
  exports["some"] = some;
  exports["someRec"] = someRec;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["span"] = span;
  exports["tail"] = tail;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["toUnfoldable"] = toUnfoldable;
  exports["transpose"] = transpose;
  exports["uncons"] = uncons;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["unsnoc"] = unsnoc;
  exports["unzip"] = unzip;
  exports["updateAt"] = updateAt;
  exports["zip"] = zip;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var uncons = function (v) {
      return {
          head: v.value0, 
          tail: v.value1
      };
  };
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($41) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
                  return new Data_Tuple.Tuple(rec.head, rec.tail);
              })(Data_List.uncons(xs));
          })(toList($41));
      };
  };
  var tail = function (v) {
      return v.value1;
  };
  var singleton = function ($42) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($42));
  };
  var length = function (v) {
      return 1 + Data_List.length(v.value1) | 0;
  };
  var last = function (v) {
      return Data_Maybe.fromMaybe(v.value0)(Data_List.last(v.value1));
  };
  var init = function (v) {
      return Data_Maybe.maybe(Data_List_Types.Nil.value)(function (v1) {
          return new Data_List_Types.Cons(v.value0, v1);
      })(Data_List.init(v.value1));
  };
  var head = function (v) {
      return v.value0;
  };
  var fromList = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
      };
      throw new Error("Failed pattern match at Data.List.NonEmpty line 36, column 1 - line 36, column 57: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return function ($43) {
          return fromList(Data_List.fromFoldable(dictFoldable)($43));
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindNonEmptyList));
  var appendFoldable = function (dictFoldable) {
      return function (v) {
          return function (ys) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(Data_List.fromFoldable(dictFoldable)(ys)));
          };
      };
  };
  exports["appendFoldable"] = appendFoldable;
  exports["concatMap"] = concatMap;
  exports["fromFoldable"] = fromFoldable;
  exports["fromList"] = fromList;
  exports["head"] = head;
  exports["init"] = init;
  exports["length"] = length;
  exports["singleton"] = singleton;
  exports["tail"] = tail;
  exports["toList"] = toList;
  exports["toUnfoldable"] = toUnfoldable;
  exports["uncons"] = uncons;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
    "use strict";

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charCodeAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charCodeAt(i)) : nothing;
        };
      };
    };
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_indexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_lastIndexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.lastIndexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._localeCompare = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (s1) {
          return function (s2) {
            var result = s1.localeCompare(s2);
            return result < 0 ? lt : result > 0 ? gt : eq;
          };
        };
      };
    };
  };

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2);
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.count = function (p) {
    return function (s) {
      var i = 0;
      while (i < s.length && p(s.charAt(i))) i++;
      return i;
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports._splitAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ?
                 just({ before: s.substring(0, i), after: s.substring(i) }) :
                 nothing;
        };
      };
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  exports.charCodeAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charCodeAt(i);
      throw new Error("Data.String.Unsafe.charCodeAt: Invalid index.");
    };
  };

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };

  exports.char = function (s) {
    if (s.length === 1) return s.charAt(0);
    throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["char"] = $foreign["char"];
  exports["charAt"] = $foreign.charAt;
  exports["charCodeAt"] = $foreign.charCodeAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Replacement = function (x) {
      return x;
  };
  var Pattern = function (x) {
      return x;
  };
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v), 
          tail: $foreign.drop(1)(v)
      });
  };
  var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var takeWhile = function (p) {
      return function (s) {
          return $foreign.take($foreign.count(p)(s))(s);
      };
  };
  var splitAt = $foreign._splitAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var showReplacement = new Data_Show.Show(function (v) {
      return "(Replacement " + (v + ")");
  });
  var showPattern = new Data_Show.Show(function (v) {
      return "(Pattern " + (v + ")");
  });
  var $$null = function (s) {
      return s === "";
  };
  var newtypeReplacement = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Replacement);
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);
  var localeCompare = $foreign._localeCompare(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  var lastIndexOf$prime = $foreign["_lastIndexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var lastIndexOf = $foreign._lastIndexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripSuffix = function (v) {
      return function (str) {
          var v1 = lastIndexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === ($foreign.length(str) - $foreign.length(v) | 0)) {
              return Data_Maybe.Just.create($foreign.take(v1.value0)(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = indexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var eqReplacement = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordReplacement = new Data_Ord.Ord(function () {
      return eqReplacement;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  var eqPattern = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordPattern = new Data_Ord.Ord(function () {
      return eqPattern;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  var dropWhile = function (p) {
      return function (s) {
          return $foreign.drop($foreign.count(p)(s))(s);
      };
  };
  var contains = function (pat) {
      return function ($48) {
          return Data_Maybe.isJust(indexOf(pat)($48));
      };
  };
  var charCodeAt = $foreign._charCodeAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["Pattern"] = Pattern;
  exports["Replacement"] = Replacement;
  exports["charAt"] = charAt;
  exports["charCodeAt"] = charCodeAt;
  exports["contains"] = contains;
  exports["dropWhile"] = dropWhile;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["localeCompare"] = localeCompare;
  exports["null"] = $$null;
  exports["splitAt"] = splitAt;
  exports["stripPrefix"] = stripPrefix;
  exports["stripSuffix"] = stripSuffix;
  exports["takeWhile"] = takeWhile;
  exports["toChar"] = toChar;
  exports["uncons"] = uncons;
  exports["eqPattern"] = eqPattern;
  exports["ordPattern"] = ordPattern;
  exports["newtypePattern"] = newtypePattern;
  exports["showPattern"] = showPattern;
  exports["eqReplacement"] = eqReplacement;
  exports["ordReplacement"] = ordReplacement;
  exports["newtypeReplacement"] = newtypeReplacement;
  exports["showReplacement"] = showReplacement;
  exports["count"] = $foreign.count;
  exports["drop"] = $foreign.drop;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["joinWith"] = $foreign.joinWith;
  exports["length"] = $foreign.length;
  exports["replace"] = $foreign.replace;
  exports["replaceAll"] = $foreign.replaceAll;
  exports["singleton"] = $foreign.singleton;
  exports["split"] = $foreign.split;
  exports["take"] = $foreign.take;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
  exports["trim"] = $foreign.trim;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (v.value0 + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof JSONError) {
          return "(JSONError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Data.Foreign line 64, column 1 - line 64, column 47: " + [ v.constructor.name ]);
  });
  var renderForeignError = function (v) {
      if (v instanceof ForeignError) {
          return v.value0;
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + Data_Show.show(showForeignError)(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + Data_Show.show(showForeignError)(v.value1)));
      };
      if (v instanceof JSONError) {
          return "JSON error: " + v.value0;
      };
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      throw new Error("Failed pattern match at Data.Foreign line 74, column 1 - line 74, column 45: " + [ v.constructor.name ]);
  };
  var readUndefined = function (value) {
      if ($foreign.isUndefined(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
      };
      if (Data_Boolean.otherwise) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
      };
      throw new Error("Failed pattern match at Data.Foreign line 155, column 1 - line 155, column 46: " + [ value.constructor.name ]);
  };
  var readNullOrUndefined = function (value) {
      if ($foreign.isNull(value) || $foreign.isUndefined(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
      };
      if (Data_Boolean.otherwise) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
      };
      throw new Error("Failed pattern match at Data.Foreign line 160, column 1 - line 160, column 52: " + [ value.constructor.name ]);
  };
  var readNull = function (value) {
      if ($foreign.isNull(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
      };
      if (Data_Boolean.otherwise) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Data_Maybe.Just(value));
      };
      throw new Error("Failed pattern match at Data.Foreign line 150, column 1 - line 150, column 41: " + [ value.constructor.name ]);
  };
  var fail = function ($121) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($121));
  };
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
      };
      if (Data_Boolean.otherwise) {
          return fail(new TypeMismatch("array", $foreign.tagOf(value)));
      };
      throw new Error("Failed pattern match at Data.Foreign line 145, column 1 - line 145, column 42: " + [ value.constructor.name ]);
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 104, column 1 - line 104, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
      var fromNumber = function ($122) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($122));
      };
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
  };
  var readString = unsafeReadTagged("String");
  var readChar = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Char", $foreign.tagOf(value))));
      var fromString = function ($123) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_String.toChar($123));
      };
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromString))(readString(value));
  };
  var eqForeignError = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof ForeignError && y instanceof ForeignError) {
              return x.value0 === y.value0;
          };
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
              return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
          };
          if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
              return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
          };
          if (x instanceof JSONError && y instanceof JSONError) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var ordForeignError = new Data_Ord.Ord(function () {
      return eqForeignError;
  }, function (x) {
      return function (y) {
          if (x instanceof ForeignError && y instanceof ForeignError) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof ForeignError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ForeignError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof TypeMismatch) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof TypeMismatch) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
              var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
          };
          if (x instanceof ErrorAtIndex) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ErrorAtIndex) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
          };
          if (x instanceof ErrorAtProperty) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ErrorAtProperty) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof JSONError && y instanceof JSONError) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          throw new Error("Failed pattern match at Data.Foreign line 62, column 8 - line 62, column 52: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["fail"] = fail;
  exports["readArray"] = readArray;
  exports["readBoolean"] = readBoolean;
  exports["readChar"] = readChar;
  exports["readInt"] = readInt;
  exports["readNull"] = readNull;
  exports["readNullOrUndefined"] = readNullOrUndefined;
  exports["readNumber"] = readNumber;
  exports["readString"] = readString;
  exports["readUndefined"] = readUndefined;
  exports["renderForeignError"] = renderForeignError;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["eqForeignError"] = eqForeignError;
  exports["ordForeignError"] = ordForeignError;
  exports["showForeignError"] = showForeignError;
  exports["isArray"] = $foreign.isArray;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
  exports["tagOf"] = $foreign.tagOf;
  exports["toForeign"] = $foreign.toForeign;
  exports["typeOf"] = $foreign.typeOf;
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var EventType = function (x) {
      return x;
  };
  var wheelEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var uiEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var touchEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var readWheelEvent = Data_Foreign.unsafeReadTagged("WheelEvent");
  var readUIEvent = Data_Foreign.unsafeReadTagged("UIEvent");
  var readTouchEvent = Data_Foreign.unsafeReadTagged("TouchEvent");
  var readProgressEvent = Data_Foreign.unsafeReadTagged("ProgressEvent");
  var readMouseEvent = Data_Foreign.unsafeReadTagged("MouseEvent");
  var readKeyboardEvent = Data_Foreign.unsafeReadTagged("KeyboardEvent");
  var readInputEvent = Data_Foreign.unsafeReadTagged("InputEvent");
  var readFocusEvent = Data_Foreign.unsafeReadTagged("FocusEvent");
  var readEventTarget = $foreign._readEventTarget(Data_Either.Left.create)(Data_Either.Right.create);
  var readCustomEvent = Data_Foreign.unsafeReadTagged("CustomEvent");
  var readCompositionEvent = Data_Foreign.unsafeReadTagged("CompositionEvent");
  var readClipboardEvent = Data_Foreign.unsafeReadTagged("ClipboardEvent");
  var progressEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var ordEventType = Data_Ord.ordString;
  var newtypeEventType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, EventType);
  var mouseEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var keyboardEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var inputEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var focusEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var eqEventType = Data_Eq.eqString;
  var customEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var compositionEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var clipboardEventToEvent = Unsafe_Coerce.unsafeCoerce;
  exports["EventType"] = EventType;
  exports["clipboardEventToEvent"] = clipboardEventToEvent;
  exports["compositionEventToEvent"] = compositionEventToEvent;
  exports["customEventToEvent"] = customEventToEvent;
  exports["focusEventToEvent"] = focusEventToEvent;
  exports["inputEventToEvent"] = inputEventToEvent;
  exports["keyboardEventToEvent"] = keyboardEventToEvent;
  exports["mouseEventToEvent"] = mouseEventToEvent;
  exports["progressEventToEvent"] = progressEventToEvent;
  exports["readClipboardEvent"] = readClipboardEvent;
  exports["readCompositionEvent"] = readCompositionEvent;
  exports["readCustomEvent"] = readCustomEvent;
  exports["readEventTarget"] = readEventTarget;
  exports["readFocusEvent"] = readFocusEvent;
  exports["readInputEvent"] = readInputEvent;
  exports["readKeyboardEvent"] = readKeyboardEvent;
  exports["readMouseEvent"] = readMouseEvent;
  exports["readProgressEvent"] = readProgressEvent;
  exports["readTouchEvent"] = readTouchEvent;
  exports["readUIEvent"] = readUIEvent;
  exports["readWheelEvent"] = readWheelEvent;
  exports["touchEventToEvent"] = touchEventToEvent;
  exports["uiEventToEvent"] = uiEventToEvent;
  exports["wheelEventToEvent"] = wheelEventToEvent;
  exports["newtypeEventType"] = newtypeEventType;
  exports["eqEventType"] = eqEventType;
  exports["ordEventType"] = ordEventType;
})(PS["DOM.Event.Types"] = PS["DOM.Event.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var transitionEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var readTransitionEvent = Data_Foreign.unsafeReadTagged("TransitionEvent");
  exports["readTransitionEvent"] = readTransitionEvent;
  exports["transitionEventToEvent"] = transitionEventToEvent;
})(PS["DOM.CSS.Event.Types"] = PS["DOM.CSS.Event.Types"] || {});
(function(exports) {
    "use strict";

  exports.clipboardData = function (e) {
    return e.clipboardData;
  };
})(PS["DOM.Event.ClipboardEvent"] = PS["DOM.Event.ClipboardEvent"] || {});
(function(exports) {
    "use strict";

  exports._files = function (dataTransfer) {
    return dataTransfer.files;
  };

  exports.types = function (dataTransfer) {
    return dataTransfer.types;
  };

  exports.getDataImpl = function (format) {
    return function (dataTransfer) {
      return function () {
        return dataTransfer.getData(format);
      };
    };
  };

  exports.setDataImpl = function (format) {
    return function (data) {
      return function (dataTransfer) {
        return function () {
          return dataTransfer.setData(format, data);
        };
      };
    };
  };
})(PS["DOM.HTML.Event.DataTransfer"] = PS["DOM.HTML.Event.DataTransfer"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var readFileList = Data_Foreign.unsafeReadTagged("FileList");
  var fileToBlob = Unsafe_Coerce.unsafeCoerce;
  var fileReaderToEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["fileReaderToEventTarget"] = fileReaderToEventTarget;
  exports["fileToBlob"] = fileToBlob;
  exports["readFileList"] = readFileList;
})(PS["DOM.File.Types"] = PS["DOM.File.Types"] || {});
(function(exports) {
    "use strict";

  // module Data.Generic

  exports.zipAll = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        for (var i = 0; i < l; i++) {
          if (!f(xs[i])(ys[i])) {
            return false;
          }
        }
        return true;
      };
    };
  };

  exports.zipCompare = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var o = f(xs[i])(ys[i]);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ?
      replicate :
      replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    // jshint maxparams: 2
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.peekSTArrayImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.pokeSTArray = function (xs) {
    return function (i) {
      return function (a) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.spliceSTArray = function (xs) {
    return function (i) {
      return function (howMany) {
        return function (bs) {
          return function () {
            return xs.splice.apply(xs, [i, howMany].concat(bs));
          };
        };
      };
    };
  };

  exports.copyImpl = function (xs) {
    return function () {
      return xs.slice();
    };
  };

  exports.toAssocArray = function (xs) {
    return function () {
      var n = xs.length;
      var as = new Array(n);
      for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
      return as;
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var unsafeFreeze = function ($0) {
      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Unsafe_Coerce.unsafeCoerce($0));
  };
  var thaw = $foreign.copyImpl;
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  var peekSTArray = $foreign.peekSTArrayImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var freeze = $foreign.copyImpl;
  exports["freeze"] = freeze;
  exports["peekSTArray"] = peekSTArray;
  exports["pushSTArray"] = pushSTArray;
  exports["thaw"] = thaw;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["pokeSTArray"] = $foreign.pokeSTArray;
  exports["pushAllSTArray"] = $foreign.pushAllSTArray;
  exports["runSTArray"] = $foreign.runSTArray;
  exports["spliceSTArray"] = $foreign.spliceSTArray;
  exports["toAssocArray"] = $foreign.toAssocArray;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];        
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var v1 = Control_Monad_ST.readSTRef(v.value1)();
          return v.value0(v1);
      };
  };
  var next = function (v) {
      return function __do() {
          var v1 = Control_Monad_ST.readSTRef(v.value1)();
          var v2 = Control_Monad_ST.modifySTRef(v.value1)(function (v2) {
              return v2 + 1 | 0;
          })();
          return v.value0(v1);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var v = Control_Monad_ST.newSTRef(false)();
                  while (Data_Functor.map(Control_Monad_Eff.functorEff)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST.readSTRef(v))()) {
                      (function __do() {
                          var v1 = peek(iter)();
                          if (v1 instanceof Data_Maybe.Just && p(v1.value0)) {
                              var v2 = Data_Array_ST.pushSTArray(array)(v1.value0)();
                              return Data_Functor["void"](Control_Monad_Eff.functorEff)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v)(true))();
                      })();
                  };
                  return {};
              };
          };
      };
  };
  var pushAll = pushWhile(Data_Function["const"](true));
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Iterator.create(f))(Control_Monad_ST.newSTRef(0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var v = Control_Monad_ST.newSTRef(false)();
              while (Data_Functor.map(Control_Monad_Eff.functorEff)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST.readSTRef(v))()) {
                  (function __do() {
                      var v1 = next(iter)();
                      if (v1 instanceof Data_Maybe.Just) {
                          return f(v1.value0)();
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v)(true))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator line 39, column 5 - line 41, column 46: " + [ v1.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  var exhausted = function ($27) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Maybe.isNothing)(peek($27));
  };
  exports["exhausted"] = exhausted;
  exports["iterate"] = iterate;
  exports["iterator"] = iterator;
  exports["next"] = next;
  exports["peek"] = peek;
  exports["pushAll"] = pushAll;
  exports["pushWhile"] = pushWhile;
})(PS["Data.Array.ST.Iterator"] = PS["Data.Array.ST.Iterator"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unzip = $foreign["uncons'"](function (v) {
      return new Data_Tuple.Tuple([  ], [  ]);
  })(function (v) {
      return function (ts) {
          var v1 = unzip(ts);
          return new Data_Tuple.Tuple($foreign.cons(v.value0)(v1.value0), $foreign.cons(v.value1)(v1.value1));
      };
  });
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array line 135, column 3 - line 137, column 26: " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 462, column 15 - line 467, column 1: " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubBy = function (eq) {
      return function (xs) {
          var v = uncons(xs);
          if (v instanceof Data_Maybe.Just) {
              return $foreign.cons(v.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                  return !eq(v.value0.head)(y);
              })(v.value0.tail)));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          throw new Error("Failed pattern match at Data.Array line 570, column 3 - line 572, column 18: " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Data_Eq.eq(dictEq));
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };
  var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array line 247, column 1 - line 247, column 45: " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var unsnoc = function (xs) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return function (v1) {
              return {
                  init: v, 
                  last: v1
              };
          };
      })(init(xs)))(last(xs));
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var span = function (p) {
      return function (arr) {
          var go = function ($copy_i) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i) {
                  var v = index(arr)(i);
                  if (v instanceof Data_Maybe.Just) {
                      var $64 = p(v.value0);
                      if ($64) {
                          $copy_i = i + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return new Data_Maybe.Just(i);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Array line 528, column 5 - line 530, column 25: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_i);
              };
              return $tco_result;
          };
          var breakIndex = go(0);
          if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
              return {
                  init: [  ], 
                  rest: arr
              };
          };
          if (breakIndex instanceof Data_Maybe.Just) {
              return {
                  init: $foreign.slice(0)(breakIndex.value0)(arr), 
                  rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
              };
          };
          if (breakIndex instanceof Data_Maybe.Nothing) {
              return {
                  init: arr, 
                  rest: [  ]
              };
          };
          throw new Error("Failed pattern match at Data.Array line 515, column 3 - line 521, column 30: " + [ breakIndex.constructor.name ]);
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return Control_Monad_ST.pureST(function __do() {
              var v = Data_Array_ST.emptySTArray();
              var v1 = Data_Array_ST_Iterator.iterator(function (v1) {
                  return index(xs)(v1);
              })();
              Data_Array_ST_Iterator.iterate(v1)(function (x) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                      var v2 = Data_Array_ST.emptySTArray();
                      Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2)();
                      var v3 = Data_Array_ST.unsafeFreeze(v2)();
                      return Data_Array_ST.pushSTArray(v)(new Data_NonEmpty.NonEmpty(x, v3))();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(v)();
          });
      };
  };
  var group = function (dictEq) {
      return function (xs) {
          return groupBy(Data_Eq.eq(dictEq))(xs);
      };
  };
  var group$prime = function (dictOrd) {
      return function ($85) {
          return group(dictOrd.Eq0())(sort(dictOrd)($85));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldRecM = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (array) {
                  var go = function (res) {
                      return function (i) {
                          if (i >= $foreign.length(array)) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(res));
                          };
                          if (Data_Boolean.otherwise) {
                              return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(res)(unsafeIndex()(array)(i)))(function (v) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                      a: v, 
                                      b: i + 1 | 0
                                  }));
                              });
                          };
                          throw new Error("Failed pattern match at Data.Array line 671, column 3 - line 675, column 42: " + [ res.constructor.name, i.constructor.name ]);
                      };
                  };
                  return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
              };
          };
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(a);
              })(function (b) {
                  return function (bs) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBy = function (cmp) {
      return function (x) {
          return function (ys) {
              var i = Data_Maybe.maybe(0)(function (v) {
                  return v + 1 | 0;
              })(findLastIndex(function (y) {
                  return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
              })(ys));
              return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return $foreign.filter(function (x) {
                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($86) {
          return Data_Maybe.maybe([  ])(singleton)(f($86));
      });
  };
  var filterA = function (dictApplicative) {
      return function (p) {
          return function ($87) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
                  if (v.value1) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  return Data_Maybe.Nothing.value;
              }))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
              })($87));
          };
      };
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  var alterAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  var v = f(x);
                  if (v instanceof Data_Maybe.Nothing) {
                      return deleteAt(i)(xs);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return updateAt(i)(v.value0)(xs);
                  };
                  throw new Error("Failed pattern match at Data.Array line 388, column 10 - line 390, column 32: " + [ v.constructor.name ]);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  exports["alterAt"] = alterAt;
  exports["catMaybes"] = catMaybes;
  exports["concatMap"] = concatMap;
  exports["delete"] = $$delete;
  exports["deleteAt"] = deleteAt;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["dropWhile"] = dropWhile;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["filterA"] = filterA;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["foldM"] = foldM;
  exports["foldRecM"] = foldRecM;
  exports["fromFoldable"] = fromFoldable;
  exports["group"] = group;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["head"] = head;
  exports["index"] = index;
  exports["init"] = init;
  exports["insert"] = insert;
  exports["insertAt"] = insertAt;
  exports["insertBy"] = insertBy;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["last"] = last;
  exports["many"] = many;
  exports["mapMaybe"] = mapMaybe;
  exports["mapWithIndex"] = mapWithIndex;
  exports["modifyAt"] = modifyAt;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["null"] = $$null;
  exports["singleton"] = singleton;
  exports["some"] = some;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["span"] = span;
  exports["tail"] = tail;
  exports["takeWhile"] = takeWhile;
  exports["toUnfoldable"] = toUnfoldable;
  exports["uncons"] = uncons;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["unsafeIndex"] = unsafeIndex;
  exports["unsnoc"] = unsnoc;
  exports["unzip"] = unzip;
  exports["updateAt"] = updateAt;
  exports["zip"] = zip;
  exports["zipWithA"] = zipWithA;
  exports["concat"] = $foreign.concat;
  exports["cons"] = $foreign.cons;
  exports["drop"] = $foreign.drop;
  exports["filter"] = $foreign.filter;
  exports["length"] = $foreign.length;
  exports["partition"] = $foreign.partition;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["reverse"] = $foreign.reverse;
  exports["slice"] = $foreign.slice;
  exports["snoc"] = $foreign.snoc;
  exports["take"] = $foreign.take;
  exports["zipWith"] = $foreign.zipWith;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Proxy3 = (function () {
      function Proxy3() {

      };
      Proxy3.value = new Proxy3();
      return Proxy3;
  })();
  var Proxy2 = (function () {
      function Proxy2() {

      };
      Proxy2.value = new Proxy2();
      return Proxy2;
  })();
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
  exports["Proxy2"] = Proxy2;
  exports["Proxy3"] = Proxy3;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];
  var Type_Proxy = PS["Type.Proxy"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigRecord = (function () {
      function SigRecord(value0) {
          this.value0 = value0;
      };
      SigRecord.create = function (value0) {
          return new SigRecord(value0);
      };
      return SigRecord;
  })();
  var SigNumber = (function () {
      function SigNumber() {

      };
      SigNumber.value = new SigNumber();
      return SigNumber;
  })();
  var SigBoolean = (function () {
      function SigBoolean() {

      };
      SigBoolean.value = new SigBoolean();
      return SigBoolean;
  })();
  var SigInt = (function () {
      function SigInt() {

      };
      SigInt.value = new SigInt();
      return SigInt;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var SigChar = (function () {
      function SigChar() {

      };
      SigChar.value = new SigChar();
      return SigChar;
  })();
  var SigArray = (function () {
      function SigArray(value0) {
          this.value0 = value0;
      };
      SigArray.create = function (value0) {
          return new SigArray(value0);
      };
      return SigArray;
  })();
  var SigUnit = (function () {
      function SigUnit() {

      };
      SigUnit.value = new SigUnit();
      return SigUnit;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  };
  var showSuspended = function (dictShow) {
      return function (e) {
          return "\\_ -> " + Data_Show.show(dictShow)(e(Data_Unit.unit));
      };
  };
  var showArray = function (v) {
      return function (v1) {
          if (v1.length === 0) {
              return "[]";
          };
          return "[ " + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_Functor.functorArray)(v)(v1)) + " ]");
      };
  };
  var showGenericSpine = new Data_Show.Show(function (v) {
      if (v instanceof SUnit) {
          return "SUnit";
      };
      if (v instanceof SChar) {
          return "SChar " + Data_Show.show(Data_Show.showChar)(v.value0);
      };
      if (v instanceof SString) {
          return "SString " + Data_Show.show(Data_Show.showString)(v.value0);
      };
      if (v instanceof SBoolean) {
          return "SBoolean " + Data_Show.show(Data_Show.showBoolean)(v.value0);
      };
      if (v instanceof SNumber) {
          return "SNumber " + Data_Show.show(Data_Show.showNumber)(v.value0);
      };
      if (v instanceof SInt) {
          return "SInt " + Data_Show.show(Data_Show.showInt)(v.value0);
      };
      if (v instanceof SArray) {
          return "SArray " + showArray(showSuspended(showGenericSpine))(v.value0);
      };
      if (v instanceof SProd) {
          return "SProd " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + showArray(showSuspended(showGenericSpine))(v.value1)));
      };
      if (v instanceof SRecord) {
          var showElt = function (v1) {
              return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ "{ recLabel: ", Data_Show.show(Data_Show.showString)(v1.recLabel), ", recValue: ", showSuspended(showGenericSpine)(v1.recValue), " }" ]);
          };
          return "SRecord " + showArray(showElt)(v.value0);
      };
      throw new Error("Failed pattern match at Data.Generic line 270, column 1 - line 270, column 47: " + [ v.constructor.name ]);
  });
  var orderingToInt = function (v) {
      if (v instanceof Data_Ordering.EQ) {
          return 0;
      };
      if (v instanceof Data_Ordering.LT) {
          return 1;
      };
      if (v instanceof Data_Ordering.GT) {
          return -1 | 0;
      };
      throw new Error("Failed pattern match at Data.Generic line 538, column 17 - line 541, column 10: " + [ v.constructor.name ]);
  };
  var genericVoid = new Generic(function (v) {
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return new SigProd("Data.Void.Void", [  ]);
  }, Data_Void.absurd);
  var genericUnit = new Generic(function (v) {
      if (v instanceof SUnit) {
          return new Data_Maybe.Just(Data_Unit.unit);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigUnit.value;
  }, function (v) {
      return SUnit.value;
  });
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, SString.create);
  var genericOrdering = new Generic(function (v) {
      if (v instanceof SProd && (v.value0 === "Data.Ordering.LT" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
      };
      if (v instanceof SProd && (v.value0 === "Data.Ordering.EQ" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      if (v instanceof SProd && (v.value0 === "Data.Ordering.GT" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return new SigProd("Data.Ordering.Ordering", [ {
          sigConstructor: "Data.Ordering.LT", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Ordering.EQ", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Ordering.GT", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return new SProd("Data.Ordering.LT", [  ]);
      };
      if (v instanceof Data_Ordering.EQ) {
          return new SProd("Data.Ordering.EQ", [  ]);
      };
      if (v instanceof Data_Ordering.GT) {
          return new SProd("Data.Ordering.GT", [  ]);
      };
      throw new Error("Failed pattern match at Data.Generic line 218, column 13 - line 221, column 38: " + [ v.constructor.name ]);
  });
  var genericNumber = new Generic(function (v) {
      if (v instanceof SNumber) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigNumber.value;
  }, SNumber.create);
  var genericInt = new Generic(function (v) {
      if (v instanceof SInt) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigInt.value;
  }, SInt.create);
  var genericChar = new Generic(function (v) {
      if (v instanceof SChar) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigChar.value;
  }, SChar.create);
  var genericBool = new Generic(function (v) {
      if (v instanceof SBoolean) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigBoolean.value;
  }, SBoolean.create);
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var force = function (f) {
      return f(Data_Unit.unit);
  };
  var genericArray = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SArray) {
              return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(function ($310) {
                  return fromSpine(dictGeneric)(force($310));
              })(v.value0);
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var lowerProxy = function (v) {
              return Type_Proxy["Proxy"].value;
          };
          return new SigArray(function (v) {
              return toSignature(dictGeneric)(lowerProxy(x));
          });
      }, function ($311) {
          return SArray.create(Data_Functor.map(Data_Functor.functorArray)(function (x) {
              return function (v) {
                  return toSpine(dictGeneric)(x);
              };
          })($311));
      });
  };
  var genericEither = function (dictGeneric) {
      return function (dictGeneric1) {
          return new Generic(function (v) {
              if (v instanceof SProd && (v.value0 === "Data.Either.Left" && v.value1.length === 1)) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Left.create)(fromSpine(dictGeneric)(force(v["value1"][0])));
              };
              if (v instanceof SProd && (v.value0 === "Data.Either.Right" && v.value1.length === 1)) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Right.create)(fromSpine(dictGeneric1)(force(v["value1"][0])));
              };
              return Data_Maybe.Nothing.value;
          }, function (x) {
              var rproxy = function (v) {
                  return Type_Proxy["Proxy"].value;
              };
              var lproxy = function (v) {
                  return Type_Proxy["Proxy"].value;
              };
              return new SigProd("Data.Either.Either", [ {
                  sigConstructor: "Data.Either.Left", 
                  sigValues: [ function (v) {
                      return toSignature(dictGeneric)(lproxy(x));
                  } ]
              }, {
                  sigConstructor: "Data.Either.Right", 
                  sigValues: [ function (v) {
                      return toSignature(dictGeneric1)(rproxy(x));
                  } ]
              } ]);
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return new SProd("Data.Either.Left", [ function (v1) {
                      return toSpine(dictGeneric)(v.value0);
                  } ]);
              };
              if (v instanceof Data_Either.Right) {
                  return new SProd("Data.Either.Right", [ function (v1) {
                      return toSpine(dictGeneric1)(v.value0);
                  } ]);
              };
              throw new Error("Failed pattern match at Data.Generic line 180, column 1 - line 180, column 73: " + [ v.constructor.name ]);
          });
      };
  };
  var genericIdentity = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SProd && (v.value0 === "Data.Identity.Identity" && v.value1.length === 1)) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Identity.Identity)(fromSpine(dictGeneric)(force(v["value1"][0])));
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var iproxy = function (v) {
              return Type_Proxy["Proxy"].value;
          };
          return new SigProd("Data.Identity.Identity", [ {
              sigConstructor: "Data.Identity.Identity", 
              sigValues: [ function (v) {
                  return toSignature(dictGeneric)(iproxy(x));
              } ]
          } ]);
      }, function (v) {
          return new SProd("Data.Identity.Identity", [ function (v1) {
              return toSpine(dictGeneric)(v);
          } ]);
      });
  };
  var genericList = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SProd && (v.value0 === "Data.List.Types.Cons" && v.value1.length === 2)) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Types.Cons.create)(fromSpine(dictGeneric)(force(v["value1"][0]))))(fromSpine(genericList(dictGeneric))(force(v["value1"][1])));
          };
          if (v instanceof SProd && (v.value0 === "Data.List.Types.Nil" && v.value1.length === 0)) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_List_Types.Nil.value);
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var headProxy = function (v) {
              return Type_Proxy["Proxy"].value;
          };
          return new SigProd("Data.List.Types.List", [ {
              sigConstructor: "Data.List.Types.Cons", 
              sigValues: [ function (v) {
                  return toSignature(dictGeneric)(headProxy(x));
              }, function (v) {
                  return toSignature(genericList(dictGeneric))(x);
              } ]
          }, {
              sigConstructor: "Data.List.Types.Nil", 
              sigValues: [  ]
          } ]);
      }, function (v) {
          if (v instanceof Data_List_Types.Cons) {
              return new SProd("Data.List.Types.Cons", [ function (v1) {
                  return toSpine(dictGeneric)(v.value0);
              }, function (v1) {
                  return toSpine(genericList(dictGeneric))(v.value1);
              } ]);
          };
          if (v instanceof Data_List_Types.Nil) {
              return new SProd("Data.List.Types.Nil", [  ]);
          };
          throw new Error("Failed pattern match at Data.Generic line 116, column 1 - line 116, column 58: " + [ v.constructor.name ]);
      });
  };
  var genericMaybe = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SProd && (v.value0 === "Data.Maybe.Just" && v.value1.length === 1)) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(fromSpine(dictGeneric)(force(v["value1"][0])));
          };
          if (v instanceof SProd && (v.value0 === "Data.Maybe.Nothing" && v.value1.length === 0)) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Maybe.Nothing.value);
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var mbProxy = function (v) {
              return Type_Proxy["Proxy"].value;
          };
          return new SigProd("Data.Maybe.Maybe", [ {
              sigConstructor: "Data.Maybe.Just", 
              sigValues: [ function (v) {
                  return toSignature(dictGeneric)(mbProxy(x));
              } ]
          }, {
              sigConstructor: "Data.Maybe.Nothing", 
              sigValues: [  ]
          } ]);
      }, function (v) {
          if (v instanceof Data_Maybe.Just) {
              return new SProd("Data.Maybe.Just", [ function (v1) {
                  return toSpine(dictGeneric)(v.value0);
              } ]);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return new SProd("Data.Maybe.Nothing", [  ]);
          };
          throw new Error("Failed pattern match at Data.Generic line 160, column 1 - line 160, column 56: " + [ v.constructor.name ]);
      });
  };
  var genericNonEmpty = function (dictGeneric) {
      return function (dictGeneric1) {
          return new Generic(function (v) {
              if (v instanceof SProd && (v.value0 === "Data.NonEmpty.NonEmpty" && v.value1.length === 2)) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_NonEmpty.NonEmpty.create)(fromSpine(dictGeneric1)(force(v["value1"][0]))))(fromSpine(dictGeneric)(force(v["value1"][1])));
              };
              return Data_Maybe.Nothing.value;
          }, function (x) {
              var tailProxy = function (v) {
                  return Type_Proxy["Proxy"].value;
              };
              var headProxy = function (v) {
                  return Type_Proxy["Proxy"].value;
              };
              return new SigProd("Data.NonEmpty.NonEmpty", [ {
                  sigConstructor: "Data.NonEmpty.NonEmpty", 
                  sigValues: [ function (v) {
                      return toSignature(dictGeneric1)(headProxy(x));
                  }, function (v) {
                      return toSignature(dictGeneric)(tailProxy(x));
                  } ]
              } ]);
          }, function (v) {
              return new SProd("Data.NonEmpty.NonEmpty", [ function (v1) {
                  return toSpine(dictGeneric1)(v.value0);
              }, function (v1) {
                  return toSpine(dictGeneric)(v.value1);
              } ]);
          });
      };
  };
  var genericNonEmptyList = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SProd && (v.value0 === "Data.List.Types.NonEmptyList" && v.value1.length === 1)) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Types.NonEmptyList)(fromSpine(genericNonEmpty(genericList(dictGeneric))(dictGeneric))(force(v["value1"][0])));
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var listProxy = function (v) {
              return Type_Proxy["Proxy"].value;
          };
          return new SigProd("Data.List.Types.NonEmptyList", [ {
              sigConstructor: "Data.List.Types.NonEmptyList", 
              sigValues: [ function (v) {
                  return toSignature(genericList(dictGeneric))(listProxy(x));
              } ]
          } ]);
      }, function (v) {
          return new SProd("Data.List.Types.NonEmptyList", [ function (v1) {
              return toSpine(genericNonEmpty(genericList(dictGeneric))(dictGeneric))(v);
          } ]);
      });
  };
  var genericShowPrec = function (v) {
      return function (v1) {
          if (v1 instanceof SProd) {
              if (Data_Array["null"](v1.value1)) {
                  return v1.value0;
              };
              if (Data_Boolean.otherwise) {
                  var showParen = function (v2) {
                      return function (x) {
                          if (!v2) {
                              return x;
                          };
                          if (v2) {
                              return "(" + (x + ")");
                          };
                          throw new Error("Failed pattern match at Data.Generic line 467, column 7 - line 467, column 28: " + [ v2.constructor.name, x.constructor.name ]);
                      };
                  };
                  return showParen(v > 10)(v1.value0 + (" " + Data_String.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                      return genericShowPrec(11)(force(x));
                  })(v1.value1))));
              };
          };
          if (v1 instanceof SRecord) {
              var showLabelPart = function (x) {
                  return x.recLabel + (": " + genericShowPrec(0)(force(x.recValue)));
              };
              return "{" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(showLabelPart)(v1.value0)) + "}");
          };
          if (v1 instanceof SBoolean) {
              return Data_Show.show(Data_Show.showBoolean)(v1.value0);
          };
          if (v1 instanceof SInt) {
              return Data_Show.show(Data_Show.showInt)(v1.value0);
          };
          if (v1 instanceof SNumber) {
              return Data_Show.show(Data_Show.showNumber)(v1.value0);
          };
          if (v1 instanceof SString) {
              return Data_Show.show(Data_Show.showString)(v1.value0);
          };
          if (v1 instanceof SChar) {
              return Data_Show.show(Data_Show.showChar)(v1.value0);
          };
          if (v1 instanceof SArray) {
              return "[" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                  return genericShowPrec(0)(force(x));
              })(v1.value0)) + "]");
          };
          if (v1 instanceof SUnit) {
              return "unit";
          };
          throw new Error("Failed pattern match at Data.Generic line 460, column 1 - line 460, column 49: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var gShow = function (dictGeneric) {
      return function ($312) {
          return genericShowPrec(0)(toSpine(dictGeneric)($312));
      };
  };
  var genericTuple = function (dictGeneric) {
      return function (dictGeneric1) {
          return new Generic(function (v) {
              if (v instanceof SProd && (v.value0 === "Data.Tuple.Tuple" && v.value1.length === 2)) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(fromSpine(dictGeneric)(force(v["value1"][0]))))(fromSpine(dictGeneric1)(force(v["value1"][1])));
              };
              return Data_Maybe.Nothing.value;
          }, function (x) {
              var sndProxy = function (v) {
                  return Type_Proxy["Proxy"].value;
              };
              var fstProxy = function (v) {
                  return Type_Proxy["Proxy"].value;
              };
              return new SigProd("Data.Tuple.Tuple", [ {
                  sigConstructor: "Data.Tuple.Tuple", 
                  sigValues: [ function (v) {
                      return toSignature(dictGeneric)(fstProxy(x));
                  }, function (v) {
                      return toSignature(dictGeneric1)(sndProxy(x));
                  } ]
              } ]);
          }, function (v) {
              return new SProd("Data.Tuple.Tuple", [ function (v1) {
                  return toSpine(dictGeneric)(v.value0);
              }, function (v1) {
                  return toSpine(dictGeneric1)(v.value1);
              } ]);
          });
      };
  };
  var isValidSpine = function (v) {
      return function (v1) {
          if (v instanceof SigBoolean && v1 instanceof SBoolean) {
              return true;
          };
          if (v instanceof SigNumber && v1 instanceof SNumber) {
              return true;
          };
          if (v instanceof SigInt && v1 instanceof SInt) {
              return true;
          };
          if (v instanceof SigString && v1 instanceof SString) {
              return true;
          };
          if (v instanceof SigChar && v1 instanceof SChar) {
              return true;
          };
          if (v instanceof SigArray && v1 instanceof SArray) {
              return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function ($313) {
                  return isValidSpine(force(v.value0))(force($313));
              })(v1.value0);
          };
          if (v instanceof SigProd && v1 instanceof SProd) {
              var v2 = Data_Foldable.find(Data_Foldable.foldableArray)(function (alt) {
                  return alt.sigConstructor === v1.value0;
              })(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  return false;
              };
              if (v2 instanceof Data_Maybe.Just) {
                  return Data_Foldable.and(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Array.zipWith(function (sig) {
                      return function (spine) {
                          return isValidSpine(force(sig))(force(spine));
                      };
                  })(v2.value0.sigValues)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.Generic line 438, column 3 - line 444, column 15: " + [ v2.constructor.name ]);
          };
          if (v instanceof SigRecord && v1 instanceof SRecord) {
              return Data_Foldable.and(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Array.zipWith(function (sig) {
                  return function (val) {
                      return isValidSpine(force(sig.recValue))(force(val.recValue));
                  };
              })(Data_Array.sortBy(function (a) {
                  return function (b) {
                      return Data_Ord.compare(Data_Ord.ordString)(a.recLabel)(b.recLabel);
                  };
              })(v.value0))(Data_Array.sortBy(function (a) {
                  return function (b) {
                      return Data_Ord.compare(Data_Ord.ordString)(a.recLabel)(b.recLabel);
                  };
              })(v1.value0)));
          };
          if (v instanceof SigUnit && v1 instanceof SUnit) {
              return true;
          };
          return false;
      };
  };
  var showSignature = function (sig) {
      var needsParen = function (s) {
          if (s instanceof SigProd) {
              return true;
          };
          if (s instanceof SigRecord) {
              return true;
          };
          if (s instanceof SigNumber) {
              return false;
          };
          if (s instanceof SigBoolean) {
              return false;
          };
          if (s instanceof SigInt) {
              return false;
          };
          if (s instanceof SigString) {
              return false;
          };
          if (s instanceof SigChar) {
              return false;
          };
          if (s instanceof SigArray) {
              return true;
          };
          if (s instanceof SigUnit) {
              return false;
          };
          throw new Error("Failed pattern match at Data.Generic line 403, column 18 - line 412, column 21: " + [ s.constructor.name ]);
      };
      var paren = function (s) {
          if (needsParen(s)) {
              return "(" + (showSignature(s) + ")");
          };
          if (Data_Boolean.otherwise) {
              return showSignature(s);
          };
          throw new Error("Failed pattern match at Data.Generic line 399, column 3 - line 401, column 34: " + [ s.constructor.name ]);
      };
      return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)((function () {
          if (sig instanceof SigProd) {
              return [ "SigProd ", Data_Show.show(Data_Show.showString)(sig.value0), " ", showArray(showDataConstructor)(sig.value1) ];
          };
          if (sig instanceof SigRecord) {
              return [ "SigRecord ", showArray(showLabel)(sig.value0) ];
          };
          if (sig instanceof SigNumber) {
              return [ "SigNumber" ];
          };
          if (sig instanceof SigBoolean) {
              return [ "SigBoolean" ];
          };
          if (sig instanceof SigInt) {
              return [ "SigInt" ];
          };
          if (sig instanceof SigString) {
              return [ "SigString" ];
          };
          if (sig instanceof SigChar) {
              return [ "SigChar" ];
          };
          if (sig instanceof SigArray) {
              return [ "SigArray ", paren(force(sig.value0)) ];
          };
          if (sig instanceof SigUnit) {
              return [ "SigUnit" ];
          };
          throw new Error("Failed pattern match at Data.Generic line 386, column 10 - line 396, column 27: " + [ sig.constructor.name ]);
      })());
  };
  var showLabel = function (l) {
      return "{ recLabel: " + (Data_Show.show(Data_Show.showString)(l.recLabel) + (", recValue: " + (showSignature(force(l.recValue)) + " }")));
  };
  var showDataConstructor = function (dc) {
      return "{ sigConstructor: " + (Data_Show.show(Data_Show.showString)(dc.sigConstructor) + (", sigValues: " + (showArray(function ($314) {
          return showSignature(force($314));
      })(dc.sigValues) + " }")));
  };
  var showGenericSignature = new Data_Show.Show(showSignature);
  var eqThunk = function (dictEq) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)(force(x))(force(y));
          };
      };
  };
  var eqRecordSigs = function (dictEq) {
      return function (arr1) {
          return function (arr2) {
              var labelCompare = function (r1) {
                  return function (r2) {
                      return Data_Ord.compare(Data_Ord.ordString)(r1.recLabel)(r2.recLabel);
                  };
              };
              var sorted1 = Data_Array.sortBy(labelCompare)(arr1);
              var sorted2 = Data_Array.sortBy(labelCompare)(arr2);
              var doCmp = function (x) {
                  return function (y) {
                      return x.recLabel === y.recLabel && Data_Eq.eq(dictEq)(force(x.recValue))(force(y.recValue));
                  };
              };
              return Data_Array.length(arr1) === Data_Array.length(arr2) && $foreign.zipAll(doCmp)(sorted1)(sorted2);
          };
      };
  };
  var eqGenericSpine = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value1)(v1.value1));
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              return eqRecordSigs(eqGenericSpine)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value0)(v1.value0);
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return true;
          };
          return false;
      };
  });
  var gEq = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(eqGenericSpine)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  var eqGenericSignature = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof SigProd && v1 instanceof SigProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(eqDataConstructor)(v.value1)(v1.value1));
          };
          if (v instanceof SigRecord && v1 instanceof SigRecord) {
              return eqRecordSigs(eqGenericSignature)(v.value0)(v1.value0);
          };
          if (v instanceof SigNumber && v1 instanceof SigNumber) {
              return true;
          };
          if (v instanceof SigBoolean && v1 instanceof SigBoolean) {
              return true;
          };
          if (v instanceof SigInt && v1 instanceof SigInt) {
              return true;
          };
          if (v instanceof SigString && v1 instanceof SigString) {
              return true;
          };
          if (v instanceof SigChar && v1 instanceof SigChar) {
              return true;
          };
          if (v instanceof SigArray && v1 instanceof SigArray) {
              return eqThunk(eqGenericSignature)(v.value0)(v1.value0);
          };
          if (v instanceof SigUnit && v1 instanceof SigUnit) {
              return true;
          };
          return false;
      };
  });
  var eqDataConstructor = function (p1) {
      return function (p2) {
          return p1.sigConstructor === p2.sigConstructor && $foreign.zipAll(eqThunk(eqGenericSignature))(p1.sigValues)(p2.sigValues);
      };
  };
  var compareThunk = function (dictOrd) {
      return function (x) {
          return function (y) {
              return orderingToInt(Data_Ord.compare(dictOrd)(force(x))(force(y)));
          };
      };
  };
  var ordGenericSpine = new Data_Ord.Ord(function () {
      return eqGenericSpine;
  }, function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              var v2 = Data_Ord.compare(Data_Ord.ordString)(v.value0)(v1.value0);
              if (v2 instanceof Data_Ordering.EQ) {
                  return Data_Ord.compare(Data_Ord.ordInt)(0)($foreign.zipCompare(compareThunk(ordGenericSpine))(v.value1)(v1.value1));
              };
              return v2;
          };
          if (v instanceof SProd) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SProd) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              var go = function (x) {
                  return function (y) {
                      var v2 = Data_Ord.compare(Data_Ord.ordString)(x.recLabel)(y.recLabel);
                      if (v2 instanceof Data_Ordering.EQ) {
                          return orderingToInt(Data_Ord.compare(ordGenericSpine)(force(x.recValue))(force(y.recValue)));
                      };
                      return orderingToInt(v2);
                  };
              };
              return Data_Ord.compare(Data_Ord.ordInt)(0)($foreign.zipCompare(go)(v.value0)(v1.value0));
          };
          if (v instanceof SRecord) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SRecord) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return Data_Ord.compare(Data_Ord.ordInt)(v.value0)(v1.value0);
          };
          if (v instanceof SInt) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SInt) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return Data_Ord.compare(Data_Ord.ordBoolean)(v.value0)(v1.value0);
          };
          if (v instanceof SBoolean) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SBoolean) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return Data_Ord.compare(Data_Ord.ordNumber)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SNumber) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return Data_Ord.compare(Data_Ord.ordString)(v.value0)(v1.value0);
          };
          if (v instanceof SString) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SString) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return Data_Ord.compare(Data_Ord.ordChar)(v.value0)(v1.value0);
          };
          if (v instanceof SChar) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SChar) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Ord.compare(Data_Ord.ordInt)(0)($foreign.zipCompare(compareThunk(ordGenericSpine))(v.value0)(v1.value0));
          };
          if (v instanceof SArray) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SArray) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Generic line 303, column 1 - line 303, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var gCompare = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Data_Ord.compare(ordGenericSpine)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  exports["SigProd"] = SigProd;
  exports["SigRecord"] = SigRecord;
  exports["SigNumber"] = SigNumber;
  exports["SigBoolean"] = SigBoolean;
  exports["SigInt"] = SigInt;
  exports["SigString"] = SigString;
  exports["SigChar"] = SigChar;
  exports["SigArray"] = SigArray;
  exports["SigUnit"] = SigUnit;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["gCompare"] = gCompare;
  exports["gEq"] = gEq;
  exports["gShow"] = gShow;
  exports["isValidSpine"] = isValidSpine;
  exports["showDataConstructor"] = showDataConstructor;
  exports["showSignature"] = showSignature;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericNumber"] = genericNumber;
  exports["genericInt"] = genericInt;
  exports["genericString"] = genericString;
  exports["genericChar"] = genericChar;
  exports["genericBool"] = genericBool;
  exports["genericArray"] = genericArray;
  exports["genericUnit"] = genericUnit;
  exports["genericVoid"] = genericVoid;
  exports["genericTuple"] = genericTuple;
  exports["genericList"] = genericList;
  exports["genericNonEmptyList"] = genericNonEmptyList;
  exports["genericMaybe"] = genericMaybe;
  exports["genericEither"] = genericEither;
  exports["genericIdentity"] = genericIdentity;
  exports["genericOrdering"] = genericOrdering;
  exports["genericNonEmpty"] = genericNonEmpty;
  exports["showGenericSpine"] = showGenericSpine;
  exports["eqGenericSpine"] = eqGenericSpine;
  exports["ordGenericSpine"] = ordGenericSpine;
  exports["eqGenericSignature"] = eqGenericSignature;
  exports["showGenericSignature"] = showGenericSignature;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MediaType = function (x) {
      return x;
  };
  var showMediaType = new Data_Show.Show(function (v) {
      return "(MediaType " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  var genericMediaType = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.MediaType.MediaType" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(MediaType))(Data_Generic.fromSpine(Data_Generic.genericString)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.MediaType.MediaType", [ {
          sigConstructor: "Data.MediaType.MediaType", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.MediaType.MediaType", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericString)(v);
      } ]);
  });
  var eqMediaType = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordMediaType = new Data_Ord.Ord(function () {
      return eqMediaType;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
  exports["eqMediaType"] = eqMediaType;
  exports["ordMediaType"] = ordMediaType;
  exports["genericMediaType"] = genericMediaType;
  exports["showMediaType"] = showMediaType;
})(PS["Data.MediaType"] = PS["Data.MediaType"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
    "use strict";

  // module Data.Function.Uncurried

  exports.mkFn0 = function (fn) {
    return function () {
      return fn({});
    };
  };

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };

  exports.mkFn3 = function (fn) {
    /* jshint maxparams: 3 */
    return function (a, b, c) {
      return fn(a)(b)(c);
    };
  };

  exports.mkFn4 = function (fn) {
    /* jshint maxparams: 4 */
    return function (a, b, c, d) {
      return fn(a)(b)(c)(d);
    };
  };

  exports.mkFn5 = function (fn) {
    /* jshint maxparams: 5 */
    return function (a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e);
    };
  };

  exports.mkFn6 = function (fn) {
    /* jshint maxparams: 6 */
    return function (a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f);
    };
  };

  exports.mkFn7 = function (fn) {
    /* jshint maxparams: 7 */
    return function (a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g);
    };
  };

  exports.mkFn8 = function (fn) {
    /* jshint maxparams: 8 */
    return function (a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h);
    };
  };

  exports.mkFn9 = function (fn) {
    /* jshint maxparams: 9 */
    return function (a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
    };
  };

  exports.mkFn10 = function (fn) {
    /* jshint maxparams: 10 */
    return function (a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
    };
  };

  exports.runFn0 = function (fn) {
    return fn();
  };

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  exports.runFn5 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };

  exports.runFn6 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return fn(a, b, c, d, e, f);
              };
            };
          };
        };
      };
    };
  };

  exports.runFn7 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return fn(a, b, c, d, e, f, g);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn8 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return fn(a, b, c, d, e, f, g, h);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn9 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return fn(a, b, c, d, e, f, g, h, i);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn10 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return function (j) {
                        return fn(a, b, c, d, e, f, g, h, i, j);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];        
  var runFn1 = function (f) {
      return f;
  };
  var mkFn1 = function (f) {
      return f;
  };
  exports["mkFn1"] = mkFn1;
  exports["runFn1"] = runFn1;
  exports["mkFn0"] = $foreign.mkFn0;
  exports["mkFn10"] = $foreign.mkFn10;
  exports["mkFn2"] = $foreign.mkFn2;
  exports["mkFn3"] = $foreign.mkFn3;
  exports["mkFn4"] = $foreign.mkFn4;
  exports["mkFn5"] = $foreign.mkFn5;
  exports["mkFn6"] = $foreign.mkFn6;
  exports["mkFn7"] = $foreign.mkFn7;
  exports["mkFn8"] = $foreign.mkFn8;
  exports["mkFn9"] = $foreign.mkFn9;
  exports["runFn0"] = $foreign.runFn0;
  exports["runFn10"] = $foreign.runFn10;
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
  exports["runFn5"] = $foreign.runFn5;
  exports["runFn6"] = $foreign.runFn6;
  exports["runFn7"] = $foreign.runFn7;
  exports["runFn8"] = $foreign.runFn8;
  exports["runFn9"] = $foreign.runFn9;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  var showNullable = function (dictShow) {
      return new Data_Show.Show(function ($5) {
          return Data_Maybe.maybe("null")(Data_Show.show(dictShow))(toMaybe($5));
      });
  };
  var eqNullable = function (dictEq) {
      return new Data_Eq.Eq(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe));
  };
  var ordNullable = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqNullable(dictOrd.Eq0());
      }, Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe));
  };
  var eq1Nullable = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqNullable(dictEq));
  });
  var ord1Nullable = new Data_Ord.Ord1(function () {
      return eq1Nullable;
  }, function (dictOrd) {
      return Data_Ord.compare(ordNullable(dictOrd));
  });
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["showNullable"] = showNullable;
  exports["eqNullable"] = eqNullable;
  exports["eq1Nullable"] = eq1Nullable;
  exports["ordNullable"] = ordNullable;
  exports["ord1Nullable"] = ord1Nullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Event.DataTransfer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var setData = function (v) {
      return function (dat) {
          return function (dt) {
              return $foreign.setDataImpl(v)(dat)(dt);
          };
      };
  };
  var getData = function (v) {
      return function (dt) {
          return $foreign.getDataImpl(v)(dt);
      };
  };
  var files = Data_Functor.map(Data_Functor.functorFn)(Data_Nullable.toMaybe)($foreign._files);
  exports["files"] = files;
  exports["getData"] = getData;
  exports["setData"] = setData;
  exports["types"] = $foreign.types;
})(PS["DOM.HTML.Event.DataTransfer"] = PS["DOM.HTML.Event.DataTransfer"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.ClipboardEvent"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML_Event_DataTransfer = PS["DOM.HTML.Event.DataTransfer"];
  var Data_Foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];        
  var eventToClipboardEvent = function ($0) {
      return DOM_Event_Types.readClipboardEvent(Data_Foreign.toForeign($0));
  };
  exports["eventToClipboardEvent"] = eventToClipboardEvent;
  exports["clipboardData"] = $foreign.clipboardData;
})(PS["DOM.Event.ClipboardEvent"] = PS["DOM.Event.ClipboardEvent"] || {});
(function(exports) {
    "use strict";

  exports.data_ = function (e) {
    return e.data;
  };
})(PS["DOM.Event.CompositionEvent"] = PS["DOM.Event.CompositionEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.CompositionEvent"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];        
  var eventToCompositionEvent = function ($0) {
      return DOM_Event_Types.readCompositionEvent(Data_Foreign.toForeign($0));
  };
  exports["eventToCompositionEvent"] = eventToCompositionEvent;
  exports["data_"] = $foreign.data_;
})(PS["DOM.Event.CompositionEvent"] = PS["DOM.Event.CompositionEvent"] || {});
(function(exports) {
    "use strict";

  exports.bubbles = function (e) {
    return e.bubbles;
  };

  exports.cancelable = function (e) {
    return e.cancelable;
  };

  exports.currentTarget = function (e) {
    return e.currentTarget;
  };

  exports.defaultPrevented = function (e) {
    return e.defaultPrevented;
  };

  exports.eventPhaseIndex = function (e) {
    return e.eventPhase;
  };

  exports.target = function (e) {
    return e.target;
  };

  exports.timeStamp = function (e) {
    return e.timeStamp;
  };

  exports.type_ = function (e) {
    return e.type;
  };

  exports.preventDefault = function (e) {
    return function () {
      return e.preventDefault();
    };
  };

  exports.stopImmediatePropagation = function (e) {
    return function () {
      return e.stopImmediatePropagation();
    };
  };

  exports.stopPropagation = function (e) {
    return function () {
      return e.stopPropagation();
    };
  };
})(PS["DOM.Event.Event"] = PS["DOM.Event.Event"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };

  exports.toLower = function (c) {
    return c.toLowerCase();
  };

  exports.toUpper = function (c) {
    return c.toUpperCase();
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Char"];
  exports["fromCharCode"] = $foreign.fromCharCode;
  exports["toCharCode"] = $foreign.toCharCode;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Cardinality = function (x) {
      return x;
  };
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  };
  var pred = function (dict) {
      return dict.pred;
  };
  var ordCardinality = Data_Ord.ordInt;
  var newtypeCardinality = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Cardinality);
  var intStepFromTo = function (step) {
      return function (from) {
          return function (to) {
              return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(function (e) {
                  var $52 = e <= to;
                  if ($52) {
                      return Data_Maybe.Just.create(new Data_Tuple.Tuple(e, e + step | 0));
                  };
                  return Data_Maybe.Nothing.value;
              })(from);
          };
      };
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (b) {
          return function (t) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $55 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($55) {
                          return b;
                      };
                      return t;
                  };
                  throw new Error("Failed pattern match at Data.Enum line 251, column 28 - line 253, column 56: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var eqCardinality = Data_Eq.eqInt;
  var enumUnit = new Enum(function () {
      return Data_Ord.ordUnit;
  }, Data_Function["const"](Data_Maybe.Nothing.value), Data_Function["const"](Data_Maybe.Nothing.value));
  var enumTuple = function (dictEnum) {
      return function (dictBoundedEnum) {
          return new Enum(function () {
              return Data_Tuple.ordTuple(dictEnum.Ord0())((dictBoundedEnum.Enum1()).Ord0());
          }, function (v) {
              return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))(function ($99) {
                  return Data_Maybe.Just.create(Data_Tuple.Tuple.create(v.value0)($99));
              })(pred(dictBoundedEnum.Enum1())(v.value1));
          }, function (v) {
              return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))(function ($100) {
                  return Data_Maybe.Just.create(Data_Tuple.Tuple.create(v.value0)($100));
              })(succ(dictBoundedEnum.Enum1())(v.value1));
          });
      };
  };
  var enumOrdering = new Enum(function () {
      return Data_Ord.ordOrdering;
  }, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
      };
      if (v instanceof Data_Ordering.GT) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      throw new Error("Failed pattern match at Data.Enum line 70, column 1 - line 70, column 39: " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      if (v instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
      };
      if (v instanceof Data_Ordering.GT) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Enum line 70, column 1 - line 70, column 39: " + [ v.constructor.name ]);
  });
  var enumMaybe = function (dictBoundedEnum) {
      return new Enum(function () {
          return Data_Maybe.ordMaybe((dictBoundedEnum.Enum1()).Ord0());
      }, function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Maybe.Just.create(pred(dictBoundedEnum.Enum1())(v.value0));
          };
          throw new Error("Failed pattern match at Data.Enum line 78, column 1 - line 78, column 54: " + [ v.constructor.name ]);
      }, function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Just.create(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
          };
          throw new Error("Failed pattern match at Data.Enum line 78, column 1 - line 78, column 54: " + [ v.constructor.name ]);
      });
  };
  var enumInt = new Enum(function () {
      return Data_Ord.ordInt;
  }, function (n) {
      var $68 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);
      if ($68) {
          return new Data_Maybe.Just(n - 1 | 0);
      };
      return Data_Maybe.Nothing.value;
  }, function (n) {
      var $69 = n < Data_Bounded.top(Data_Bounded.boundedInt);
      if ($69) {
          return new Data_Maybe.Just(n + 1 | 0);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumFromTo = function (dictEnum) {
      return function (dictUnfoldable) {
          return function (from) {
              return function (to) {
                  var go = function (mx) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(mx)(function (v) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Ord.lessThanOrEq(dictEnum.Ord0())(v)(to)))(function () {
                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(v, succ(dictEnum)(v)));
                          });
                      });
                  };
                  return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_Maybe.Just(from));
              };
          };
      };
  };
  var enumFromThenTo = function (dictBoundedEnum) {
      return function (a) {
          return function (b) {
              return function (c) {
                  var c$prime = fromEnum(dictBoundedEnum)(c);
                  var b$prime = fromEnum(dictBoundedEnum)(b);
                  var a$prime = fromEnum(dictBoundedEnum)(a);
                  return Data_Functor.map(Data_Functor.functorArray)(function ($101) {
                      return Data_Maybe.fromJust()(toEnum(dictBoundedEnum)($101));
                  })(intStepFromTo(b$prime - a$prime | 0)(a$prime)(c$prime));
              };
          };
      };
  };
  var enumEither = function (dictBoundedEnum) {
      return function (dictBoundedEnum1) {
          return new Enum(function () {
              return Data_Either.ordEither((dictBoundedEnum.Enum1()).Ord0())((dictBoundedEnum1.Enum1()).Ord0());
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($102) {
                      return Data_Maybe.Just.create(Data_Either.Left.create($102));
                  })(pred(dictBoundedEnum.Enum1())(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return Data_Maybe.maybe(Data_Maybe.Just.create(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function ($103) {
                      return Data_Maybe.Just.create(Data_Either.Right.create($103));
                  })(pred(dictBoundedEnum1.Enum1())(v.value0));
              };
              throw new Error("Failed pattern match at Data.Enum line 84, column 1 - line 84, column 75: " + [ v.constructor.name ]);
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(Data_Maybe.Just.create(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function ($104) {
                      return Data_Maybe.Just.create(Data_Either.Left.create($104));
                  })(succ(dictBoundedEnum.Enum1())(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($105) {
                      return Data_Maybe.Just.create(Data_Either.Right.create($105));
                  })(succ(dictBoundedEnum1.Enum1())(v.value0));
              };
              throw new Error("Failed pattern match at Data.Enum line 84, column 1 - line 84, column 75: " + [ v.constructor.name ]);
          });
      };
  };
  var enumBoolean = new Enum(function () {
      return Data_Ord.ordBoolean;
  }, function (v) {
      if (v) {
          return new Data_Maybe.Just(false);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      if (!v) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  });
  var diag = function (a) {
      return new Data_Tuple.Tuple(a, a);
  };
  var downFrom = function (dictEnum) {
      return function (dictUnfoldable) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function ($106) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(diag)(pred(dictEnum)($106));
          });
      };
  };
  var upFrom = function (dictEnum) {
      return function (dictUnfoldable) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function ($107) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(diag)(succ(dictEnum)($107));
          });
      };
  };
  var defaultToEnum = function (dictBounded) {
      return function (dictEnum) {
          return function (n) {
              if (n < 0) {
                  return Data_Maybe.Nothing.value;
              };
              if (n === 0) {
                  return new Data_Maybe.Just(Data_Bounded.bottom(dictBounded));
              };
              if (Data_Boolean.otherwise) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(defaultToEnum(dictBounded)(dictEnum)(n - 1 | 0))(succ(dictEnum));
              };
              throw new Error("Failed pattern match at Data.Enum line 230, column 1 - line 230, column 65: " + [ n.constructor.name ]);
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var defaultFromEnum = function (dictEnum) {
      return function ($108) {
          return Data_Maybe.maybe(0)(function (prd) {
              return defaultFromEnum(dictEnum)(prd) + 1 | 0;
          })(pred(dictEnum)($108));
      };
  };
  var defaultCardinality = function (dictBounded) {
      return function (dictEnum) {
          var defaultCardinality$prime = function (i) {
              return function ($109) {
                  return Data_Maybe.maybe(i)(defaultCardinality$prime(i + 1 | 0))(succ(dictEnum)($109));
              };
          };
          return Cardinality(defaultCardinality$prime(1)(Data_Bounded.bottom(dictBounded)));
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return Data_Maybe.Just.create(Data_Char.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)(Data_Char.toCharCode), defaultSucc(charToEnum)(Data_Char.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  };
  var boundedEnumUnit = new BoundedEnum(function () {
      return Data_Bounded.boundedUnit;
  }, function () {
      return enumUnit;
  }, 1, Data_Function["const"](0), function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Data_Unit.unit);
      };
      return Data_Maybe.Nothing.value;
  });
  var boundedEnumTuple = function (dictBoundedEnum) {
      return function (dictBoundedEnum1) {
          return new BoundedEnum(function () {
              return Data_Tuple.boundedTuple(dictBoundedEnum.Bounded0())(dictBoundedEnum1.Bounded0());
          }, function () {
              return enumTuple(dictBoundedEnum.Enum1())(dictBoundedEnum1);
          }, Cardinality(Data_Newtype.unwrap(newtypeCardinality)(cardinality(dictBoundedEnum)) * Data_Newtype.unwrap(newtypeCardinality)(cardinality(dictBoundedEnum1)) | 0), (function () {
              var from = function (v) {
                  return function (v1) {
                      return (fromEnum(dictBoundedEnum)(v1.value0) * v | 0) + fromEnum(dictBoundedEnum1)(v1.value1) | 0;
                  };
              };
              return from(cardinality(dictBoundedEnum1));
          })(), (function () {
              var to = function (v) {
                  return function (n) {
                      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(toEnum(dictBoundedEnum)(n / v | 0)))(toEnum(dictBoundedEnum1)(n % v));
                  };
              };
              return to(cardinality(dictBoundedEnum1));
          })());
      };
  };
  var boundedEnumOrdering = new BoundedEnum(function () {
      return Data_Bounded.boundedOrdering;
  }, function () {
      return enumOrdering;
  }, 3, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return 0;
      };
      if (v instanceof Data_Ordering.EQ) {
          return 1;
      };
      if (v instanceof Data_Ordering.GT) {
          return 2;
      };
      throw new Error("Failed pattern match at Data.Enum line 179, column 1 - line 179, column 53: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var boundedEnumMaybe = function (dictBoundedEnum) {
      return new BoundedEnum(function () {
          return Data_Maybe.boundedMaybe(dictBoundedEnum.Bounded0());
      }, function () {
          return enumMaybe(dictBoundedEnum);
      }, Cardinality(Data_Newtype.unwrap(newtypeCardinality)(cardinality(dictBoundedEnum)) + 1 | 0), function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return 0;
          };
          if (v instanceof Data_Maybe.Just) {
              return fromEnum(dictBoundedEnum)(v.value0) + 1 | 0;
          };
          throw new Error("Failed pattern match at Data.Enum line 189, column 1 - line 189, column 68: " + [ v.constructor.name ]);
      }, function (v) {
          if (v === 0) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Maybe.Nothing.value);
          };
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(toEnum(dictBoundedEnum)(v - 1 | 0));
      });
  };
  var boundedEnumEither = function (dictBoundedEnum) {
      return function (dictBoundedEnum1) {
          return new BoundedEnum(function () {
              return Data_Either.boundedEither(dictBoundedEnum.Bounded0())(dictBoundedEnum1.Bounded0());
          }, function () {
              return enumEither(dictBoundedEnum)(dictBoundedEnum1);
          }, Cardinality(Data_Newtype.unwrap(newtypeCardinality)(cardinality(dictBoundedEnum)) + Data_Newtype.unwrap(newtypeCardinality)(cardinality(dictBoundedEnum1)) | 0), function (v) {
              if (v instanceof Data_Either.Left) {
                  return fromEnum(dictBoundedEnum)(v.value0);
              };
              if (v instanceof Data_Either.Right) {
                  return fromEnum(dictBoundedEnum1)(v.value0) + Data_Newtype.unwrap(newtypeCardinality)(cardinality(dictBoundedEnum)) | 0;
              };
              throw new Error("Failed pattern match at Data.Enum line 196, column 1 - line 196, column 89: " + [ v.constructor.name ]);
          }, function (n) {
              var to = function (v) {
                  if (n >= 0 && n < v) {
                      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Left.create)(toEnum(dictBoundedEnum)(n));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Right.create)(toEnum(dictBoundedEnum1)(n - v | 0));
                  };
                  throw new Error("Failed pattern match at Data.Enum line 203, column 5 - line 203, column 46: " + [ v.constructor.name ]);
              };
              return to(cardinality(dictBoundedEnum));
          });
      };
  };
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, Data_Char.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - Data_Char.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, Data_Char.toCharCode, charToEnum);
  var boundedEnumBoolean = new BoundedEnum(function () {
      return Data_Bounded.boundedBoolean;
  }, function () {
      return enumBoolean;
  }, 2, function (v) {
      if (!v) {
          return 0;
      };
      if (v) {
          return 1;
      };
      throw new Error("Failed pattern match at Data.Enum line 160, column 1 - line 160, column 51: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(false);
      };
      if (v === 1) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  });
  exports["Cardinality"] = Cardinality;
  exports["BoundedEnum"] = BoundedEnum;
  exports["Enum"] = Enum;
  exports["cardinality"] = cardinality;
  exports["defaultCardinality"] = defaultCardinality;
  exports["defaultFromEnum"] = defaultFromEnum;
  exports["defaultPred"] = defaultPred;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultToEnum"] = defaultToEnum;
  exports["downFrom"] = downFrom;
  exports["enumFromThenTo"] = enumFromThenTo;
  exports["enumFromTo"] = enumFromTo;
  exports["fromEnum"] = fromEnum;
  exports["pred"] = pred;
  exports["succ"] = succ;
  exports["toEnum"] = toEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["upFrom"] = upFrom;
  exports["newtypeCardinality"] = newtypeCardinality;
  exports["eqCardinality"] = eqCardinality;
  exports["ordCardinality"] = ordCardinality;
  exports["enumBoolean"] = enumBoolean;
  exports["enumInt"] = enumInt;
  exports["enumChar"] = enumChar;
  exports["enumUnit"] = enumUnit;
  exports["enumOrdering"] = enumOrdering;
  exports["enumMaybe"] = enumMaybe;
  exports["enumEither"] = enumEither;
  exports["enumTuple"] = enumTuple;
  exports["boundedEnumBoolean"] = boundedEnumBoolean;
  exports["boundedEnumChar"] = boundedEnumChar;
  exports["boundedEnumUnit"] = boundedEnumUnit;
  exports["boundedEnumOrdering"] = boundedEnumOrdering;
  exports["boundedEnumMaybe"] = boundedEnumMaybe;
  exports["boundedEnumEither"] = boundedEnumEither;
  exports["boundedEnumTuple"] = boundedEnumTuple;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Prelude = PS["Prelude"];        
  var None = (function () {
      function None() {

      };
      None.value = new None();
      return None;
  })();
  var Capturing = (function () {
      function Capturing() {

      };
      Capturing.value = new Capturing();
      return Capturing;
  })();
  var AtTarget = (function () {
      function AtTarget() {

      };
      AtTarget.value = new AtTarget();
      return AtTarget;
  })();
  var Bubbling = (function () {
      function Bubbling() {

      };
      Bubbling.value = new Bubbling();
      return Bubbling;
  })();
  var toEnumEventPhase = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(None.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Capturing.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(AtTarget.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Bubbling.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var fromEnumEventPhase = function (v) {
      if (v instanceof None) {
          return 0;
      };
      if (v instanceof Capturing) {
          return 1;
      };
      if (v instanceof AtTarget) {
          return 2;
      };
      if (v instanceof Bubbling) {
          return 3;
      };
      throw new Error("Failed pattern match at DOM.Event.EventPhase line 40, column 3 - line 44, column 17: " + [ v.constructor.name ]);
  };
  var eqEventPhase = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof None && y instanceof None) {
              return true;
          };
          if (x instanceof Capturing && y instanceof Capturing) {
              return true;
          };
          if (x instanceof AtTarget && y instanceof AtTarget) {
              return true;
          };
          if (x instanceof Bubbling && y instanceof Bubbling) {
              return true;
          };
          return false;
      };
  });
  var ordEventPhase = new Data_Ord.Ord(function () {
      return eqEventPhase;
  }, function (x) {
      return function (y) {
          if (x instanceof None && y instanceof None) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof None) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof None) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Capturing && y instanceof Capturing) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Capturing) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Capturing) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AtTarget && y instanceof AtTarget) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof AtTarget) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AtTarget) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Bubbling && y instanceof Bubbling) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at DOM.Event.EventPhase line 14, column 8 - line 14, column 48: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumEventPhase = new Data_Enum.Enum(function () {
      return ordEventPhase;
  }, Data_Enum.defaultPred(toEnumEventPhase)(fromEnumEventPhase), Data_Enum.defaultSucc(toEnumEventPhase)(fromEnumEventPhase));
  var boundedEventPhase = new Data_Bounded.Bounded(function () {
      return ordEventPhase;
  }, None.value, Bubbling.value);
  var boundedEnumEventPhase = new Data_Enum.BoundedEnum(function () {
      return boundedEventPhase;
  }, function () {
      return enumEventPhase;
  }, 4, fromEnumEventPhase, toEnumEventPhase);
  exports["None"] = None;
  exports["Capturing"] = Capturing;
  exports["AtTarget"] = AtTarget;
  exports["Bubbling"] = Bubbling;
  exports["fromEnumEventPhase"] = fromEnumEventPhase;
  exports["toEnumEventPhase"] = toEnumEventPhase;
  exports["eqEventPhase"] = eqEventPhase;
  exports["ordEventPhase"] = ordEventPhase;
  exports["boundedEventPhase"] = boundedEventPhase;
  exports["enumEventPhase"] = enumEventPhase;
  exports["boundedEnumEventPhase"] = boundedEnumEventPhase;
})(PS["DOM.Event.EventPhase"] = PS["DOM.Event.EventPhase"] || {});
(function(exports) {
    "use strict";

  exports._unsafeReadProtoTagged = function (name) {
    return function (failure) {
      return function (success) {
        return function (value) {
          var obj = value;
          while (obj != null) {
            var proto = Object.getPrototypeOf(obj);
            var ctor = proto.constructor.name;
            if (ctor === name) {
              return success(value);
            } else if (ctor === "Object") {
              return failure(Object.getPrototypeOf(value).constructor.name);
            }
            obj = proto;
          }
          return failure(Object.getPrototypeOf(value).constructor.name);
        };
      };
    };
  };
})(PS["DOM.Util.FFI"] = PS["DOM.Util.FFI"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Util.FFI"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Prelude = PS["Prelude"];        
  var unsafeReadProtoTagged = function (name) {
      return $foreign._unsafeReadProtoTagged(name)(function ($0) {
          return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Left.create(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Data_Foreign.TypeMismatch.create(name)($0))));
      })(function ($1) {
          return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Right.create($1));
      });
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS["DOM.Util.FFI"] = PS["DOM.Util.FFI"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Util_FFI = PS["DOM.Util.FFI"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var ElementId = function (x) {
      return x;
  };
  var textToNode = Unsafe_Coerce.unsafeCoerce;
  var readNode = DOM_Util_FFI.unsafeReadProtoTagged("Node");
  var readElement = DOM_Util_FFI.unsafeReadProtoTagged("Element");
  var readDocument = DOM_Util_FFI.unsafeReadProtoTagged("Document");
  var processingInstructionToNode = Unsafe_Coerce.unsafeCoerce;
  var oOrdElementId = Data_Ord.ordString;
  var newtypeElementId = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ElementId);
  var eqElementId = Data_Eq.eqString;
  var elementToParentNode = Unsafe_Coerce.unsafeCoerce;
  var elementToNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var elementToNode = Unsafe_Coerce.unsafeCoerce;
  var elementToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var documentTypeToNode = Unsafe_Coerce.unsafeCoerce;
  var documentToParentNode = Unsafe_Coerce.unsafeCoerce;
  var documentToNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  var documentToNode = Unsafe_Coerce.unsafeCoerce;
  var documentToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var documentFragmentToParentNode = Unsafe_Coerce.unsafeCoerce;
  var documentFragmentToNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  var documentFragmentToNode = Unsafe_Coerce.unsafeCoerce;
  var commentToNode = Unsafe_Coerce.unsafeCoerce;
  var characterDataToNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  exports["ElementId"] = ElementId;
  exports["characterDataToNonDocumentTypeChildNode"] = characterDataToNonDocumentTypeChildNode;
  exports["commentToNode"] = commentToNode;
  exports["documentFragmentToNode"] = documentFragmentToNode;
  exports["documentFragmentToNonElementParentNode"] = documentFragmentToNonElementParentNode;
  exports["documentFragmentToParentNode"] = documentFragmentToParentNode;
  exports["documentToEventTarget"] = documentToEventTarget;
  exports["documentToNode"] = documentToNode;
  exports["documentToNonElementParentNode"] = documentToNonElementParentNode;
  exports["documentToParentNode"] = documentToParentNode;
  exports["documentTypeToNode"] = documentTypeToNode;
  exports["elementToEventTarget"] = elementToEventTarget;
  exports["elementToNode"] = elementToNode;
  exports["elementToNonDocumentTypeChildNode"] = elementToNonDocumentTypeChildNode;
  exports["elementToParentNode"] = elementToParentNode;
  exports["processingInstructionToNode"] = processingInstructionToNode;
  exports["readDocument"] = readDocument;
  exports["readElement"] = readElement;
  exports["readNode"] = readNode;
  exports["textToNode"] = textToNode;
  exports["newtypeElementId"] = newtypeElementId;
  exports["eqElementId"] = eqElementId;
  exports["oOrdElementId"] = oOrdElementId;
})(PS["DOM.Node.Types"] = PS["DOM.Node.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.Event"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Event_EventPhase = PS["DOM.Event.EventPhase"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];        
  var eventPhase = function (dictPartial) {
      return function ($1) {
          return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(DOM_Event_EventPhase.boundedEnumEventPhase)($foreign.eventPhaseIndex($1)));
      };
  };
  exports["eventPhase"] = eventPhase;
  exports["bubbles"] = $foreign.bubbles;
  exports["cancelable"] = $foreign.cancelable;
  exports["currentTarget"] = $foreign.currentTarget;
  exports["defaultPrevented"] = $foreign.defaultPrevented;
  exports["eventPhaseIndex"] = $foreign.eventPhaseIndex;
  exports["preventDefault"] = $foreign.preventDefault;
  exports["stopImmediatePropagation"] = $foreign.stopImmediatePropagation;
  exports["stopPropagation"] = $foreign.stopPropagation;
  exports["target"] = $foreign.target;
  exports["timeStamp"] = $foreign.timeStamp;
  exports["type_"] = $foreign.type_;
})(PS["DOM.Event.Event"] = PS["DOM.Event.Event"] || {});
(function(exports) {
    "use strict";

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.removeEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };

  exports.dispatchEvent = function (event) {
    return function (target) {
      return function () {
        return target.dispatchEvent(event);
      };
    };
  };
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Prelude = PS["Prelude"];
  exports["addEventListener"] = $foreign.addEventListener;
  exports["dispatchEvent"] = $foreign.dispatchEvent;
  exports["eventListener"] = $foreign.eventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
    "use strict";

  exports._relatedTarget = function (e) {
    return e.relatedTarget;
  };
})(PS["DOM.Event.FocusEvent"] = PS["DOM.Event.FocusEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.FocusEvent"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var relatedTarget = Data_Functor.map(Data_Functor.functorFn)(Data_Nullable.toMaybe)($foreign._relatedTarget);
  var eventToFocusEvent = function ($0) {
      return DOM_Event_Types.readFocusEvent(Data_Foreign.toForeign($0));
  };
  exports["eventToFocusEvent"] = eventToFocusEvent;
  exports["relatedTarget"] = relatedTarget;
})(PS["DOM.Event.FocusEvent"] = PS["DOM.Event.FocusEvent"] || {});
(function(exports) {
    "use strict";

  exports.key = function (e) {
    return e.key;
  };

  exports.code = function (e) {
    return e.code;
  };

  exports.locationIndex = function (e) {
    return e.location;
  };

  exports.ctrlKey = function (e) {
    return e.ctrlKey;
  };

  exports.shiftKey = function (e) {
    return e.shiftKey;
  };

  exports.altKey = function (e) {
    return e.altKey;
  };

  exports.metaKey = function (e) {
    return e.metaKey;
  };

  exports.repeat = function (e) {
    return e.repeat;
  };

  exports.isComposing = function (e) {
    return e.isComposing;
  };

  exports.getModifierState = function (s) {
    return function (e) {
      return function () {
        return e.getModifierState(s);
      };
    };
  };
})(PS["DOM.Event.KeyboardEvent"] = PS["DOM.Event.KeyboardEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.KeyboardEvent"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Prelude = PS["Prelude"];        
  var Standard = (function () {
      function Standard() {

      };
      Standard.value = new Standard();
      return Standard;
  })();
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var Numpad = (function () {
      function Numpad() {

      };
      Numpad.value = new Numpad();
      return Numpad;
  })();
  var toEnumKeyLocation = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Standard.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Left.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Right.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Numpad.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var fromEnumKeyLocation = function (v) {
      if (v instanceof Standard) {
          return 0;
      };
      if (v instanceof Left) {
          return 1;
      };
      if (v instanceof Right) {
          return 2;
      };
      if (v instanceof Numpad) {
          return 3;
      };
      throw new Error("Failed pattern match at DOM.Event.KeyboardEvent line 74, column 3 - line 80, column 1: " + [ v.constructor.name ]);
  };
  var eventToKeyboardEvent = function ($13) {
      return DOM_Event_Types.readKeyboardEvent(Data_Foreign.toForeign($13));
  };
  var eqKeyLocation = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Standard && y instanceof Standard) {
              return true;
          };
          if (x instanceof Left && y instanceof Left) {
              return true;
          };
          if (x instanceof Right && y instanceof Right) {
              return true;
          };
          if (x instanceof Numpad && y instanceof Numpad) {
              return true;
          };
          return false;
      };
  });
  var ordKeyLocation = new Data_Ord.Ord(function () {
      return eqKeyLocation;
  }, function (x) {
      return function (y) {
          if (x instanceof Standard && y instanceof Standard) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Standard) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Standard) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Left && y instanceof Left) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Left) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Left) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Right && y instanceof Right) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Right) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Right) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Numpad && y instanceof Numpad) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at DOM.Event.KeyboardEvent line 48, column 8 - line 48, column 50: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumKeyLocation = new Data_Enum.Enum(function () {
      return ordKeyLocation;
  }, Data_Enum.defaultPred(toEnumKeyLocation)(fromEnumKeyLocation), Data_Enum.defaultSucc(toEnumKeyLocation)(fromEnumKeyLocation));
  var boundedKeyLocation = new Data_Bounded.Bounded(function () {
      return ordKeyLocation;
  }, Standard.value, Numpad.value);
  var boundedEnumKeyLocation = new Data_Enum.BoundedEnum(function () {
      return boundedKeyLocation;
  }, function () {
      return enumKeyLocation;
  }, 4, fromEnumKeyLocation, toEnumKeyLocation);
  var location = function (dictPartial) {
      return function ($14) {
          return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(boundedEnumKeyLocation)($foreign.locationIndex($14)));
      };
  };
  exports["Standard"] = Standard;
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["Numpad"] = Numpad;
  exports["eventToKeyboardEvent"] = eventToKeyboardEvent;
  exports["fromEnumKeyLocation"] = fromEnumKeyLocation;
  exports["location"] = location;
  exports["toEnumKeyLocation"] = toEnumKeyLocation;
  exports["eqKeyLocation"] = eqKeyLocation;
  exports["ordKeyLocation"] = ordKeyLocation;
  exports["boundedKeyLocation"] = boundedKeyLocation;
  exports["enumKeyLocation"] = enumKeyLocation;
  exports["boundedEnumKeyLocation"] = boundedEnumKeyLocation;
  exports["altKey"] = $foreign.altKey;
  exports["code"] = $foreign.code;
  exports["ctrlKey"] = $foreign.ctrlKey;
  exports["getModifierState"] = $foreign.getModifierState;
  exports["isComposing"] = $foreign.isComposing;
  exports["key"] = $foreign.key;
  exports["locationIndex"] = $foreign.locationIndex;
  exports["metaKey"] = $foreign.metaKey;
  exports["repeat"] = $foreign.repeat;
  exports["shiftKey"] = $foreign.shiftKey;
})(PS["DOM.Event.KeyboardEvent"] = PS["DOM.Event.KeyboardEvent"] || {});
(function(exports) {
    "use strict";

  exports.screenX = function (e) {
    return e.screenX;
  };

  exports.screenY = function (e) {
    return e.screenY;
  };

  exports.clientX = function (e) {
    return e.clientX;
  };

  exports.clientY = function (e) {
    return e.clientY;
  };

  exports.ctrlKey = function (e) {
    return e.ctrlKey;
  };

  exports.shiftKey = function (e) {
    return e.shiftKey;
  };

  exports.altKey = function (e) {
    return e.altKey;
  };

  exports.metaKey = function (e) {
    return e.metaKey;
  };

  exports.button = function (e) {
    return e.button;
  };

  exports._relatedTarget = function (e) {
    return e.relatedTarget;
  };

  exports.buttons = function (e) {
    return e.buttons;
  };

  exports.getModifierState = function (s) {
    return function (e) {
      return function () {
        return e.getModifierState(s);
      };
    };
  };
})(PS["DOM.Event.MouseEvent"] = PS["DOM.Event.MouseEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.MouseEvent"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var relatedTarget = Data_Functor.map(Data_Functor.functorFn)(Data_Nullable.toMaybe)($foreign._relatedTarget);
  var eventToMouseEvent = function ($0) {
      return DOM_Event_Types.readMouseEvent(Data_Foreign.toForeign($0));
  };
  exports["eventToMouseEvent"] = eventToMouseEvent;
  exports["relatedTarget"] = relatedTarget;
  exports["altKey"] = $foreign.altKey;
  exports["button"] = $foreign.button;
  exports["buttons"] = $foreign.buttons;
  exports["clientX"] = $foreign.clientX;
  exports["clientY"] = $foreign.clientY;
  exports["ctrlKey"] = $foreign.ctrlKey;
  exports["getModifierState"] = $foreign.getModifierState;
  exports["metaKey"] = $foreign.metaKey;
  exports["screenX"] = $foreign.screenX;
  exports["screenY"] = $foreign.screenY;
  exports["shiftKey"] = $foreign.shiftKey;
})(PS["DOM.Event.MouseEvent"] = PS["DOM.Event.MouseEvent"] || {});
(function(exports) {
    "use strict";

  exports.deltaX = function (e) {
    return e.deltaX;
  };

  exports.deltaY = function (e) {
    return e.deltaY;
  };

  exports.deltaZ = function (e) {
    return e.deltaZ;
  };

  exports.deltaModeIndex = function (e) {
    return e.deltaModeIndex;
  };
})(PS["DOM.Event.WheelEvent"] = PS["DOM.Event.WheelEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Event.WheelEvent"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Prelude = PS["Prelude"];        
  var Pixel = (function () {
      function Pixel() {

      };
      Pixel.value = new Pixel();
      return Pixel;
  })();
  var Line = (function () {
      function Line() {

      };
      Line.value = new Line();
      return Line;
  })();
  var Page = (function () {
      function Page() {

      };
      Page.value = new Page();
      return Page;
  })();
  var toEnumDeltaMode = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Pixel.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Line.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Page.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var fromEnumDeltaMode = function (v) {
      if (v instanceof Pixel) {
          return 0;
      };
      if (v instanceof Line) {
          return 1;
      };
      if (v instanceof Page) {
          return 2;
      };
      throw new Error("Failed pattern match at DOM.Event.WheelEvent line 66, column 3 - line 69, column 13: " + [ v.constructor.name ]);
  };
  var eventToWheelEvent = function ($13) {
      return DOM_Event_Types.readWheelEvent(Data_Foreign.toForeign($13));
  };
  var eqDeltaMode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Pixel && y instanceof Pixel) {
              return true;
          };
          if (x instanceof Line && y instanceof Line) {
              return true;
          };
          if (x instanceof Page && y instanceof Page) {
              return true;
          };
          return false;
      };
  });
  var ordDeltaMode = new Data_Ord.Ord(function () {
      return eqDeltaMode;
  }, function (x) {
      return function (y) {
          if (x instanceof Pixel && y instanceof Pixel) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Pixel) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Pixel) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Line && y instanceof Line) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Line) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Line) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Page && y instanceof Page) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at DOM.Event.WheelEvent line 41, column 8 - line 41, column 46: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumDeltaMode = new Data_Enum.Enum(function () {
      return ordDeltaMode;
  }, Data_Enum.defaultPred(toEnumDeltaMode)(fromEnumDeltaMode), Data_Enum.defaultSucc(toEnumDeltaMode)(fromEnumDeltaMode));
  var boundedDeltaMode = new Data_Bounded.Bounded(function () {
      return ordDeltaMode;
  }, Pixel.value, Page.value);
  var boundedEnumDeltaMode = new Data_Enum.BoundedEnum(function () {
      return boundedDeltaMode;
  }, function () {
      return enumDeltaMode;
  }, 3, fromEnumDeltaMode, toEnumDeltaMode);
  var deltaMode = function (dictPartial) {
      return function ($14) {
          return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(boundedEnumDeltaMode)($foreign.deltaModeIndex($14)));
      };
  };
  exports["Pixel"] = Pixel;
  exports["Line"] = Line;
  exports["Page"] = Page;
  exports["deltaMode"] = deltaMode;
  exports["eventToWheelEvent"] = eventToWheelEvent;
  exports["fromEnumDeltaMode"] = fromEnumDeltaMode;
  exports["toEnumDeltaMode"] = toEnumDeltaMode;
  exports["eqDeltaMode"] = eqDeltaMode;
  exports["ordDeltaMode"] = ordDeltaMode;
  exports["boundedDeltaMode"] = boundedDeltaMode;
  exports["enumDeltaMode"] = enumDeltaMode;
  exports["boundedEnumDeltaMode"] = boundedEnumDeltaMode;
  exports["deltaModeIndex"] = $foreign.deltaModeIndex;
  exports["deltaX"] = $foreign.deltaX;
  exports["deltaY"] = $foreign.deltaY;
  exports["deltaZ"] = $foreign.deltaZ;
})(PS["DOM.Event.WheelEvent"] = PS["DOM.Event.WheelEvent"] || {});
(function(exports) {
    "use strict";

  exports.typeImpl = function (blob) { return blob.type; };

  exports.size = function (blob) { return blob.size; };
})(PS["DOM.File.Blob"] = PS["DOM.File.Blob"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.File.Blob"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Prelude = PS["Prelude"];        
  var type_ = function (blob) {
      var blobType = $foreign.typeImpl(blob);
      var $0 = blobType === "";
      if ($0) {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(blobType);
  };
  exports["type_"] = type_;
  exports["size"] = $foreign.size;
})(PS["DOM.File.Blob"] = PS["DOM.File.Blob"] || {});
(function(exports) {
    "use strict";

  exports.name = function (file) { return file.name; };
})(PS["DOM.File.File"] = PS["DOM.File.File"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.File.File"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Blob = PS["DOM.File.Blob"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var type_ = function ($0) {
      return DOM_File_Blob.type_(Unsafe_Coerce.unsafeCoerce($0));
  };
  var size = function ($1) {
      return DOM_File_Blob.size(Unsafe_Coerce.unsafeCoerce($1));
  };
  exports["size"] = size;
  exports["type_"] = type_;
  exports["name"] = $foreign.name;
})(PS["DOM.File.File"] = PS["DOM.File.File"] || {});
(function(exports) {
    "use strict";

  exports.length = function (fileList) { return fileList.length; };

  exports._item = function (index) {
    return function (fileList) {
      return fileList.item(index);
    };
  };
})(PS["DOM.File.FileList"] = PS["DOM.File.FileList"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.File.FileList"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var item = function (i) {
      return function ($0) {
          return Data_Nullable.toMaybe($foreign._item(i)($0));
      };
  };
  exports["item"] = item;
  exports["length"] = $foreign.length;
})(PS["DOM.File.FileList"] = PS["DOM.File.FileList"] || {});
(function(exports) {
  /* global FileReader */
  "use strict";

  exports.fileReader = function () { return new FileReader(); };

  exports.error = function (fr) { return function () { return fr.error; }; };

  exports.readyStateImpl = function (fr) { return function () { return fr.readyState; }; };

  exports.result = function (fr) { return function () { return fr.result; }; };

  exports.abort = function (fr) { return function () { fr.abort(); }; };

  exports.readAsText = function (blob) {
    return function (fr) {
      return function () {
        fr.readAsText(blob);
      };
    };
  };

  exports.readAsArrayBuffer = function (blob) {
    return function (fr) {
      return function () {
        fr.readAsArrayBuffer(blob);
      };
    };
  };

  exports.readAsDataURL = function (blob) {
    return function (fr) {
      return function () {
        fr.readAsDataURL(blob);
      };
    };
  };
})(PS["DOM.File.FileReader"] = PS["DOM.File.FileReader"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var EMPTY = (function () {
      function EMPTY() {

      };
      EMPTY.value = new EMPTY();
      return EMPTY;
  })();
  var LOADING = (function () {
      function LOADING() {

      };
      LOADING.value = new LOADING();
      return LOADING;
  })();
  var DONE = (function () {
      function DONE() {

      };
      DONE.value = new DONE();
      return DONE;
  })();
  var toEnumReadyState = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(EMPTY.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(LOADING.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(DONE.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showReadyState = new Data_Show.Show(function (v) {
      if (v instanceof EMPTY) {
          return "EMPTY";
      };
      if (v instanceof LOADING) {
          return "LOADING";
      };
      if (v instanceof DONE) {
          return "DONE";
      };
      throw new Error("Failed pattern match at DOM.File.FileReader.ReadyState line 28, column 1 - line 28, column 43: " + [ v.constructor.name ]);
  });
  var fromEnumReadyState = function (v) {
      if (v instanceof EMPTY) {
          return 0;
      };
      if (v instanceof LOADING) {
          return 1;
      };
      if (v instanceof DONE) {
          return 2;
      };
      throw new Error("Failed pattern match at DOM.File.FileReader.ReadyState line 43, column 3 - line 46, column 13: " + [ v.constructor.name ]);
  };
  var eqReadyState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof EMPTY && y instanceof EMPTY) {
              return true;
          };
          if (x instanceof LOADING && y instanceof LOADING) {
              return true;
          };
          if (x instanceof DONE && y instanceof DONE) {
              return true;
          };
          return false;
      };
  });
  var ordReadyState = new Data_Ord.Ord(function () {
      return eqReadyState;
  }, function (x) {
      return function (y) {
          if (x instanceof EMPTY && y instanceof EMPTY) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof EMPTY) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof EMPTY) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof LOADING && y instanceof LOADING) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof LOADING) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof LOADING) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof DONE && y instanceof DONE) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at DOM.File.FileReader.ReadyState line 13, column 8 - line 13, column 48: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumReadyState = new Data_Enum.Enum(function () {
      return ordReadyState;
  }, Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState), Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState));
  var boundedReadyState = new Data_Bounded.Bounded(function () {
      return ordReadyState;
  }, EMPTY.value, DONE.value);
  var boundedEnumReadyState = new Data_Enum.BoundedEnum(function () {
      return boundedReadyState;
  }, function () {
      return enumReadyState;
  }, 3, fromEnumReadyState, toEnumReadyState);
  exports["EMPTY"] = EMPTY;
  exports["LOADING"] = LOADING;
  exports["DONE"] = DONE;
  exports["fromEnumReadyState"] = fromEnumReadyState;
  exports["toEnumReadyState"] = toEnumReadyState;
  exports["eqReadyState"] = eqReadyState;
  exports["ordReadyState"] = ordReadyState;
  exports["boundedReadyState"] = boundedReadyState;
  exports["enumReadyState"] = enumReadyState;
  exports["boundedEnumReadyState"] = boundedEnumReadyState;
  exports["showReadyState"] = showReadyState;
})(PS["DOM.File.FileReader.ReadyState"] = PS["DOM.File.FileReader.ReadyState"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.File.FileReader"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_File_FileReader_ReadyState = PS["DOM.File.FileReader.ReadyState"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var readyState = function (fr) {
      return function __do() {
          var v = $foreign.readyStateImpl(fr)();
          return Data_Maybe.fromJust()(DOM_File_FileReader_ReadyState.toEnumReadyState(v));
      };
  };
  exports["readyState"] = readyState;
  exports["abort"] = $foreign.abort;
  exports["fileReader"] = $foreign.fileReader;
  exports["readAsArrayBuffer"] = $foreign.readAsArrayBuffer;
  exports["readAsDataURL"] = $foreign.readAsDataURL;
  exports["readAsText"] = $foreign.readAsText;
  exports["result"] = $foreign.result;
})(PS["DOM.File.FileReader"] = PS["DOM.File.FileReader"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._readHTMLElement = function (failure) {
    return function (success) {
      return function (value) {
        var tag = Object.prototype.toString.call(value);
        if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
          return success(value);
        } else {
          return failure(tag);
        }
      };
    };
  };
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var windowToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var readHTMLVideoElement = Data_Foreign.unsafeReadTagged("HTMLVideoElement");
  var readHTMLUListElement = Data_Foreign.unsafeReadTagged("HTMLUListElement");
  var readHTMLTrackElement = Data_Foreign.unsafeReadTagged("HTMLTrackElement");
  var readHTMLTitleElement = Data_Foreign.unsafeReadTagged("HTMLTitleElement");
  var readHTMLTimeElement = Data_Foreign.unsafeReadTagged("HTMLTimeElement");
  var readHTMLTextAreaElement = Data_Foreign.unsafeReadTagged("HTMLTextAreaElement");
  var readHTMLTemplateElement = Data_Foreign.unsafeReadTagged("HTMLTemplateElement");
  var readHTMLTableSectionElement = Data_Foreign.unsafeReadTagged("HTMLTableSectionElement");
  var readHTMLTableRowElement = Data_Foreign.unsafeReadTagged("HTMLTableRowElement");
  var readHTMLTableHeaderCellElement = Data_Foreign.unsafeReadTagged("HTMLTableHeaderCellElement");
  var readHTMLTableElement = Data_Foreign.unsafeReadTagged("HTMLTableElement");
  var readHTMLTableDataCellElement = Data_Foreign.unsafeReadTagged("HTMLTableDataCellElement");
  var readHTMLTableColElement = Data_Foreign.unsafeReadTagged("HTMLTableColElement");
  var readHTMLTableCellElement = Data_Foreign.unsafeReadTagged("HTMLTableCellElement");
  var readHTMLTableCaptionElement = Data_Foreign.unsafeReadTagged("HTMLTableCaptionElement");
  var readHTMLStyleElement = Data_Foreign.unsafeReadTagged("HTMLStyleElement");
  var readHTMLSpanElement = Data_Foreign.unsafeReadTagged("HTMLSpanElement");
  var readHTMLSourceElement = Data_Foreign.unsafeReadTagged("HTMLSourceElement");
  var readHTMLSelectElement = Data_Foreign.unsafeReadTagged("HTMLSelectElement");
  var readHTMLScriptElement = Data_Foreign.unsafeReadTagged("HTMLScriptElement");
  var readHTMLQuoteElement = Data_Foreign.unsafeReadTagged("HTMLQuoteElement");
  var readHTMLProgressElement = Data_Foreign.unsafeReadTagged("HTMLProgressElement");
  var readHTMLPreElement = Data_Foreign.unsafeReadTagged("HTMLPreElement");
  var readHTMLParamElement = Data_Foreign.unsafeReadTagged("HTMLParamElement");
  var readHTMLParagraphElement = Data_Foreign.unsafeReadTagged("HTMLParagraphElement");
  var readHTMLOutputElement = Data_Foreign.unsafeReadTagged("HTMLOutputElement");
  var readHTMLOptionElement = Data_Foreign.unsafeReadTagged("HTMLOptionElement");
  var readHTMLOptGroupElement = Data_Foreign.unsafeReadTagged("HTMLOptGroupElement");
  var readHTMLObjectElement = Data_Foreign.unsafeReadTagged("HTMLObjectElement");
  var readHTMLOListElement = Data_Foreign.unsafeReadTagged("HTMLOListElement");
  var readHTMLModElement = Data_Foreign.unsafeReadTagged("HTMLModElement");
  var readHTMLMeterElement = Data_Foreign.unsafeReadTagged("HTMLMeterElement");
  var readHTMLMetaElement = Data_Foreign.unsafeReadTagged("HTMLMetaElement");
  var readHTMLMediaElement = Data_Foreign.unsafeReadTagged("HTMLMediaElement");
  var readHTMLMapElement = Data_Foreign.unsafeReadTagged("HTMLMapElement");
  var readHTMLLinkElement = Data_Foreign.unsafeReadTagged("HTMLLinkElement");
  var readHTMLLegendElement = Data_Foreign.unsafeReadTagged("HTMLLegendElement");
  var readHTMLLabelElement = Data_Foreign.unsafeReadTagged("HTMLLabelElement");
  var readHTMLLIElement = Data_Foreign.unsafeReadTagged("HTMLLIElement");
  var readHTMLKeygenElement = Data_Foreign.unsafeReadTagged("HTMLKeygenElement");
  var readHTMLInputElement = Data_Foreign.unsafeReadTagged("HTMLInputElement");
  var readHTMLImageElement = Data_Foreign.unsafeReadTagged("HTMLImageElement");
  var readHTMLIFrameElement = Data_Foreign.unsafeReadTagged("HTMLIFrameElement");
  var readHTMLHtmlElement = Data_Foreign.unsafeReadTagged("HTMLHtmlElement");
  var readHTMLHeadingElement = Data_Foreign.unsafeReadTagged("HTMLHeadingElement");
  var readHTMLHeadElement = Data_Foreign.unsafeReadTagged("HTMLHeadElement");
  var readHTMLHRElement = Data_Foreign.unsafeReadTagged("HTMLHRElement");
  var readHTMLFormElement = Data_Foreign.unsafeReadTagged("HTMLFormElement");
  var readHTMLFieldSetElement = Data_Foreign.unsafeReadTagged("HTMLFieldSetElement");
  var readHTMLEmbedElement = Data_Foreign.unsafeReadTagged("HTMLEmbedElement");
  var readHTMLElement = $foreign._readHTMLElement(function ($0) {
      return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Left.create(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Data_Foreign.TypeMismatch.create("HTMLElement")($0))));
  })(function ($1) {
      return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Right.create($1));
  });
  var readHTMLDocument = Data_Foreign.unsafeReadTagged("HTMLDocument");
  var readHTMLDivElement = Data_Foreign.unsafeReadTagged("HTMLDivElement");
  var readHTMLDataListElement = Data_Foreign.unsafeReadTagged("HTMLDataListElement");
  var readHTMLDataElement = Data_Foreign.unsafeReadTagged("HTMLDataElement");
  var readHTMLDListElement = Data_Foreign.unsafeReadTagged("HTMLDListElement");
  var readHTMLCanvasElement = Data_Foreign.unsafeReadTagged("HTMLCanvasElement");
  var readHTMLButtonElement = Data_Foreign.unsafeReadTagged("HTMLButtonElement");
  var readHTMLBodyElement = Data_Foreign.unsafeReadTagged("HTMLBodyElement");
  var readHTMLBaseElement = Data_Foreign.unsafeReadTagged("HTMLBaseElement");
  var readHTMLBRElement = Data_Foreign.unsafeReadTagged("HTMLBRElement");
  var readHTMLAudioElement = Data_Foreign.unsafeReadTagged("HTMLAudioElement");
  var readHTMLAreaElement = Data_Foreign.unsafeReadTagged("HTMLAreaElement");
  var readHTMLAnchorElement = Data_Foreign.unsafeReadTagged("HTMLAnchorElement");
  var htmlVideoElementToHTMLMediaElement = Unsafe_Coerce.unsafeCoerce;
  var htmlUListElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTrackElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTitleElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTimeElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTextAreaElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTemplateElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTableSectionElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTableRowElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTableHeaderCellElementToHTMLTableCellElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTableElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTableDataCellElementToHTMLTableCellElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTableColElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTableCellElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlTableCaptionElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlStyleElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlSpanElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlSourceElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlSelectElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlScriptElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlQuoteElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlProgressElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlPreElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlParamElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlParagraphElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlOutputElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlOptionElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlOptGroupElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlObjectElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlOListElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlModElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlMeterElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlMetaElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlMediaElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlMapElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlLinkElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlLegendElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlLabelElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlLIElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlKeygenElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlInputElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlImageElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlIFrameElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlHtmlElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlHeadingElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlHeadElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlHRElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlFormElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlFieldSetElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlEmbedElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlElementToParentNode = Unsafe_Coerce.unsafeCoerce;
  var htmlElementToNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
  var htmlElementToNode = Unsafe_Coerce.unsafeCoerce;
  var htmlElementToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var htmlElementToElement = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToParentNode = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToNode = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToDocument = Unsafe_Coerce.unsafeCoerce;
  var htmlDivElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlDataListElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlDataElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlDListElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlCanvasElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlButtonElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlBodyElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlBaseElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlBRElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlAudioElementToHTMLMediaElement = Unsafe_Coerce.unsafeCoerce;
  var htmlAreaElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var htmlAnchorElementToHTMLElement = Unsafe_Coerce.unsafeCoerce;
  exports["htmlAnchorElementToHTMLElement"] = htmlAnchorElementToHTMLElement;
  exports["htmlAreaElementToHTMLElement"] = htmlAreaElementToHTMLElement;
  exports["htmlAudioElementToHTMLMediaElement"] = htmlAudioElementToHTMLMediaElement;
  exports["htmlBRElementToHTMLElement"] = htmlBRElementToHTMLElement;
  exports["htmlBaseElementToHTMLElement"] = htmlBaseElementToHTMLElement;
  exports["htmlBodyElementToHTMLElement"] = htmlBodyElementToHTMLElement;
  exports["htmlButtonElementToHTMLElement"] = htmlButtonElementToHTMLElement;
  exports["htmlCanvasElementToHTMLElement"] = htmlCanvasElementToHTMLElement;
  exports["htmlDListElementToHTMLElement"] = htmlDListElementToHTMLElement;
  exports["htmlDataElementToHTMLElement"] = htmlDataElementToHTMLElement;
  exports["htmlDataListElementToHTMLElement"] = htmlDataListElementToHTMLElement;
  exports["htmlDivElementToHTMLElement"] = htmlDivElementToHTMLElement;
  exports["htmlDocumentToDocument"] = htmlDocumentToDocument;
  exports["htmlDocumentToEventTarget"] = htmlDocumentToEventTarget;
  exports["htmlDocumentToNode"] = htmlDocumentToNode;
  exports["htmlDocumentToNonElementParentNode"] = htmlDocumentToNonElementParentNode;
  exports["htmlDocumentToParentNode"] = htmlDocumentToParentNode;
  exports["htmlElementToElement"] = htmlElementToElement;
  exports["htmlElementToEventTarget"] = htmlElementToEventTarget;
  exports["htmlElementToNode"] = htmlElementToNode;
  exports["htmlElementToNonDocumentTypeChildNode"] = htmlElementToNonDocumentTypeChildNode;
  exports["htmlElementToParentNode"] = htmlElementToParentNode;
  exports["htmlEmbedElementToHTMLElement"] = htmlEmbedElementToHTMLElement;
  exports["htmlFieldSetElementToHTMLElement"] = htmlFieldSetElementToHTMLElement;
  exports["htmlFormElementToHTMLElement"] = htmlFormElementToHTMLElement;
  exports["htmlHRElementToHTMLElement"] = htmlHRElementToHTMLElement;
  exports["htmlHeadElementToHTMLElement"] = htmlHeadElementToHTMLElement;
  exports["htmlHeadingElementToHTMLElement"] = htmlHeadingElementToHTMLElement;
  exports["htmlHtmlElementToHTMLElement"] = htmlHtmlElementToHTMLElement;
  exports["htmlIFrameElementToHTMLElement"] = htmlIFrameElementToHTMLElement;
  exports["htmlImageElementToHTMLElement"] = htmlImageElementToHTMLElement;
  exports["htmlInputElementToHTMLElement"] = htmlInputElementToHTMLElement;
  exports["htmlKeygenElementToHTMLElement"] = htmlKeygenElementToHTMLElement;
  exports["htmlLIElementToHTMLElement"] = htmlLIElementToHTMLElement;
  exports["htmlLabelElementToHTMLElement"] = htmlLabelElementToHTMLElement;
  exports["htmlLegendElementToHTMLElement"] = htmlLegendElementToHTMLElement;
  exports["htmlLinkElementToHTMLElement"] = htmlLinkElementToHTMLElement;
  exports["htmlMapElementToHTMLElement"] = htmlMapElementToHTMLElement;
  exports["htmlMediaElementToHTMLElement"] = htmlMediaElementToHTMLElement;
  exports["htmlMetaElementToHTMLElement"] = htmlMetaElementToHTMLElement;
  exports["htmlMeterElementToHTMLElement"] = htmlMeterElementToHTMLElement;
  exports["htmlModElementToHTMLElement"] = htmlModElementToHTMLElement;
  exports["htmlOListElementToHTMLElement"] = htmlOListElementToHTMLElement;
  exports["htmlObjectElementToHTMLElement"] = htmlObjectElementToHTMLElement;
  exports["htmlOptGroupElementToHTMLElement"] = htmlOptGroupElementToHTMLElement;
  exports["htmlOptionElementToHTMLElement"] = htmlOptionElementToHTMLElement;
  exports["htmlOutputElementToHTMLElement"] = htmlOutputElementToHTMLElement;
  exports["htmlParagraphElementToHTMLElement"] = htmlParagraphElementToHTMLElement;
  exports["htmlParamElementToHTMLElement"] = htmlParamElementToHTMLElement;
  exports["htmlPreElementToHTMLElement"] = htmlPreElementToHTMLElement;
  exports["htmlProgressElementToHTMLElement"] = htmlProgressElementToHTMLElement;
  exports["htmlQuoteElementToHTMLElement"] = htmlQuoteElementToHTMLElement;
  exports["htmlScriptElementToHTMLElement"] = htmlScriptElementToHTMLElement;
  exports["htmlSelectElementToHTMLElement"] = htmlSelectElementToHTMLElement;
  exports["htmlSourceElementToHTMLElement"] = htmlSourceElementToHTMLElement;
  exports["htmlSpanElementToHTMLElement"] = htmlSpanElementToHTMLElement;
  exports["htmlStyleElementToHTMLElement"] = htmlStyleElementToHTMLElement;
  exports["htmlTableCaptionElementToHTMLElement"] = htmlTableCaptionElementToHTMLElement;
  exports["htmlTableCellElementToHTMLElement"] = htmlTableCellElementToHTMLElement;
  exports["htmlTableColElementToHTMLElement"] = htmlTableColElementToHTMLElement;
  exports["htmlTableDataCellElementToHTMLTableCellElement"] = htmlTableDataCellElementToHTMLTableCellElement;
  exports["htmlTableElementToHTMLElement"] = htmlTableElementToHTMLElement;
  exports["htmlTableHeaderCellElementToHTMLTableCellElement"] = htmlTableHeaderCellElementToHTMLTableCellElement;
  exports["htmlTableRowElementToHTMLElement"] = htmlTableRowElementToHTMLElement;
  exports["htmlTableSectionElementToHTMLElement"] = htmlTableSectionElementToHTMLElement;
  exports["htmlTemplateElementToHTMLElement"] = htmlTemplateElementToHTMLElement;
  exports["htmlTextAreaElementToHTMLElement"] = htmlTextAreaElementToHTMLElement;
  exports["htmlTimeElementToHTMLElement"] = htmlTimeElementToHTMLElement;
  exports["htmlTitleElementToHTMLElement"] = htmlTitleElementToHTMLElement;
  exports["htmlTrackElementToHTMLElement"] = htmlTrackElementToHTMLElement;
  exports["htmlUListElementToHTMLElement"] = htmlUListElementToHTMLElement;
  exports["htmlVideoElementToHTMLMediaElement"] = htmlVideoElementToHTMLMediaElement;
  exports["readHTMLAnchorElement"] = readHTMLAnchorElement;
  exports["readHTMLAreaElement"] = readHTMLAreaElement;
  exports["readHTMLAudioElement"] = readHTMLAudioElement;
  exports["readHTMLBRElement"] = readHTMLBRElement;
  exports["readHTMLBaseElement"] = readHTMLBaseElement;
  exports["readHTMLBodyElement"] = readHTMLBodyElement;
  exports["readHTMLButtonElement"] = readHTMLButtonElement;
  exports["readHTMLCanvasElement"] = readHTMLCanvasElement;
  exports["readHTMLDListElement"] = readHTMLDListElement;
  exports["readHTMLDataElement"] = readHTMLDataElement;
  exports["readHTMLDataListElement"] = readHTMLDataListElement;
  exports["readHTMLDivElement"] = readHTMLDivElement;
  exports["readHTMLDocument"] = readHTMLDocument;
  exports["readHTMLElement"] = readHTMLElement;
  exports["readHTMLEmbedElement"] = readHTMLEmbedElement;
  exports["readHTMLFieldSetElement"] = readHTMLFieldSetElement;
  exports["readHTMLFormElement"] = readHTMLFormElement;
  exports["readHTMLHRElement"] = readHTMLHRElement;
  exports["readHTMLHeadElement"] = readHTMLHeadElement;
  exports["readHTMLHeadingElement"] = readHTMLHeadingElement;
  exports["readHTMLHtmlElement"] = readHTMLHtmlElement;
  exports["readHTMLIFrameElement"] = readHTMLIFrameElement;
  exports["readHTMLImageElement"] = readHTMLImageElement;
  exports["readHTMLInputElement"] = readHTMLInputElement;
  exports["readHTMLKeygenElement"] = readHTMLKeygenElement;
  exports["readHTMLLIElement"] = readHTMLLIElement;
  exports["readHTMLLabelElement"] = readHTMLLabelElement;
  exports["readHTMLLegendElement"] = readHTMLLegendElement;
  exports["readHTMLLinkElement"] = readHTMLLinkElement;
  exports["readHTMLMapElement"] = readHTMLMapElement;
  exports["readHTMLMediaElement"] = readHTMLMediaElement;
  exports["readHTMLMetaElement"] = readHTMLMetaElement;
  exports["readHTMLMeterElement"] = readHTMLMeterElement;
  exports["readHTMLModElement"] = readHTMLModElement;
  exports["readHTMLOListElement"] = readHTMLOListElement;
  exports["readHTMLObjectElement"] = readHTMLObjectElement;
  exports["readHTMLOptGroupElement"] = readHTMLOptGroupElement;
  exports["readHTMLOptionElement"] = readHTMLOptionElement;
  exports["readHTMLOutputElement"] = readHTMLOutputElement;
  exports["readHTMLParagraphElement"] = readHTMLParagraphElement;
  exports["readHTMLParamElement"] = readHTMLParamElement;
  exports["readHTMLPreElement"] = readHTMLPreElement;
  exports["readHTMLProgressElement"] = readHTMLProgressElement;
  exports["readHTMLQuoteElement"] = readHTMLQuoteElement;
  exports["readHTMLScriptElement"] = readHTMLScriptElement;
  exports["readHTMLSelectElement"] = readHTMLSelectElement;
  exports["readHTMLSourceElement"] = readHTMLSourceElement;
  exports["readHTMLSpanElement"] = readHTMLSpanElement;
  exports["readHTMLStyleElement"] = readHTMLStyleElement;
  exports["readHTMLTableCaptionElement"] = readHTMLTableCaptionElement;
  exports["readHTMLTableCellElement"] = readHTMLTableCellElement;
  exports["readHTMLTableColElement"] = readHTMLTableColElement;
  exports["readHTMLTableDataCellElement"] = readHTMLTableDataCellElement;
  exports["readHTMLTableElement"] = readHTMLTableElement;
  exports["readHTMLTableHeaderCellElement"] = readHTMLTableHeaderCellElement;
  exports["readHTMLTableRowElement"] = readHTMLTableRowElement;
  exports["readHTMLTableSectionElement"] = readHTMLTableSectionElement;
  exports["readHTMLTemplateElement"] = readHTMLTemplateElement;
  exports["readHTMLTextAreaElement"] = readHTMLTextAreaElement;
  exports["readHTMLTimeElement"] = readHTMLTimeElement;
  exports["readHTMLTitleElement"] = readHTMLTitleElement;
  exports["readHTMLTrackElement"] = readHTMLTrackElement;
  exports["readHTMLUListElement"] = readHTMLUListElement;
  exports["readHTMLVideoElement"] = readHTMLVideoElement;
  exports["windowToEventTarget"] = windowToEventTarget;
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };
})(PS["DOM.HTML.Document"] = PS["DOM.HTML.Document"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Document"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var body = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._body($0));
  };
  exports["body"] = body;
})(PS["DOM.HTML.Document"] = PS["DOM.HTML.Document"] || {});
(function(exports) {
    "use strict";

  exports.dataTransfer = function (e) {
    return e.dataTransfer;
  };
})(PS["DOM.HTML.Event.DragEvent"] = PS["DOM.HTML.Event.DragEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var readHashChangeEvent = Data_Foreign.unsafeReadTagged("HashChangeEvent");
  var readErrorEvent = Data_Foreign.unsafeReadTagged("ErrorEvent");
  var readDragEvent = Data_Foreign.unsafeReadTagged("DragEvent");
  var hashChangeEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var errorEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var dragEventToEvent = Unsafe_Coerce.unsafeCoerce;
  exports["dragEventToEvent"] = dragEventToEvent;
  exports["errorEventToEvent"] = errorEventToEvent;
  exports["hashChangeEventToEvent"] = hashChangeEventToEvent;
  exports["readDragEvent"] = readDragEvent;
  exports["readErrorEvent"] = readErrorEvent;
  exports["readHashChangeEvent"] = readHashChangeEvent;
})(PS["DOM.HTML.Event.Types"] = PS["DOM.HTML.Event.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Event.DragEvent"];
  var DOM_HTML_Event_DataTransfer = PS["DOM.HTML.Event.DataTransfer"];
  var DOM_HTML_Event_Types = PS["DOM.HTML.Event.Types"];
  exports["dataTransfer"] = $foreign.dataTransfer;
})(PS["DOM.HTML.Event.DragEvent"] = PS["DOM.HTML.Event.DragEvent"] || {});
(function(exports) {
    "use strict";

  exports.message = function (e) {
    return e.message;
  };

  exports.fileName = function (e) {
    return e.filename;
  };

  exports.lineNo = function (e) {
    return e.lineno;
  };

  exports.colNo = function (e) {
    return e.colno;
  };
})(PS["DOM.HTML.Event.ErrorEvent"] = PS["DOM.HTML.Event.ErrorEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Event.ErrorEvent"];
  var DOM_HTML_Event_Types = PS["DOM.HTML.Event.Types"];
  exports["colNo"] = $foreign.colNo;
  exports["fileName"] = $foreign.fileName;
  exports["lineNo"] = $foreign.lineNo;
  exports["message"] = $foreign.message;
})(PS["DOM.HTML.Event.ErrorEvent"] = PS["DOM.HTML.Event.ErrorEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];        
  var wheel = "wheel";
  var visibilitychange = "visibilitychange";
  var unload = "unload";
  var transitionend = "transitionend";
  var touchstart = "touchstart";
  var touchmove = "touchmove";
  var touchleave = "touchleave";
  var touchenter = "touchenter";
  var touchend = "touchend";
  var touchcancel = "touchcancel";
  var timeupdate = "timeupdate";
  var timeout = "timeout";
  var suspend = "suspend";
  var submit = "submit";
  var stalled = "stalled";
  var show = "show";
  var select = "select";
  var seeking = "seeking";
  var seeked = "seeked";
  var scroll = "scroll";
  var resize = "resize";
  var reset = "reset";
  var readystatechange = "readystatechange";
  var ratechange = "ratechange";
  var progress = "progress";
  var popstate = "popstate";
  var playing = "playing";
  var play = "play";
  var pause = "pause";
  var paste = "paste";
  var pageshow = "pageshow";
  var pagehide = "pagehide";
  var open = "open";
  var mouseup = "mouseup";
  var mouseover = "mouseover";
  var mouseout = "mouseout";
  var mousemove = "mousemove";
  var mouseleave = "mouseleave";
  var mouseenter = "mouseenter";
  var mousedown = "mousedown";
  var message = "message";
  var loadstart = "loadstart";
  var loadend = "loadend";
  var loadedmetadata = "loadedmetadata";
  var loadeddata = "loadeddata";
  var load = "load";
  var keyup = "keyup";
  var keypress = "keypress";
  var keydown = "keydown";
  var input = "input";
  var hashchange = "hashchange";
  var focus = "focus";
  var error = "error";
  var drop = "drop";
  var dragstart = "dragstart";
  var dragover = "dragover";
  var dragleave = "dragleave";
  var dragenter = "dragenter";
  var dragend = "dragend";
  var drag = "drag";
  var dblclick = "dblclick";
  var cut = "cut";
  var copy = "copy";
  var contextmenu = "contextmenu";
  var compositionupdate = "compositionupdate";
  var compositionstart = "compositionstart";
  var compositionend = "compositionend";
  var complete = "complete";
  var click = "click";
  var change = "change";
  var blur = "blur";
  var beforeunload = "beforeunload";
  var animationstart = "animationstart";
  var animationiteration = "animationiteration";
  var animationend = "animationend";
  var abort = "abort";
  exports["abort"] = abort;
  exports["animationend"] = animationend;
  exports["animationiteration"] = animationiteration;
  exports["animationstart"] = animationstart;
  exports["beforeunload"] = beforeunload;
  exports["blur"] = blur;
  exports["change"] = change;
  exports["click"] = click;
  exports["complete"] = complete;
  exports["compositionend"] = compositionend;
  exports["compositionstart"] = compositionstart;
  exports["compositionupdate"] = compositionupdate;
  exports["contextmenu"] = contextmenu;
  exports["copy"] = copy;
  exports["cut"] = cut;
  exports["dblclick"] = dblclick;
  exports["drag"] = drag;
  exports["dragend"] = dragend;
  exports["dragenter"] = dragenter;
  exports["dragleave"] = dragleave;
  exports["dragover"] = dragover;
  exports["dragstart"] = dragstart;
  exports["drop"] = drop;
  exports["error"] = error;
  exports["focus"] = focus;
  exports["hashchange"] = hashchange;
  exports["input"] = input;
  exports["keydown"] = keydown;
  exports["keypress"] = keypress;
  exports["keyup"] = keyup;
  exports["load"] = load;
  exports["loadeddata"] = loadeddata;
  exports["loadedmetadata"] = loadedmetadata;
  exports["loadend"] = loadend;
  exports["loadstart"] = loadstart;
  exports["message"] = message;
  exports["mousedown"] = mousedown;
  exports["mouseenter"] = mouseenter;
  exports["mouseleave"] = mouseleave;
  exports["mousemove"] = mousemove;
  exports["mouseout"] = mouseout;
  exports["mouseover"] = mouseover;
  exports["mouseup"] = mouseup;
  exports["open"] = open;
  exports["pagehide"] = pagehide;
  exports["pageshow"] = pageshow;
  exports["paste"] = paste;
  exports["pause"] = pause;
  exports["play"] = play;
  exports["playing"] = playing;
  exports["popstate"] = popstate;
  exports["progress"] = progress;
  exports["ratechange"] = ratechange;
  exports["readystatechange"] = readystatechange;
  exports["reset"] = reset;
  exports["resize"] = resize;
  exports["scroll"] = scroll;
  exports["seeked"] = seeked;
  exports["seeking"] = seeking;
  exports["select"] = select;
  exports["show"] = show;
  exports["stalled"] = stalled;
  exports["submit"] = submit;
  exports["suspend"] = suspend;
  exports["timeout"] = timeout;
  exports["timeupdate"] = timeupdate;
  exports["touchcancel"] = touchcancel;
  exports["touchend"] = touchend;
  exports["touchenter"] = touchenter;
  exports["touchleave"] = touchleave;
  exports["touchmove"] = touchmove;
  exports["touchstart"] = touchstart;
  exports["transitionend"] = transitionend;
  exports["unload"] = unload;
  exports["visibilitychange"] = visibilitychange;
  exports["wheel"] = wheel;
})(PS["DOM.HTML.Event.EventTypes"] = PS["DOM.HTML.Event.EventTypes"] || {});
(function(exports) {
    "use strict";

  exports.oldURL = function (e) {
    return e.oldURL;
  };

  exports.newURL = function (e) {
    return e.newURL;
  };
})(PS["DOM.HTML.Event.HashChangeEvent"] = PS["DOM.HTML.Event.HashChangeEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Event.HashChangeEvent"];
  var DOM_HTML_Event_Types = PS["DOM.HTML.Event.Types"];
  exports["newURL"] = $foreign.newURL;
  exports["oldURL"] = $foreign.oldURL;
})(PS["DOM.HTML.Event.HashChangeEvent"] = PS["DOM.HTML.Event.HashChangeEvent"] || {});
(function(exports) {
    "use strict";

  exports.target = function (a) {
    return function () {
      return a.target;
    };
  };

  exports.setTarget = function (target) {
    return function (a) {
      return function () {
        a.target = target;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.download = function (a) {
    return function () {
      return a.download;
    };
  };

  exports.setDownload = function (download) {
    return function (a) {
      return function () {
        a.download = download;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rel = function (a) {
    return function () {
      return a.rel;
    };
  };

  exports.setRel = function (rel) {
    return function (a) {
      return function () {
        a.rel = rel;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rev = function (a) {
    return function () {
      return a.rev;
    };
  };

  exports.setRev = function (rev) {
    return function (a) {
      return function () {
        a.rev = rev;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.relList = function (a) {
    return function () {
      return a.relList;
    };
  };

  // ----------------------------------------------------------------------------

  exports.hreflang = function (a) {
    return function () {
      return a.hreflang;
    };
  };

  exports.setHreflang = function (hreflang) {
    return function (a) {
      return function () {
        a.hreflang = hreflang;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (a) {
    return function () {
      return a.type;
    };
  };

  exports.setType = function (type) {
    return function (a) {
      return function () {
        a.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.text = function (a) {
    return function () {
      return a.text;
    };
  };

  exports.setText = function (text) {
    return function (a) {
      return function () {
        a.text = text;
      };
    };
  };
})(PS["DOM.HTML.HTMLAnchorElement"] = PS["DOM.HTML.HTMLAnchorElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLAnchorElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Prelude = PS["Prelude"];
  exports["download"] = $foreign.download;
  exports["hreflang"] = $foreign.hreflang;
  exports["rel"] = $foreign.rel;
  exports["relList"] = $foreign.relList;
  exports["rev"] = $foreign.rev;
  exports["setDownload"] = $foreign.setDownload;
  exports["setHreflang"] = $foreign.setHreflang;
  exports["setRel"] = $foreign.setRel;
  exports["setRev"] = $foreign.setRev;
  exports["setTarget"] = $foreign.setTarget;
  exports["setText"] = $foreign.setText;
  exports["setType"] = $foreign.setType;
  exports["target"] = $foreign.target;
  exports["text"] = $foreign.text;
  exports["type_"] = $foreign.type_;
})(PS["DOM.HTML.HTMLAnchorElement"] = PS["DOM.HTML.HTMLAnchorElement"] || {});
(function(exports) {
    "use strict";

  exports.alt = function (area) {
    return function () {
      return area.alt;
    };
  };

  exports.setAlt = function (alt) {
    return function (area) {
      return function () {
        area.alt = alt;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.coords = function (area) {
    return function () {
      return area.coords;
    };
  };

  exports.setCoords = function (coords) {
    return function (area) {
      return function () {
        area.coords = coords;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.shape = function (area) {
    return function () {
      return area.shape;
    };
  };

  exports.setShape = function (shape) {
    return function (area) {
      return function () {
        area.shape = shape;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.target = function (area) {
    return function () {
      return area.target;
    };
  };

  exports.setTarget = function (target) {
    return function (area) {
      return function () {
        area.target = target;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.download = function (area) {
    return function () {
      return area.download;
    };
  };

  exports.setDownload = function (download) {
    return function (area) {
      return function () {
        area.download = download;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rel = function (area) {
    return function () {
      return area.rel;
    };
  };

  exports.setRel = function (rel) {
    return function (area) {
      return function () {
        area.rel = rel;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.relList = function (area) {
    return function () {
      return area.relList;
    };
  };

  // ----------------------------------------------------------------------------

  exports.hreflang = function (area) {
    return function () {
      return area.hreflang;
    };
  };

  exports.setHreflang = function (hreflang) {
    return function (area) {
      return function () {
        area.hreflang = hreflang;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (area) {
    return function () {
      return area.type;
    };
  };

  exports.setType = function (type) {
    return function (area) {
      return function () {
        area.type = type;
      };
    };
  };
})(PS["DOM.HTML.HTMLAreaElement"] = PS["DOM.HTML.HTMLAreaElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLAreaElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Prelude = PS["Prelude"];
  exports["alt"] = $foreign.alt;
  exports["coords"] = $foreign.coords;
  exports["download"] = $foreign.download;
  exports["hreflang"] = $foreign.hreflang;
  exports["rel"] = $foreign.rel;
  exports["relList"] = $foreign.relList;
  exports["setAlt"] = $foreign.setAlt;
  exports["setCoords"] = $foreign.setCoords;
  exports["setDownload"] = $foreign.setDownload;
  exports["setHreflang"] = $foreign.setHreflang;
  exports["setRel"] = $foreign.setRel;
  exports["setShape"] = $foreign.setShape;
  exports["setTarget"] = $foreign.setTarget;
  exports["setType"] = $foreign.setType;
  exports["shape"] = $foreign.shape;
  exports["target"] = $foreign.target;
  exports["type_"] = $foreign.type_;
})(PS["DOM.HTML.HTMLAreaElement"] = PS["DOM.HTML.HTMLAreaElement"] || {});
(function(exports) {
    "use strict";

  exports.href = function (base) {
    return function () {
      return base.href;
    };
  };

  exports.setHref = function (href) {
    return function (base) {
      return function () {
        base.href = href;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.target = function (base) {
    return function () {
      return base.target;
    };
  };

  exports.setTarget = function (target) {
    return function (base) {
      return function () {
        base.target = target;
      };
    };
  };
})(PS["DOM.HTML.HTMLBaseElement"] = PS["DOM.HTML.HTMLBaseElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLBaseElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["href"] = $foreign.href;
  exports["setHref"] = $foreign.setHref;
  exports["setTarget"] = $foreign.setTarget;
  exports["target"] = $foreign.target;
})(PS["DOM.HTML.HTMLBaseElement"] = PS["DOM.HTML.HTMLBaseElement"] || {});
(function(exports) {
    "use strict";

  exports.autofocus = function (button) {
    return function () {
      return button.autofocus;
    };
  };

  exports.setAutofocus = function (autofocus) {
    return function (button) {
      return function () {
        button.autofocus = autofocus;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.disabled = function (button) {
    return function () {
      return button.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (button) {
      return function () {
        button.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (button) {
    return function () {
      return button.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.formAction = function (button) {
    return function () {
      return button.formAction;
    };
  };

  exports.setFormAction = function (formAction) {
    return function (button) {
      return function () {
        button.formAction = formAction;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formEnctype = function (button) {
    return function () {
      return button.formEnctype;
    };
  };

  exports.setFormEnctype = function (formEnctype) {
    return function (button) {
      return function () {
        button.formEnctype = formEnctype;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formMethod = function (button) {
    return function () {
      return button.formMethod;
    };
  };

  exports.setFormMethod = function (formMethod) {
    return function (button) {
      return function () {
        button.formMethod = formMethod;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formNoValidate = function (button) {
    return function () {
      return button.formNoValidate;
    };
  };

  exports.setFormNoValidate = function (formNoValidate) {
    return function (button) {
      return function () {
        button.formNoValidate = formNoValidate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formTarget = function (button) {
    return function () {
      return button.formTarget;
    };
  };

  exports.setFormTarget = function (formTarget) {
    return function (button) {
      return function () {
        button.formTarget = formTarget;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (button) {
    return function () {
      return button.name;
    };
  };

  exports.setName = function (name) {
    return function (button) {
      return function () {
        button.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (button) {
    return function () {
      return button.type;
    };
  };

  exports.setType = function (type) {
    return function (button) {
      return function () {
        button.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (button) {
    return function () {
      return button.value;
    };
  };

  exports.setValue = function (value) {
    return function (button) {
      return function () {
        button.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (button) {
    return function () {
      return button.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (button) {
    return function () {
      return button.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (button) {
    return function () {
      return button.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (button) {
    return function () {
      return button.checkValidity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (button) {
      return function () {
        button.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (button) {
    return function () {
      return button.labels;
    };
  };
})(PS["DOM.HTML.HTMLButtonElement"] = PS["DOM.HTML.HTMLButtonElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLButtonElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var form = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($0));
  };
  exports["form"] = form;
  exports["autofocus"] = $foreign.autofocus;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["disabled"] = $foreign.disabled;
  exports["formAction"] = $foreign.formAction;
  exports["formEnctype"] = $foreign.formEnctype;
  exports["formMethod"] = $foreign.formMethod;
  exports["formNoValidate"] = $foreign.formNoValidate;
  exports["formTarget"] = $foreign.formTarget;
  exports["labels"] = $foreign.labels;
  exports["name"] = $foreign.name;
  exports["setAutofocus"] = $foreign.setAutofocus;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["setFormAction"] = $foreign.setFormAction;
  exports["setFormEnctype"] = $foreign.setFormEnctype;
  exports["setFormMethod"] = $foreign.setFormMethod;
  exports["setFormNoValidate"] = $foreign.setFormNoValidate;
  exports["setFormTarget"] = $foreign.setFormTarget;
  exports["setName"] = $foreign.setName;
  exports["setType"] = $foreign.setType;
  exports["setValue"] = $foreign.setValue;
  exports["type_"] = $foreign.type_;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["validity"] = $foreign.validity;
  exports["value"] = $foreign.value;
  exports["willValidate"] = $foreign.willValidate;
})(PS["DOM.HTML.HTMLButtonElement"] = PS["DOM.HTML.HTMLButtonElement"] || {});
(function(exports) {
    "use strict";

  exports.width = function (canvas) {
    return function () {
      return canvas.width;
    };
  };

  exports.setWidth = function (width) {
    return function (canvas) {
      return function () {
        canvas.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (canvas) {
    return function () {
      return canvas.height;
    };
  };

  exports.setHeight = function (height) {
    return function (canvas) {
      return function () {
        canvas.height = height;
      };
    };
  };
})(PS["DOM.HTML.HTMLCanvasElement"] = PS["DOM.HTML.HTMLCanvasElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLCanvasElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["height"] = $foreign.height;
  exports["setHeight"] = $foreign.setHeight;
  exports["setWidth"] = $foreign.setWidth;
  exports["width"] = $foreign.width;
})(PS["DOM.HTML.HTMLCanvasElement"] = PS["DOM.HTML.HTMLCanvasElement"] || {});
(function(exports) {
    "use strict";

  exports.value = function (data) {
    return function () {
      return data.value;
    };
  };

  exports.setValue = function (value) {
    return function (data) {
      return function () {
        data.value = value;
      };
    };
  };
})(PS["DOM.HTML.HTMLDataElement"] = PS["DOM.HTML.HTMLDataElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLDataElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["setValue"] = $foreign.setValue;
  exports["value"] = $foreign.value;
})(PS["DOM.HTML.HTMLDataElement"] = PS["DOM.HTML.HTMLDataElement"] || {});
(function(exports) {
    "use strict";

  exports.options = function (dle) {
    return function () {
      return dle.options;
    };
  };
})(PS["DOM.HTML.HTMLDataListElement"] = PS["DOM.HTML.HTMLDataListElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLDataListElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["options"] = $foreign.options;
})(PS["DOM.HTML.HTMLDataListElement"] = PS["DOM.HTML.HTMLDataListElement"] || {});
(function(exports) {
    "use strict";

  // ----------------------------------------------------------------------------

  exports.title = function (elt) {
    return function () {
      return elt.title;
    };
  };

  exports.setTitle = function (title) {
    return function (elt) {
      return function () {
        elt.title = title;
        return {};
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.lang = function (elt) {
    return function () {
      return elt.lang;
    };
  };

  exports.setLang = function (lang) {
    return function (elt) {
      return function () {
        elt.lang = lang;
        return {};
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.dir = function (elt) {
    return function () {
      return elt.dir;
    };
  };

  exports.setDir = function (dir) {
    return function (elt) {
      return function () {
        elt.dir = dir;
        return {};
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.className = function (elt) {
    return function () {
      return elt.className;
    };
  };

  exports.setClassName = function (className) {
    return function (elt) {
      return function () {
        elt.className = className;
        return {};
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.hidden = function (elt) {
    return function () {
      return elt.hidden;
    };
  };

  exports.setHidden = function (hidden) {
    return function (elt) {
      return function () {
        elt.hidden = hidden;
        return {};
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.click = function (elt) {
    return function () {
      return elt.click();
    };
  };

  // ----------------------------------------------------------------------------

  exports.tabIndex = function (elt) {
    return function () {
      return elt.tabIndex;
    };
  };

  exports.setTabIndex = function (tabIndex) {
    return function (elt) {
      return function () {
        elt.tabIndex = tabIndex;
        return {};
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.hidden = function (elt) {
    return function () {
      return elt.hidden;
    };
  };

  exports.setHidden = function (hidden) {
    return function (elt) {
      return function () {
        elt.hidden = hidden;
        return {};
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.focus = function (elt) {
    return function () {
      return elt.focus();
    };
  };

  // ----------------------------------------------------------------------------

  exports.blur = function (elt) {
    return function () {
      return elt.blur();
    };
  };

  // ----------------------------------------------------------------------------

  exports.draggable = function (elt) {
    return function () {
      return elt.draggable;
    };
  };

  exports.setDraggable = function (draggable) {
    return function (elt) {
      return function () {
        elt.draggable = draggable;
        return {};
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.contentEditable = function (elt) {
    return function () {
      return elt.contentEditable;
    };
  };

  exports.setContentEditable = function (contentEditable) {
    return function (elt) {
      return function () {
        elt.contentEditable = contentEditable;
        return {};
      };
    };
  };

  exports.isContentEditable = function (elt) {
    return function () {
      return elt.isContentEditable;
    };
  };

  // ----------------------------------------------------------------------------

  exports.spellcheck = function (elt) {
    return function () {
      return elt.spellcheck;
    };
  };

  exports.setSpellcheck = function (spellcheck) {
    return function (elt) {
      return function () {
        elt.spellcheck = spellcheck;
        return {};
      };
    };
  };

  // - CSSOM ---------------------------------------------------------------------

  exports.getBoundingClientRect = function (el) {
    return function () {
      return el.getBoundingClientRect();
    };
  };

  exports._offsetParent = function (el) {
    return function () {
      return el.offsetParent;
    };
  };

  exports.offsetTop = function (el) {
    return function () {
      return el.offsetTop;
    };
  };

  exports.offsetLeft = function (el) {
    return function () {
      return el.offsetLeft;
    };
  };

  exports.offsetWidth = function (el) {
    return function () {
      return el.offsetWidth;
    };
  };

  exports.offsetHeight = function (el) {
    return function () {
      return el.offsetHeight;
    };
  };
})(PS["DOM.HTML.HTMLElement"] = PS["DOM.HTML.HTMLElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var offsetParent = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._offsetParent($0));
  };
  exports["offsetParent"] = offsetParent;
  exports["blur"] = $foreign.blur;
  exports["className"] = $foreign.className;
  exports["click"] = $foreign.click;
  exports["contentEditable"] = $foreign.contentEditable;
  exports["dir"] = $foreign.dir;
  exports["draggable"] = $foreign.draggable;
  exports["focus"] = $foreign.focus;
  exports["getBoundingClientRect"] = $foreign.getBoundingClientRect;
  exports["hidden"] = $foreign.hidden;
  exports["isContentEditable"] = $foreign.isContentEditable;
  exports["lang"] = $foreign.lang;
  exports["offsetHeight"] = $foreign.offsetHeight;
  exports["offsetLeft"] = $foreign.offsetLeft;
  exports["offsetTop"] = $foreign.offsetTop;
  exports["offsetWidth"] = $foreign.offsetWidth;
  exports["setClassName"] = $foreign.setClassName;
  exports["setContentEditable"] = $foreign.setContentEditable;
  exports["setDir"] = $foreign.setDir;
  exports["setDraggable"] = $foreign.setDraggable;
  exports["setHidden"] = $foreign.setHidden;
  exports["setLang"] = $foreign.setLang;
  exports["setSpellcheck"] = $foreign.setSpellcheck;
  exports["setTabIndex"] = $foreign.setTabIndex;
  exports["setTitle"] = $foreign.setTitle;
  exports["spellcheck"] = $foreign.spellcheck;
  exports["tabIndex"] = $foreign.tabIndex;
  exports["title"] = $foreign.title;
})(PS["DOM.HTML.HTMLElement"] = PS["DOM.HTML.HTMLElement"] || {});
(function(exports) {
    "use strict";

  exports.src = function (embed) {
    return function () {
      return embed.src;
    };
  };

  exports.setSrc = function (src) {
    return function (embed) {
      return function () {
        embed.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (embed) {
    return function () {
      return embed.type;
    };
  };

  exports.setType = function (type) {
    return function (embed) {
      return function () {
        embed.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.width = function (embed) {
    return function () {
      return embed.width;
    };
  };

  exports.setWidth = function (width) {
    return function (embed) {
      return function () {
        embed.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (embed) {
    return function () {
      return embed.height;
    };
  };

  exports.setHeight = function (height) {
    return function (embed) {
      return function () {
        embed.height = height;
      };
    };
  };
})(PS["DOM.HTML.HTMLEmbedElement"] = PS["DOM.HTML.HTMLEmbedElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLEmbedElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["height"] = $foreign.height;
  exports["setHeight"] = $foreign.setHeight;
  exports["setSrc"] = $foreign.setSrc;
  exports["setType"] = $foreign.setType;
  exports["setWidth"] = $foreign.setWidth;
  exports["src"] = $foreign.src;
  exports["type_"] = $foreign.type_;
  exports["width"] = $foreign.width;
})(PS["DOM.HTML.HTMLEmbedElement"] = PS["DOM.HTML.HTMLEmbedElement"] || {});
(function(exports) {
    "use strict";

  exports.disabled = function (fieldset) {
    return function () {
      return fieldset.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (fieldset) {
      return function () {
        fieldset.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (fieldset) {
    return function () {
      return fieldset.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (fieldset) {
    return function () {
      return fieldset.name;
    };
  };

  exports.setName = function (name) {
    return function (fieldset) {
      return function () {
        fieldset.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (fieldset) {
    return function () {
      return fieldset.type;
    };
  };

  exports.setType = function (type) {
    return function (fieldset) {
      return function () {
        fieldset.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (fieldset) {
    return function () {
      return fieldset.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (fieldset) {
    return function () {
      return fieldset.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (fieldset) {
    return function () {
      return fieldset.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (fieldset) {
    return function () {
      return fieldset.checkValidity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (fieldset) {
      return function () {
        fieldset.setCustomValidity(value);
      };
    };
  };
})(PS["DOM.HTML.HTMLFieldSetElement"] = PS["DOM.HTML.HTMLFieldSetElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLFieldSetElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var form = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($0));
  };
  exports["form"] = form;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["disabled"] = $foreign.disabled;
  exports["name"] = $foreign.name;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["setName"] = $foreign.setName;
  exports["setType"] = $foreign.setType;
  exports["type_"] = $foreign.type_;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["validity"] = $foreign.validity;
  exports["willValidate"] = $foreign.willValidate;
})(PS["DOM.HTML.HTMLFieldSetElement"] = PS["DOM.HTML.HTMLFieldSetElement"] || {});
(function(exports) {
    "use strict";

  exports.acceptCharset = function (form) {
    return function () {
      return form.acceptCharset;
    };
  };

  exports.setAcceptCharset = function (acceptCharset) {
    return function (form) {
      return function () {
        form.acceptCharset = acceptCharset;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.action = function (form) {
    return function () {
      return form.action;
    };
  };

  exports.setAction = function (action) {
    return function (form) {
      return function () {
        form.action = action;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.autocomplete = function (form) {
    return function () {
      return form.autocomplete;
    };
  };

  exports.setAutocomplete = function (autocomplete) {
    return function (form) {
      return function () {
        form.autocomplete = autocomplete;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.enctype = function (form) {
    return function () {
      return form.enctype;
    };
  };

  exports.setEnctype = function (enctype) {
    return function (form) {
      return function () {
        form.enctype = enctype;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.encoding = function (form) {
    return function () {
      return form.encoding;
    };
  };

  exports.setEncoding = function (encoding) {
    return function (form) {
      return function () {
        form.encoding = encoding;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.method = function (form) {
    return function () {
      return form.method;
    };
  };

  exports.setMethod = function (method) {
    return function (form) {
      return function () {
        form.method = method;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (form) {
    return function () {
      return form.name;
    };
  };

  exports.setName = function (name) {
    return function (form) {
      return function () {
        form.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.noValidate = function (form) {
    return function () {
      return form.noValidate;
    };
  };

  exports.setNoValidate = function (noValidate) {
    return function (form) {
      return function () {
        form.noValidate = noValidate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.target = function (form) {
    return function () {
      return form.target;
    };
  };

  exports.setTarget = function (target) {
    return function (form) {
      return function () {
        form.target = target;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.length = function (form) {
    return function () {
      return form.length;
    };
  };

  // ----------------------------------------------------------------------------

  exports.submit = function (form) {
    return function () {
      form.submit();
    };
  };

  // ----------------------------------------------------------------------------

  exports.reset = function (form) {
    return function () {
      form.reset();
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (form) {
    return function () {
      return form.checkValidity();
    };
  };
})(PS["DOM.HTML.HTMLFormElement"] = PS["DOM.HTML.HTMLFormElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLFormElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["acceptCharset"] = $foreign.acceptCharset;
  exports["action"] = $foreign.action;
  exports["autocomplete"] = $foreign.autocomplete;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["encoding"] = $foreign.encoding;
  exports["enctype"] = $foreign.enctype;
  exports["length"] = $foreign.length;
  exports["method"] = $foreign.method;
  exports["name"] = $foreign.name;
  exports["noValidate"] = $foreign.noValidate;
  exports["reset"] = $foreign.reset;
  exports["setAcceptCharset"] = $foreign.setAcceptCharset;
  exports["setAction"] = $foreign.setAction;
  exports["setAutocomplete"] = $foreign.setAutocomplete;
  exports["setEncoding"] = $foreign.setEncoding;
  exports["setEnctype"] = $foreign.setEnctype;
  exports["setMethod"] = $foreign.setMethod;
  exports["setName"] = $foreign.setName;
  exports["setNoValidate"] = $foreign.setNoValidate;
  exports["setTarget"] = $foreign.setTarget;
  exports["submit"] = $foreign.submit;
  exports["target"] = $foreign.target;
})(PS["DOM.HTML.HTMLFormElement"] = PS["DOM.HTML.HTMLFormElement"] || {});
(function(exports) {
    "use strict";

  exports.src = function (iframe) {
    return function () {
      return iframe.src;
    };
  };

  exports.setSrc = function (src) {
    return function (iframe) {
      return function () {
        iframe.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.srcdoc = function (iframe) {
    return function () {
      return iframe.srcdoc;
    };
  };

  exports.setSrcdoc = function (srcdoc) {
    return function (iframe) {
      return function () {
        iframe.srcdoc = srcdoc;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (iframe) {
    return function () {
      return iframe.name;
    };
  };

  exports.setName = function (name) {
    return function (iframe) {
      return function () {
        iframe.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.width = function (iframe) {
    return function () {
      return iframe.width;
    };
  };

  exports.setWidth = function (width) {
    return function (iframe) {
      return function () {
        iframe.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (iframe) {
    return function () {
      return iframe.height;
    };
  };

  exports.setHeight = function (height) {
    return function (iframe) {
      return function () {
        iframe.height = height;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._contentDocument = function (iframe) {
    return function () {
      return iframe.contentDocument;
    };
  };
})(PS["DOM.HTML.HTMLIFrameElement"] = PS["DOM.HTML.HTMLIFrameElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLIFrameElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var contentDocument = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._contentDocument($0));
  };
  exports["contentDocument"] = contentDocument;
  exports["height"] = $foreign.height;
  exports["name"] = $foreign.name;
  exports["setHeight"] = $foreign.setHeight;
  exports["setName"] = $foreign.setName;
  exports["setSrc"] = $foreign.setSrc;
  exports["setSrcdoc"] = $foreign.setSrcdoc;
  exports["setWidth"] = $foreign.setWidth;
  exports["src"] = $foreign.src;
  exports["srcdoc"] = $foreign.srcdoc;
  exports["width"] = $foreign.width;
})(PS["DOM.HTML.HTMLIFrameElement"] = PS["DOM.HTML.HTMLIFrameElement"] || {});
(function(exports) {
  /* global Image */
  "use strict";

  exports.create = function () {
    return function () {
      return new Image();
    };
  };

  exports["create'"] = function (width) {
    return function (height) {
      return function () {
        return new Image(width, height);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.alt = function (image) {
    return function () {
      return image.alt;
    };
  };

  exports.setAlt = function (alt) {
    return function (image) {
      return function () {
        image.alt = alt;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.src = function (image) {
    return function () {
      return image.src;
    };
  };

  exports.setSrc = function (src) {
    return function (image) {
      return function () {
        image.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.crossOrigin = function (image) {
    return function () {
      return image.crossOrigin;
    };
  };

  exports.setCrossOrigin = function (crossOrigin) {
    return function (image) {
      return function () {
        image.crossOrigin = crossOrigin;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.useMap = function (image) {
    return function () {
      return image.useMap;
    };
  };

  exports.setUseMap = function (useMap) {
    return function (image) {
      return function () {
        image.useMap = useMap;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.isMap = function (image) {
    return function () {
      return image.isMap;
    };
  };

  exports.setIsMap = function (isMap) {
    return function (image) {
      return function () {
        image.isMap = isMap;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.width = function (image) {
    return function () {
      return image.width;
    };
  };

  exports.setWidth = function (width) {
    return function (image) {
      return function () {
        image.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (image) {
    return function () {
      return image.height;
    };
  };

  exports.setHeight = function (height) {
    return function (image) {
      return function () {
        image.height = height;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.naturalWidth = function (image) {
    return function () {
      return image.naturalWidth;
    };
  };

  exports.naturalHeight = function (image) {
    return function () {
      return image.naturalHeight;
    };
  };

  // ----------------------------------------------------------------------------

  exports.complete = function (image) {
    return function () {
      return image.complete;
    };
  };
})(PS["DOM.HTML.HTMLImageElement"] = PS["DOM.HTML.HTMLImageElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLImageElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["alt"] = $foreign.alt;
  exports["complete"] = $foreign.complete;
  exports["create"] = $foreign.create;
  exports["create'"] = $foreign["create'"];
  exports["crossOrigin"] = $foreign.crossOrigin;
  exports["height"] = $foreign.height;
  exports["isMap"] = $foreign.isMap;
  exports["naturalHeight"] = $foreign.naturalHeight;
  exports["naturalWidth"] = $foreign.naturalWidth;
  exports["setAlt"] = $foreign.setAlt;
  exports["setCrossOrigin"] = $foreign.setCrossOrigin;
  exports["setHeight"] = $foreign.setHeight;
  exports["setIsMap"] = $foreign.setIsMap;
  exports["setSrc"] = $foreign.setSrc;
  exports["setUseMap"] = $foreign.setUseMap;
  exports["setWidth"] = $foreign.setWidth;
  exports["src"] = $foreign.src;
  exports["useMap"] = $foreign.useMap;
  exports["width"] = $foreign.width;
})(PS["DOM.HTML.HTMLImageElement"] = PS["DOM.HTML.HTMLImageElement"] || {});
(function(exports) {
    "use strict";

  exports.accept = function (input) {
    return function () {
      return input.accept;
    };
  };

  exports.setAccept = function (accept) {
    return function (input) {
      return function () {
        input.accept = accept;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.alt = function (input) {
    return function () {
      return input.alt;
    };
  };

  exports.setAlt = function (alt) {
    return function (input) {
      return function () {
        input.alt = alt;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.autocomplete = function (input) {
    return function () {
      return input.autocomplete;
    };
  };

  exports.setAutocomplete = function (autocomplete) {
    return function (input) {
      return function () {
        input.autocomplete = autocomplete;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.autofocus = function (input) {
    return function () {
      return input.autofocus;
    };
  };

  exports.setAutofocus = function (autofocus) {
    return function (input) {
      return function () {
        input.autofocus = autofocus;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultChecked = function (input) {
    return function () {
      return input.defaultChecked;
    };
  };

  exports.setDefaultChecked = function (defaultChecked) {
    return function (input) {
      return function () {
        input.defaultChecked = defaultChecked;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.checked = function (input) {
    return function () {
      return input.checked;
    };
  };

  exports.setChecked = function (checked) {
    return function (input) {
      return function () {
        input.checked = checked;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.dirName = function (input) {
    return function () {
      return input.dirName;
    };
  };

  exports.setDirName = function (dirName) {
    return function (input) {
      return function () {
        input.dirName = dirName;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.disabled = function (input) {
    return function () {
      return input.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (input) {
      return function () {
        input.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (input) {
    return function () {
      return input.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports._files = function (input) {
    return function () {
      return input.files;
    };
  };

  // ----------------------------------------------------------------------------

  exports.formAction = function (input) {
    return function () {
      return input.formAction;
    };
  };

  exports.setFormAction = function (formAction) {
    return function (input) {
      return function () {
        input.formAction = formAction;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formEnctype = function (input) {
    return function () {
      return input.formEnctype;
    };
  };

  exports.setFormEnctype = function (formEnctype) {
    return function (input) {
      return function () {
        input.formEnctype = formEnctype;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formMethod = function (input) {
    return function () {
      return input.formMethod;
    };
  };

  exports.setFormMethod = function (formMethod) {
    return function (input) {
      return function () {
        input.formMethod = formMethod;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formNoValidate = function (input) {
    return function () {
      return input.formNoValidate;
    };
  };

  exports.setFormNoValidate = function (formNoValidate) {
    return function (input) {
      return function () {
        input.formNoValidate = formNoValidate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.formTarget = function (input) {
    return function () {
      return input.formTarget;
    };
  };

  exports.setFormTarget = function (formTarget) {
    return function (input) {
      return function () {
        input.formTarget = formTarget;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (input) {
    return function () {
      return input.height;
    };
  };

  exports.setHeight = function (height) {
    return function (input) {
      return function () {
        input.height = height;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.indeterminate = function (input) {
    return function () {
      return input.indeterminate;
    };
  };

  exports.setIndeterminate = function (indeterminate) {
    return function (input) {
      return function () {
        input.indeterminate = indeterminate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._list = function (input) {
    return function () {
      return input.list;
    };
  };

  // ----------------------------------------------------------------------------

  exports.max = function (input) {
    return function () {
      return input.max;
    };
  };

  exports.setMax = function (max) {
    return function (input) {
      return function () {
        input.max = max;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.maxLength = function (input) {
    return function () {
      return input.maxLength;
    };
  };

  exports.setMaxLength = function (maxLength) {
    return function (input) {
      return function () {
        input.maxLength = maxLength;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.min = function (input) {
    return function () {
      return input.min;
    };
  };

  exports.setMin = function (min) {
    return function (input) {
      return function () {
        input.min = min;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.minLength = function (input) {
    return function () {
      return input.minLength;
    };
  };

  exports.setMinLength = function (minLength) {
    return function (input) {
      return function () {
        input.minLength = minLength;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.multiple = function (input) {
    return function () {
      return input.multiple;
    };
  };

  exports.setMultiple = function (multiple) {
    return function (input) {
      return function () {
        input.multiple = multiple;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (input) {
    return function () {
      return input.name;
    };
  };

  exports.setName = function (name) {
    return function (input) {
      return function () {
        input.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.pattern = function (input) {
    return function () {
      return input.pattern;
    };
  };

  exports.setPattern = function (pattern) {
    return function (input) {
      return function () {
        input.pattern = pattern;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.placeholder = function (input) {
    return function () {
      return input.placeholder;
    };
  };

  exports.setPlaceholder = function (placeholder) {
    return function (input) {
      return function () {
        input.placeholder = placeholder;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.readOnly = function (input) {
    return function () {
      return input.readOnly;
    };
  };

  exports.setReadOnly = function (readOnly) {
    return function (input) {
      return function () {
        input.readOnly = readOnly;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.required = function (input) {
    return function () {
      return input.required;
    };
  };

  exports.setRequired = function (required) {
    return function (input) {
      return function () {
        input.required = required;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.size = function (input) {
    return function () {
      return input.size;
    };
  };

  exports.setSize = function (size) {
    return function (input) {
      return function () {
        input.size = size;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.src = function (input) {
    return function () {
      return input.src;
    };
  };

  exports.setSrc = function (src) {
    return function (input) {
      return function () {
        input.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.step = function (input) {
    return function () {
      return input.step;
    };
  };

  exports.setStep = function (step) {
    return function (input) {
      return function () {
        input.step = step;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (input) {
    return function () {
      return input.type;
    };
  };

  exports.setType = function (type) {
    return function (input) {
      return function () {
        input.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultValue = function (input) {
    return function () {
      return input.defaultValue;
    };
  };

  exports.setDefaultValue = function (defaultValue) {
    return function (input) {
      return function () {
        input.defaultValue = defaultValue;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (input) {
    return function () {
      return input.value;
    };
  };

  exports.setValue = function (value) {
    return function (input) {
      return function () {
        input.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.valueAsDate = function (input) {
    return function () {
      return input.valueAsDate;
    };
  };

  exports.setValueAsDate = function (valueAsDate) {
    return function (input) {
      return function () {
        input.valueAsDate = valueAsDate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.valueAsNumber = function (input) {
    return function () {
      return input.valueAsNumber;
    };
  };

  exports.setValueAsNumber = function (valueAsNumber) {
    return function (input) {
      return function () {
        input.valueAsNumber = valueAsNumber;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.width = function (input) {
    return function () {
      return input.width;
    };
  };

  exports.setWidth = function (width) {
    return function (input) {
      return function () {
        input.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports["stepUp'"] = function (n) {
    return function (input) {
      return function () {
        input.stepUp(n);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports["stepDown'"] = function (n) {
    return function (input) {
      return function () {
        input.stepDown(n);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (input) {
    return function () {
      return input.value;
    };
  };

  exports.setValue = function (value) {
    return function (input) {
      return function () {
        input.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (input) {
    return function () {
      return input.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (input) {
    return function () {
      return input.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (input) {
    return function () {
      return input.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (input) {
    return function () {
      return input.checkValidity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (input) {
      return function () {
        input.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (input) {
    return function () {
      return input.labels;
    };
  };

  // ----------------------------------------------------------------------------

  exports.select = function (input) {
    return function () {
      input.select();
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionStart = function (input) {
    return function () {
      return input.selectionStart;
    };
  };

  exports.setSelectionStart = function (selectionStart) {
    return function (input) {
      return function () {
        input.selectionStart = selectionStart;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionEnd = function (input) {
    return function () {
      return input.selectionEnd;
    };
  };

  exports.setSelectionEnd = function (selectionEnd) {
    return function (input) {
      return function () {
        input.selectionEnd = selectionEnd;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionDirection = function (input) {
    return function () {
      return input.selectionDirection;
    };
  };

  exports.setSelectionDirection = function (selectionDirection) {
    return function (input) {
      return function () {
        input.selectionDirection = selectionDirection;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.setRangeText = function (replacement) {
    return function (input) {
      return function () {
        input.setRangeText(replacement);
      };
    };
  };

  exports["setRangeText'"] = function (replacement) {
    return function (start) {
      return function (end) {
        return function (selectionMode) {
          return function (input) {
            return function () {
              input.setRangeText(replacement, start, end, selectionMode, input);
            };
          };
        };
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.setSelectionRange = function (start) {
    return function (end) {
      return function (direction) {
        return function (input) {
          return function () {
            input.setSelectionRange(start, end, direction, input);
          };
        };
      };
    };
  };
})(PS["DOM.HTML.HTMLInputElement"] = PS["DOM.HTML.HTMLInputElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var SelectionMode = function (x) {
      return x;
  };
  var start = "start";
  var showSelectionMode = new Data_Show.Show(function (v) {
      return "(SelectionMode " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var select = "select";
  var runSelectionMode = function (v) {
      return v;
  };
  var preserve = "preserve";
  var eqSelectionMode = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v === v1;
      };
  });
  var ordSelectionMode = new Data_Ord.Ord(function () {
      return eqSelectionMode;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordString)(v)(v1);
      };
  });
  var end = "end";
  exports["end"] = end;
  exports["preserve"] = preserve;
  exports["runSelectionMode"] = runSelectionMode;
  exports["select"] = select;
  exports["start"] = start;
  exports["eqSelectionMode"] = eqSelectionMode;
  exports["ordSelectionMode"] = ordSelectionMode;
  exports["showSelectionMode"] = showSelectionMode;
})(PS["DOM.HTML.SelectionMode"] = PS["DOM.HTML.SelectionMode"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.isValid = function (date) {
    return !isNaN(date.getTime());
  };

  exports.toInstantImpl = function (just) {
    return function (nothing) {
      return function (date) {
        var t = date.getTime();
        return isNaN(t) ? nothing : just(t);
      };
    };
  };

  exports.jsdate = function (parts) {
    var t = Date.UTC(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
    return new Date(t);
  };

  exports.jsdateLocal = function (parts) {
    return function () {
      return new Date(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
    };
  };

  exports.dateMethod = function (method, date) {
    return date[method]();
  };

  exports.dateMethodEff = function (method, date) {
    return function () {
      return date[method]();
    };
  };

  exports.parse = function (dateString) {
    return function () {
      return new Date(dateString);
    };
  };
})(PS["Data.JSDate"] = PS["Data.JSDate"] || {});
(function(exports) {
    "use strict";

  exports.canonicalDateImpl = function (ctor, y, m, d) {
    var date = new Date(Date.UTC(y, m - 1, d));
    return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
  };

  exports.calcWeekday = function (y, m, d) {
    return new Date(Date.UTC(y, m - 1, d)).getUTCDay();
  };

  exports.calcDiff = function (y1, m1, d1, y2, m2, d2) {
    var dt1 = new Date(Date.UTC(y1, m1 - 1, d1));
    var dt2 = new Date(Date.UTC(y2, m2 - 1, d2));
    return dt1.getTime() - dt2.getTime();
  };
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Year = function (x) {
      return x;
  };
  var Monday = (function () {
      function Monday() {

      };
      Monday.value = new Monday();
      return Monday;
  })();
  var Tuesday = (function () {
      function Tuesday() {

      };
      Tuesday.value = new Tuesday();
      return Tuesday;
  })();
  var Wednesday = (function () {
      function Wednesday() {

      };
      Wednesday.value = new Wednesday();
      return Wednesday;
  })();
  var Thursday = (function () {
      function Thursday() {

      };
      Thursday.value = new Thursday();
      return Thursday;
  })();
  var Friday = (function () {
      function Friday() {

      };
      Friday.value = new Friday();
      return Friday;
  })();
  var Saturday = (function () {
      function Saturday() {

      };
      Saturday.value = new Saturday();
      return Saturday;
  })();
  var Sunday = (function () {
      function Sunday() {

      };
      Sunday.value = new Sunday();
      return Sunday;
  })();
  var January = (function () {
      function January() {

      };
      January.value = new January();
      return January;
  })();
  var February = (function () {
      function February() {

      };
      February.value = new February();
      return February;
  })();
  var March = (function () {
      function March() {

      };
      March.value = new March();
      return March;
  })();
  var April = (function () {
      function April() {

      };
      April.value = new April();
      return April;
  })();
  var May = (function () {
      function May() {

      };
      May.value = new May();
      return May;
  })();
  var June = (function () {
      function June() {

      };
      June.value = new June();
      return June;
  })();
  var July = (function () {
      function July() {

      };
      July.value = new July();
      return July;
  })();
  var August = (function () {
      function August() {

      };
      August.value = new August();
      return August;
  })();
  var September = (function () {
      function September() {

      };
      September.value = new September();
      return September;
  })();
  var October = (function () {
      function October() {

      };
      October.value = new October();
      return October;
  })();
  var November = (function () {
      function November() {

      };
      November.value = new November();
      return November;
  })();
  var December = (function () {
      function December() {

      };
      December.value = new December();
      return December;
  })();
  var Day = function (x) {
      return x;
  };
  var showYear = new Data_Show.Show(function (v) {
      return "(Year " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showWeekday = new Data_Show.Show(function (v) {
      if (v instanceof Monday) {
          return "Monday";
      };
      if (v instanceof Tuesday) {
          return "Tuesday";
      };
      if (v instanceof Wednesday) {
          return "Wednesday";
      };
      if (v instanceof Thursday) {
          return "Thursday";
      };
      if (v instanceof Friday) {
          return "Friday";
      };
      if (v instanceof Saturday) {
          return "Saturday";
      };
      if (v instanceof Sunday) {
          return "Sunday";
      };
      throw new Error("Failed pattern match at Data.Date.Component line 189, column 1 - line 189, column 37: " + [ v.constructor.name ]);
  });
  var showMonth = new Data_Show.Show(function (v) {
      if (v instanceof January) {
          return "January";
      };
      if (v instanceof February) {
          return "February";
      };
      if (v instanceof March) {
          return "March";
      };
      if (v instanceof April) {
          return "April";
      };
      if (v instanceof May) {
          return "May";
      };
      if (v instanceof June) {
          return "June";
      };
      if (v instanceof July) {
          return "July";
      };
      if (v instanceof August) {
          return "August";
      };
      if (v instanceof September) {
          return "September";
      };
      if (v instanceof October) {
          return "October";
      };
      if (v instanceof November) {
          return "November";
      };
      if (v instanceof December) {
          return "December";
      };
      throw new Error("Failed pattern match at Data.Date.Component line 104, column 1 - line 104, column 33: " + [ v.constructor.name ]);
  });
  var showDay = new Data_Show.Show(function (v) {
      return "(Day " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var ordYear = Data_Ord.ordInt;
  var ordDay = Data_Ord.ordInt;
  var genericYear = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.Year" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Year))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Date.Component.Year", [ {
          sigConstructor: "Data.Date.Component.Year", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Date.Component.Year", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericInt)(v);
      } ]);
  });
  var genericWeekday = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.Monday" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Monday.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.Tuesday" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Tuesday.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.Wednesday" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Wednesday.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.Thursday" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Thursday.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.Friday" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Friday.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.Saturday" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Saturday.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.Sunday" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Sunday.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Date.Component.Weekday", [ {
          sigConstructor: "Data.Date.Component.Monday", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.Tuesday", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.Wednesday", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.Thursday", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.Friday", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.Saturday", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.Sunday", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof Monday) {
          return new Data_Generic.SProd("Data.Date.Component.Monday", [  ]);
      };
      if (v instanceof Tuesday) {
          return new Data_Generic.SProd("Data.Date.Component.Tuesday", [  ]);
      };
      if (v instanceof Wednesday) {
          return new Data_Generic.SProd("Data.Date.Component.Wednesday", [  ]);
      };
      if (v instanceof Thursday) {
          return new Data_Generic.SProd("Data.Date.Component.Thursday", [  ]);
      };
      if (v instanceof Friday) {
          return new Data_Generic.SProd("Data.Date.Component.Friday", [  ]);
      };
      if (v instanceof Saturday) {
          return new Data_Generic.SProd("Data.Date.Component.Saturday", [  ]);
      };
      if (v instanceof Sunday) {
          return new Data_Generic.SProd("Data.Date.Component.Sunday", [  ]);
      };
      throw new Error("Failed pattern match at Data.Date.Component line 159, column 8 - line 159, column 50: " + [ v.constructor.name ]);
  });
  var genericMonth = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.January" && v.value1.length === 0)) {
          return new Data_Maybe.Just(January.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.February" && v.value1.length === 0)) {
          return new Data_Maybe.Just(February.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.March" && v.value1.length === 0)) {
          return new Data_Maybe.Just(March.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.April" && v.value1.length === 0)) {
          return new Data_Maybe.Just(April.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.May" && v.value1.length === 0)) {
          return new Data_Maybe.Just(May.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.June" && v.value1.length === 0)) {
          return new Data_Maybe.Just(June.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.July" && v.value1.length === 0)) {
          return new Data_Maybe.Just(July.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.August" && v.value1.length === 0)) {
          return new Data_Maybe.Just(August.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.September" && v.value1.length === 0)) {
          return new Data_Maybe.Just(September.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.October" && v.value1.length === 0)) {
          return new Data_Maybe.Just(October.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.November" && v.value1.length === 0)) {
          return new Data_Maybe.Just(November.value);
      };
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.December" && v.value1.length === 0)) {
          return new Data_Maybe.Just(December.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Date.Component.Month", [ {
          sigConstructor: "Data.Date.Component.January", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.February", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.March", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.April", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.May", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.June", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.July", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.August", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.September", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.October", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.November", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Date.Component.December", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof January) {
          return new Data_Generic.SProd("Data.Date.Component.January", [  ]);
      };
      if (v instanceof February) {
          return new Data_Generic.SProd("Data.Date.Component.February", [  ]);
      };
      if (v instanceof March) {
          return new Data_Generic.SProd("Data.Date.Component.March", [  ]);
      };
      if (v instanceof April) {
          return new Data_Generic.SProd("Data.Date.Component.April", [  ]);
      };
      if (v instanceof May) {
          return new Data_Generic.SProd("Data.Date.Component.May", [  ]);
      };
      if (v instanceof June) {
          return new Data_Generic.SProd("Data.Date.Component.June", [  ]);
      };
      if (v instanceof July) {
          return new Data_Generic.SProd("Data.Date.Component.July", [  ]);
      };
      if (v instanceof August) {
          return new Data_Generic.SProd("Data.Date.Component.August", [  ]);
      };
      if (v instanceof September) {
          return new Data_Generic.SProd("Data.Date.Component.September", [  ]);
      };
      if (v instanceof October) {
          return new Data_Generic.SProd("Data.Date.Component.October", [  ]);
      };
      if (v instanceof November) {
          return new Data_Generic.SProd("Data.Date.Component.November", [  ]);
      };
      if (v instanceof December) {
          return new Data_Generic.SProd("Data.Date.Component.December", [  ]);
      };
      throw new Error("Failed pattern match at Data.Date.Component line 64, column 8 - line 64, column 46: " + [ v.constructor.name ]);
  });
  var genericDay = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Component.Day" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Day))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Date.Component.Day", [ {
          sigConstructor: "Data.Date.Component.Day", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Date.Component.Day", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericInt)(v);
      } ]);
  });
  var eqYear = Data_Eq.eqInt;
  var eqWeekday = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Monday && y instanceof Monday) {
              return true;
          };
          if (x instanceof Tuesday && y instanceof Tuesday) {
              return true;
          };
          if (x instanceof Wednesday && y instanceof Wednesday) {
              return true;
          };
          if (x instanceof Thursday && y instanceof Thursday) {
              return true;
          };
          if (x instanceof Friday && y instanceof Friday) {
              return true;
          };
          if (x instanceof Saturday && y instanceof Saturday) {
              return true;
          };
          if (x instanceof Sunday && y instanceof Sunday) {
              return true;
          };
          return false;
      };
  });
  var ordWeekday = new Data_Ord.Ord(function () {
      return eqWeekday;
  }, function (x) {
      return function (y) {
          if (x instanceof Monday && y instanceof Monday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Monday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Monday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Tuesday && y instanceof Tuesday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Tuesday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Tuesday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Wednesday && y instanceof Wednesday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Wednesday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Wednesday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Thursday && y instanceof Thursday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Thursday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Thursday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Friday && y instanceof Friday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Friday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Friday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Saturday && y instanceof Saturday) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Saturday) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Saturday) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Sunday && y instanceof Sunday) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component line 158, column 8 - line 158, column 42: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqMonth = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return true;
          };
          if (x instanceof February && y instanceof February) {
              return true;
          };
          if (x instanceof March && y instanceof March) {
              return true;
          };
          if (x instanceof April && y instanceof April) {
              return true;
          };
          if (x instanceof May && y instanceof May) {
              return true;
          };
          if (x instanceof June && y instanceof June) {
              return true;
          };
          if (x instanceof July && y instanceof July) {
              return true;
          };
          if (x instanceof August && y instanceof August) {
              return true;
          };
          if (x instanceof September && y instanceof September) {
              return true;
          };
          if (x instanceof October && y instanceof October) {
              return true;
          };
          if (x instanceof November && y instanceof November) {
              return true;
          };
          if (x instanceof December && y instanceof December) {
              return true;
          };
          return false;
      };
  });
  var ordMonth = new Data_Ord.Ord(function () {
      return eqMonth;
  }, function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof January) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof January) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof February && y instanceof February) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof February) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof February) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof March && y instanceof March) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof March) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof March) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof April && y instanceof April) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof April) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof April) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof May && y instanceof May) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof May) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof May) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof June && y instanceof June) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof June) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof June) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof July && y instanceof July) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof July) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof July) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof August && y instanceof August) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof August) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof August) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof September && y instanceof September) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof September) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof September) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof October && y instanceof October) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof October) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof October) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof November && y instanceof November) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof November) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof November) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof December && y instanceof December) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component line 63, column 8 - line 63, column 38: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqDay = Data_Eq.eqInt;
  var boundedYear = new Data_Bounded.Bounded(function () {
      return ordYear;
  }, -271820 | 0, 275759);
  var boundedWeekday = new Data_Bounded.Bounded(function () {
      return ordWeekday;
  }, Monday.value, Sunday.value);
  var boundedMonth = new Data_Bounded.Bounded(function () {
      return ordMonth;
  }, January.value, December.value);
  var boundedEnumYear = new Data_Enum.BoundedEnum(function () {
      return boundedYear;
  }, function () {
      return enumYear;
  }, 547580, function (v) {
      return v;
  }, function (n) {
      if (n >= (-271821 | 0) && n <= 275759) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 37, column 1 - line 37, column 45: " + [ n.constructor.name ]);
  });
  var enumYear = new Data_Enum.Enum(function () {
      return ordYear;
  }, function ($110) {
      return Data_Enum.toEnum(boundedEnumYear)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumYear)($110)));
  }, function ($111) {
      return Data_Enum.toEnum(boundedEnumYear)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumYear)($111)));
  });
  var boundedEnumWeekday = new Data_Enum.BoundedEnum(function () {
      return boundedWeekday;
  }, function () {
      return enumWeekday;
  }, 7, function (v) {
      if (v instanceof Monday) {
          return 1;
      };
      if (v instanceof Tuesday) {
          return 2;
      };
      if (v instanceof Wednesday) {
          return 3;
      };
      if (v instanceof Thursday) {
          return 4;
      };
      if (v instanceof Friday) {
          return 5;
      };
      if (v instanceof Saturday) {
          return 6;
      };
      if (v instanceof Sunday) {
          return 7;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 180, column 14 - line 189, column 1: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(Monday.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Tuesday.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Wednesday.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(Thursday.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(Friday.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(Saturday.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(Sunday.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumWeekday = new Data_Enum.Enum(function () {
      return ordWeekday;
  }, function ($112) {
      return Data_Enum.toEnum(boundedEnumWeekday)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumWeekday)($112)));
  }, function ($113) {
      return Data_Enum.toEnum(boundedEnumWeekday)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumWeekday)($113)));
  });
  var boundedEnumMonth = new Data_Enum.BoundedEnum(function () {
      return boundedMonth;
  }, function () {
      return enumMonth;
  }, 12, function (v) {
      if (v instanceof January) {
          return 1;
      };
      if (v instanceof February) {
          return 2;
      };
      if (v instanceof March) {
          return 3;
      };
      if (v instanceof April) {
          return 4;
      };
      if (v instanceof May) {
          return 5;
      };
      if (v instanceof June) {
          return 6;
      };
      if (v instanceof July) {
          return 7;
      };
      if (v instanceof August) {
          return 8;
      };
      if (v instanceof September) {
          return 9;
      };
      if (v instanceof October) {
          return 10;
      };
      if (v instanceof November) {
          return 11;
      };
      if (v instanceof December) {
          return 12;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 90, column 14 - line 104, column 1: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(January.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(February.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(March.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(April.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(May.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(June.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(July.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(August.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(September.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(October.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(November.value);
      };
      if (v === 12) {
          return new Data_Maybe.Just(December.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumMonth = new Data_Enum.Enum(function () {
      return ordMonth;
  }, function ($114) {
      return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMonth)($114)));
  }, function ($115) {
      return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMonth)($115)));
  });
  var boundedDay = new Data_Bounded.Bounded(function () {
      return ordDay;
  }, 1, 31);
  var boundedEnumDay = new Data_Enum.BoundedEnum(function () {
      return boundedDay;
  }, function () {
      return enumDay;
  }, 31, function (v) {
      return v;
  }, function (n) {
      if (n >= 1 && n <= 31) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component line 137, column 1 - line 137, column 43: " + [ n.constructor.name ]);
  });
  var enumDay = new Data_Enum.Enum(function () {
      return ordDay;
  }, function ($116) {
      return Data_Enum.toEnum(boundedEnumDay)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumDay)($116)));
  }, function ($117) {
      return Data_Enum.toEnum(boundedEnumDay)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumDay)($117)));
  });
  exports["January"] = January;
  exports["February"] = February;
  exports["March"] = March;
  exports["April"] = April;
  exports["May"] = May;
  exports["June"] = June;
  exports["July"] = July;
  exports["August"] = August;
  exports["September"] = September;
  exports["October"] = October;
  exports["November"] = November;
  exports["December"] = December;
  exports["Monday"] = Monday;
  exports["Tuesday"] = Tuesday;
  exports["Wednesday"] = Wednesday;
  exports["Thursday"] = Thursday;
  exports["Friday"] = Friday;
  exports["Saturday"] = Saturday;
  exports["Sunday"] = Sunday;
  exports["eqYear"] = eqYear;
  exports["ordYear"] = ordYear;
  exports["genericYear"] = genericYear;
  exports["boundedYear"] = boundedYear;
  exports["enumYear"] = enumYear;
  exports["boundedEnumYear"] = boundedEnumYear;
  exports["showYear"] = showYear;
  exports["eqMonth"] = eqMonth;
  exports["ordMonth"] = ordMonth;
  exports["genericMonth"] = genericMonth;
  exports["boundedMonth"] = boundedMonth;
  exports["enumMonth"] = enumMonth;
  exports["boundedEnumMonth"] = boundedEnumMonth;
  exports["showMonth"] = showMonth;
  exports["eqDay"] = eqDay;
  exports["ordDay"] = ordDay;
  exports["genericDay"] = genericDay;
  exports["boundedDay"] = boundedDay;
  exports["enumDay"] = enumDay;
  exports["boundedEnumDay"] = boundedEnumDay;
  exports["showDay"] = showDay;
  exports["eqWeekday"] = eqWeekday;
  exports["ordWeekday"] = ordWeekday;
  exports["genericWeekday"] = genericWeekday;
  exports["boundedWeekday"] = boundedWeekday;
  exports["enumWeekday"] = enumWeekday;
  exports["boundedEnumWeekday"] = boundedEnumWeekday;
  exports["showWeekday"] = showWeekday;
})(PS["Data.Date.Component"] = PS["Data.Date.Component"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Seconds = function (x) {
      return x;
  };
  var Minutes = function (x) {
      return x;
  };
  var Milliseconds = function (x) {
      return x;
  };
  var Hours = function (x) {
      return x;
  };
  var Days = function (x) {
      return x;
  };
  var Duration = function (fromDuration, toDuration) {
      this.fromDuration = fromDuration;
      this.toDuration = toDuration;
  };
  var toDuration = function (dict) {
      return dict.toDuration;
  };
  var showSeconds = new Data_Show.Show(function (v) {
      return "(Seconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showMinutes = new Data_Show.Show(function (v) {
      return "(Minutes " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showMilliseconds = new Data_Show.Show(function (v) {
      return "(Milliseconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showHours = new Data_Show.Show(function (v) {
      return "(Hours " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var showDays = new Data_Show.Show(function (v) {
      return "(Days " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
  });
  var semiringSeconds = Data_Semiring.semiringNumber;
  var semiringMinutes = Data_Semiring.semiringNumber;
  var semiringMilliseconds = Data_Semiring.semiringNumber;
  var semiringHours = Data_Semiring.semiringNumber;
  var semiringDays = Data_Semiring.semiringNumber;
  var ringSeconds = Data_Ring.ringNumber;
  var ringMinutes = Data_Ring.ringNumber;
  var ringMilliseconds = Data_Ring.ringNumber;
  var ringHours = Data_Ring.ringNumber;
  var ringDays = Data_Ring.ringNumber;
  var ordSeconds = Data_Ord.ordNumber;
  var ordMinutes = Data_Ord.ordNumber;
  var ordMilliseconds = Data_Ord.ordNumber;
  var ordHours = Data_Ord.ordNumber;
  var ordDays = Data_Ord.ordNumber;
  var newtypeSeconds = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Seconds);
  var newtypeMinutes = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Minutes);
  var newtypeMilliseconds = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Milliseconds);
  var newtypeHours = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Hours);
  var newtypeDays = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Days);
  var genericSeconds = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Time.Duration.Seconds" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Seconds))(Data_Generic.fromSpine(Data_Generic.genericNumber)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Time.Duration.Seconds", [ {
          sigConstructor: "Data.Time.Duration.Seconds", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Time.Duration.Seconds", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericNumber)(v);
      } ]);
  });
  var genericMinutes = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Time.Duration.Minutes" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Minutes))(Data_Generic.fromSpine(Data_Generic.genericNumber)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Time.Duration.Minutes", [ {
          sigConstructor: "Data.Time.Duration.Minutes", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Time.Duration.Minutes", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericNumber)(v);
      } ]);
  });
  var genericMilliseconds = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Time.Duration.Milliseconds" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Milliseconds))(Data_Generic.fromSpine(Data_Generic.genericNumber)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Time.Duration.Milliseconds", [ {
          sigConstructor: "Data.Time.Duration.Milliseconds", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Time.Duration.Milliseconds", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericNumber)(v);
      } ]);
  });
  var genericHours = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Time.Duration.Hours" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Hours))(Data_Generic.fromSpine(Data_Generic.genericNumber)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Time.Duration.Hours", [ {
          sigConstructor: "Data.Time.Duration.Hours", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Time.Duration.Hours", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericNumber)(v);
      } ]);
  });
  var genericDays = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Time.Duration.Days" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Days))(Data_Generic.fromSpine(Data_Generic.genericNumber)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Time.Duration.Days", [ {
          sigConstructor: "Data.Time.Duration.Days", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericNumber)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Time.Duration.Days", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericNumber)(v);
      } ]);
  });
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };
  var eqSeconds = Data_Eq.eqNumber;
  var eqMinutes = Data_Eq.eqNumber;
  var eqMilliseconds = Data_Eq.eqNumber;
  var eqHours = Data_Eq.eqNumber;
  var eqDays = Data_Eq.eqNumber;
  var durationSeconds = new Duration(Data_Newtype.over(newtypeSeconds)(newtypeMilliseconds)(Seconds)(function (v) {
      return v * 1000.0;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeSeconds)(Milliseconds)(function (v) {
      return v / 1000.0;
  }));
  var durationMinutes = new Duration(Data_Newtype.over(newtypeMinutes)(newtypeMilliseconds)(Minutes)(function (v) {
      return v * 60000.0;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeMinutes)(Milliseconds)(function (v) {
      return v / 60000.0;
  }));
  var durationMilliseconds = new Duration(Control_Category.id(Control_Category.categoryFn), Control_Category.id(Control_Category.categoryFn));
  var durationHours = new Duration(Data_Newtype.over(newtypeHours)(newtypeMilliseconds)(Hours)(function (v) {
      return v * 3600000.0;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeHours)(Milliseconds)(function (v) {
      return v / 3600000.0;
  }));
  var durationDays = new Duration(Data_Newtype.over(newtypeDays)(newtypeMilliseconds)(Days)(function (v) {
      return v * 8.64e7;
  }), Data_Newtype.over(newtypeMilliseconds)(newtypeDays)(Milliseconds)(function (v) {
      return v / 8.64e7;
  }));
  var convertDuration = function (dictDuration) {
      return function (dictDuration1) {
          return function ($80) {
              return toDuration(dictDuration1)(fromDuration(dictDuration)($80));
          };
      };
  };
  exports["Days"] = Days;
  exports["Hours"] = Hours;
  exports["Milliseconds"] = Milliseconds;
  exports["Minutes"] = Minutes;
  exports["Seconds"] = Seconds;
  exports["Duration"] = Duration;
  exports["convertDuration"] = convertDuration;
  exports["fromDuration"] = fromDuration;
  exports["toDuration"] = toDuration;
  exports["newtypeMilliseconds"] = newtypeMilliseconds;
  exports["genericMilliseconds"] = genericMilliseconds;
  exports["eqMilliseconds"] = eqMilliseconds;
  exports["ordMilliseconds"] = ordMilliseconds;
  exports["semiringMilliseconds"] = semiringMilliseconds;
  exports["ringMilliseconds"] = ringMilliseconds;
  exports["showMilliseconds"] = showMilliseconds;
  exports["newtypeSeconds"] = newtypeSeconds;
  exports["genericSeconds"] = genericSeconds;
  exports["eqSeconds"] = eqSeconds;
  exports["ordSeconds"] = ordSeconds;
  exports["semiringSeconds"] = semiringSeconds;
  exports["ringSeconds"] = ringSeconds;
  exports["showSeconds"] = showSeconds;
  exports["newtypeMinutes"] = newtypeMinutes;
  exports["genericMinutes"] = genericMinutes;
  exports["eqMinutes"] = eqMinutes;
  exports["ordMinutes"] = ordMinutes;
  exports["semiringMinutes"] = semiringMinutes;
  exports["ringMinutes"] = ringMinutes;
  exports["showMinutes"] = showMinutes;
  exports["newtypeHours"] = newtypeHours;
  exports["genericHours"] = genericHours;
  exports["eqHours"] = eqHours;
  exports["ordHours"] = ordHours;
  exports["semiringHours"] = semiringHours;
  exports["ringHours"] = ringHours;
  exports["showHours"] = showHours;
  exports["newtypeDays"] = newtypeDays;
  exports["genericDays"] = genericDays;
  exports["eqDays"] = eqDays;
  exports["ordDays"] = ordDays;
  exports["semiringDays"] = semiringDays;
  exports["ringDays"] = ringDays;
  exports["showDays"] = showDays;
  exports["durationMilliseconds"] = durationMilliseconds;
  exports["durationSeconds"] = durationSeconds;
  exports["durationMinutes"] = durationMinutes;
  exports["durationHours"] = durationHours;
  exports["durationDays"] = durationDays;
})(PS["Data.Time.Duration"] = PS["Data.Time.Duration"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Date"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var $$Date = (function () {
      function $$Date(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Date.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Date(value0, value1, value2);
              };
          };
      };
      return $$Date;
  })();
  var year = function (v) {
      return v.value0;
  };
  var weekday = function (v) {
      var n = $foreign.calcWeekday(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2);
      var $43 = n === 0;
      if ($43) {
          return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(7));
      };
      return Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumWeekday)(n));
  };
  var showDate = new Data_Show.Show(function (v) {
      return "(Date " + (Data_Show.show(Data_Date_Component.showYear)(v.value0) + (" " + (Data_Show.show(Data_Date_Component.showMonth)(v.value1) + (" " + (Data_Show.show(Data_Date_Component.showDay)(v.value2) + ")")))));
  });
  var month = function (v) {
      return v.value1;
  };
  var isLeapYear = function (y) {
      var y$prime = Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(y);
      return y$prime % 4 === 0 && (y$prime % 400 === 0 || !(y$prime % 100 === 0));
  };
  var genericDate = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Date.Date" && v.value1.length === 3)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just($$Date.create))(Data_Generic.fromSpine(Data_Date_Component.genericYear)(v["value1"][0](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Date_Component.genericMonth)(v["value1"][1](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Date_Component.genericDay)(v["value1"][2](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Date.Date", [ {
          sigConstructor: "Data.Date.Date", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Date_Component.genericYear)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Date_Component.genericMonth)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Date_Component.genericDay)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Date.Date", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Date_Component.genericYear)(v.value0);
      }, function ($dollarq) {
          return Data_Generic.toSpine(Data_Date_Component.genericMonth)(v.value1);
      }, function ($dollarq) {
          return Data_Generic.toSpine(Data_Date_Component.genericDay)(v.value2);
      } ]);
  });
  var eqDate = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
      };
  });
  var ordDate = new Data_Ord.Ord(function () {
      return eqDate;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
      };
  });
  var diff = function (dictDuration) {
      return function (v) {
          return function (v1) {
              return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(v.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v.value1), v.value2, v1.value0, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(v1.value1), v1.value2));
          };
      };
  };
  var day = function (v) {
      return v.value2;
  };
  var canonicalDate = function (y) {
      return function (m) {
          return function (d) {
              var mkDate = function (y$prime) {
                  return function (m$prime) {
                      return function (d$prime) {
                          return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                      };
                  };
              };
              return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
          };
      };
  };
  var exactDate = function (y) {
      return function (m) {
          return function (d) {
              var dt = new $$Date(y, m, d);
              var $95 = Data_Eq.eq(eqDate)(canonicalDate(y)(m)(d))(dt);
              if ($95) {
                  return new Data_Maybe.Just(dt);
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var boundedDate = new Data_Bounded.Bounded(function () {
      return ordDate;
  }, new $$Date(Data_Bounded.bottom(Data_Date_Component.boundedYear), Data_Bounded.bottom(Data_Date_Component.boundedMonth), Data_Bounded.bottom(Data_Date_Component.boundedDay)), new $$Date(Data_Bounded.top(Data_Date_Component.boundedYear), Data_Bounded.top(Data_Date_Component.boundedMonth), Data_Bounded.top(Data_Date_Component.boundedDay)));
  exports["canonicalDate"] = canonicalDate;
  exports["day"] = day;
  exports["diff"] = diff;
  exports["exactDate"] = exactDate;
  exports["isLeapYear"] = isLeapYear;
  exports["month"] = month;
  exports["weekday"] = weekday;
  exports["year"] = year;
  exports["eqDate"] = eqDate;
  exports["ordDate"] = ordDate;
  exports["genericDate"] = genericDate;
  exports["boundedDate"] = boundedDate;
  exports["showDate"] = showDate;
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
    "use strict";

  exports.calcDiff = function (rec1, rec2) {
    var msUTC1 = Date.UTC(rec1.year, rec1.month - 1, rec1.day, rec1.hour, rec1.minute, rec1.second, rec1.millisecond);
    var msUTC2 = Date.UTC(rec2.year, rec2.month - 1, rec2.day, rec2.hour, rec2.minute, rec2.second, rec2.millisecond);
    return msUTC1 - msUTC2;
  };

  exports.adjustImpl = function (just) {
    return function (nothing) {
      return function (offset) {
        return function (rec) {
          var msUTC = Date.UTC(rec.year, rec.month - 1, rec.day, rec.hour, rec.minute, rec.second, rec.millisecond);
          var dt = new Date(msUTC + offset);
          return isNaN(dt.getTime()) ? nothing : just({
            year: dt.getUTCFullYear(),
            month: dt.getUTCMonth() + 1,
            day: dt.getUTCDate(),
            hour: dt.getUTCHours(),
            minute: dt.getUTCMinutes(),
            second: dt.getUTCSeconds(),
            millisecond: dt.getUTCMilliseconds()
          });
        };
      };
    };
  };
})(PS["Data.DateTime"] = PS["Data.DateTime"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Second = function (x) {
      return x;
  };
  var Minute = function (x) {
      return x;
  };
  var Millisecond = function (x) {
      return x;
  };
  var Hour = function (x) {
      return x;
  };
  var showSecond = new Data_Show.Show(function (v) {
      return "(Second " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showMinute = new Data_Show.Show(function (v) {
      return "(Minute " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showMillisecond = new Data_Show.Show(function (v) {
      return "(Millisecond " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var showHour = new Data_Show.Show(function (v) {
      return "(Hour " + (Data_Show.show(Data_Show.showInt)(v) + ")");
  });
  var ordSecond = Data_Ord.ordInt;
  var ordMinute = Data_Ord.ordInt;
  var ordMillisecond = Data_Ord.ordInt;
  var ordHour = Data_Ord.ordInt;
  var genericSecond = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Time.Component.Second" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Second))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Time.Component.Second", [ {
          sigConstructor: "Data.Time.Component.Second", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Time.Component.Second", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericInt)(v);
      } ]);
  });
  var genericMinute = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Time.Component.Minute" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Minute))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Time.Component.Minute", [ {
          sigConstructor: "Data.Time.Component.Minute", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Time.Component.Minute", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericInt)(v);
      } ]);
  });
  var genericMillisecond = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Time.Component.Millisecond" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Millisecond))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Time.Component.Millisecond", [ {
          sigConstructor: "Data.Time.Component.Millisecond", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Time.Component.Millisecond", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericInt)(v);
      } ]);
  });
  var genericHour = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Time.Component.Hour" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Hour))(Data_Generic.fromSpine(Data_Generic.genericInt)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Time.Component.Hour", [ {
          sigConstructor: "Data.Time.Component.Hour", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericInt)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Time.Component.Hour", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericInt)(v);
      } ]);
  });
  var eqSecond = Data_Eq.eqInt;
  var eqMinute = Data_Eq.eqInt;
  var eqMillisecond = Data_Eq.eqInt;
  var eqHour = Data_Eq.eqInt;
  var boundedSecond = new Data_Bounded.Bounded(function () {
      return ordSecond;
  }, 0, 59);
  var boundedMinute = new Data_Bounded.Bounded(function () {
      return ordMinute;
  }, 0, 59);
  var boundedMillisecond = new Data_Bounded.Bounded(function () {
      return ordMillisecond;
  }, 0, 999);
  var boundedHour = new Data_Bounded.Bounded(function () {
      return ordHour;
  }, 0, 23);
  var boundedEnumSecond = new Data_Enum.BoundedEnum(function () {
      return boundedSecond;
  }, function () {
      return enumSecond;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 94, column 1 - line 94, column 49: " + [ n.constructor.name ]);
  });
  var enumSecond = new Data_Enum.Enum(function () {
      return ordSecond;
  }, function ($64) {
      return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumSecond)($64)));
  }, function ($65) {
      return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumSecond)($65)));
  });
  var boundedEnumMinute = new Data_Enum.BoundedEnum(function () {
      return boundedMinute;
  }, function () {
      return enumMinute;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 64, column 1 - line 64, column 49: " + [ n.constructor.name ]);
  });
  var enumMinute = new Data_Enum.Enum(function () {
      return ordMinute;
  }, function ($66) {
      return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMinute)($66)));
  }, function ($67) {
      return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMinute)($67)));
  });
  var boundedEnumMillisecond = new Data_Enum.BoundedEnum(function () {
      return boundedMillisecond;
  }, function () {
      return enumMillisecond;
  }, 1000, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 999) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 125, column 1 - line 125, column 59: " + [ n.constructor.name ]);
  });
  var enumMillisecond = new Data_Enum.Enum(function () {
      return ordMillisecond;
  }, function ($68) {
      return Data_Enum.toEnum(boundedEnumMillisecond)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMillisecond)($68)));
  }, function ($69) {
      return Data_Enum.toEnum(boundedEnumMillisecond)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMillisecond)($69)));
  });
  var boundedEnumHour = new Data_Enum.BoundedEnum(function () {
      return boundedHour;
  }, function () {
      return enumHour;
  }, 24, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 23) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component line 34, column 1 - line 34, column 45: " + [ n.constructor.name ]);
  });
  var enumHour = new Data_Enum.Enum(function () {
      return ordHour;
  }, function ($70) {
      return Data_Enum.toEnum(boundedEnumHour)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumHour)($70)));
  }, function ($71) {
      return Data_Enum.toEnum(boundedEnumHour)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumHour)($71)));
  });
  exports["eqHour"] = eqHour;
  exports["ordHour"] = ordHour;
  exports["genericHour"] = genericHour;
  exports["boundedHour"] = boundedHour;
  exports["enumHour"] = enumHour;
  exports["boundedEnumHour"] = boundedEnumHour;
  exports["showHour"] = showHour;
  exports["eqMinute"] = eqMinute;
  exports["ordMinute"] = ordMinute;
  exports["genericMinute"] = genericMinute;
  exports["boundedMinute"] = boundedMinute;
  exports["enumMinute"] = enumMinute;
  exports["boundedEnumMinute"] = boundedEnumMinute;
  exports["showMinute"] = showMinute;
  exports["eqSecond"] = eqSecond;
  exports["ordSecond"] = ordSecond;
  exports["genericSecond"] = genericSecond;
  exports["boundedSecond"] = boundedSecond;
  exports["enumSecond"] = enumSecond;
  exports["boundedEnumSecond"] = boundedEnumSecond;
  exports["showSecond"] = showSecond;
  exports["eqMillisecond"] = eqMillisecond;
  exports["ordMillisecond"] = ordMillisecond;
  exports["genericMillisecond"] = genericMillisecond;
  exports["boundedMillisecond"] = boundedMillisecond;
  exports["enumMillisecond"] = enumMillisecond;
  exports["boundedEnumMillisecond"] = boundedEnumMillisecond;
  exports["showMillisecond"] = showMillisecond;
})(PS["Data.Time.Component"] = PS["Data.Time.Component"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Time = (function () {
      function Time(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Time.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Time(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Time;
  })();
  var showTime = new Data_Show.Show(function (v) {
      return "(Time " + (Data_Show.show(Data_Time_Component.showHour)(v.value0) + (" " + (Data_Show.show(Data_Time_Component.showMinute)(v.value1) + (" " + (Data_Show.show(Data_Time_Component.showSecond)(v.value2) + (" " + (Data_Show.show(Data_Time_Component.showMillisecond)(v.value3) + ")")))))));
  });
  var setSecond = function (s) {
      return function (v) {
          return new Time(v.value0, v.value1, s, v.value3);
      };
  };
  var setMinute = function (m) {
      return function (v) {
          return new Time(v.value0, m, v.value2, v.value3);
      };
  };
  var setMillisecond = function (ms) {
      return function (v) {
          return new Time(v.value0, v.value1, v.value2, ms);
      };
  };
  var setHour = function (h) {
      return function (v) {
          return new Time(h, v.value1, v.value2, v.value3);
      };
  };
  var second = function (v) {
      return v.value2;
  };
  var minute = function (v) {
      return v.value1;
  };
  var millisecond = function (v) {
      return v.value3;
  };
  var millisToTime = function (v) {
      var hours = $$Math.floor(v / 3600000.0);
      var minutes = $$Math.floor((v - hours * 3600000.0) / 60000.0);
      var seconds = $$Math.floor((v - (hours * 3600000.0 + minutes * 60000.0)) / 1000.0);
      var milliseconds = v - (hours * 3600000.0 + minutes * 60000.0 + seconds * 1000.0);
      return Data_Maybe.fromJust()(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(Data_Int.floor(hours))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(Data_Int.floor(minutes))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(Data_Int.floor(seconds))))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Int.floor(milliseconds))));
  };
  var hour = function (v) {
      return v.value0;
  };
  var timeToMillis = function (t) {
      return Data_Time_Duration.Milliseconds(3600000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(hour(t))) + 60000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(minute(t))) + 1000.0 * Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(second(t))) + Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(millisecond(t))));
  };
  var genericTime = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.Time.Time" && v.value1.length === 4)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Time.create))(Data_Generic.fromSpine(Data_Time_Component.genericHour)(v["value1"][0](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Time_Component.genericMinute)(v["value1"][1](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Time_Component.genericSecond)(v["value1"][2](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Time_Component.genericMillisecond)(v["value1"][3](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.Time.Time", [ {
          sigConstructor: "Data.Time.Time", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Time_Component.genericHour)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Time_Component.genericMinute)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Time_Component.genericSecond)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Time_Component.genericMillisecond)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.Time.Time", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Time_Component.genericHour)(v.value0);
      }, function ($dollarq) {
          return Data_Generic.toSpine(Data_Time_Component.genericMinute)(v.value1);
      }, function ($dollarq) {
          return Data_Generic.toSpine(Data_Time_Component.genericSecond)(v.value2);
      }, function ($dollarq) {
          return Data_Generic.toSpine(Data_Time_Component.genericMillisecond)(v.value3);
      } ]);
  });
  var eqTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Time_Component.eqHour)(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Component.eqMinute)(x.value1)(y.value1) && Data_Eq.eq(Data_Time_Component.eqSecond)(x.value2)(y.value2) && Data_Eq.eq(Data_Time_Component.eqMillisecond)(x.value3)(y.value3);
      };
  });
  var ordTime = new Data_Ord.Ord(function () {
      return eqTime;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Time_Component.ordHour)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v1 = Data_Ord.compare(Data_Time_Component.ordMinute)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v2 = Data_Ord.compare(Data_Time_Component.ordSecond)(x.value2)(y.value2);
          if (v2 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v2 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time_Component.ordMillisecond)(x.value3)(y.value3);
      };
  });
  var diff = function (dictDuration) {
      return function (t1) {
          return function (t2) {
              return Data_Time_Duration.toDuration(dictDuration)(Data_Ring.sub(Data_Time_Duration.ringMilliseconds)(timeToMillis(t1))(timeToMillis(t2)));
          };
      };
  };
  var boundedTime = new Data_Bounded.Bounded(function () {
      return ordTime;
  }, new Time(Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond)), new Time(Data_Bounded.top(Data_Time_Component.boundedHour), Data_Bounded.top(Data_Time_Component.boundedMinute), Data_Bounded.top(Data_Time_Component.boundedSecond), Data_Bounded.top(Data_Time_Component.boundedMillisecond)));
  var maxTime = timeToMillis(Data_Bounded.top(boundedTime));
  var adjust = function (dictDuration) {
      return function (d) {
          return function (t) {
              var tLength = timeToMillis(t);
              var d$prime = Data_Time_Duration.fromDuration(dictDuration)(d);
              var wholeDays = Data_Time_Duration.Days($$Math.floor(Data_Newtype.unwrap(Data_Time_Duration.newtypeMilliseconds)(d$prime) / 8.64e7));
              var msAdjust = Data_Ring.sub(Data_Time_Duration.ringMilliseconds)(d$prime)(Data_Time_Duration.fromDuration(Data_Time_Duration.durationDays)(wholeDays));
              var msAdjusted = Data_Semiring.add(Data_Time_Duration.semiringMilliseconds)(tLength)(msAdjust);
              var wrap = (function () {
                  var $134 = Data_Ord.greaterThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(maxTime);
                  if ($134) {
                      return 1.0;
                  };
                  var $135 = Data_Ord.lessThan(Data_Time_Duration.ordMilliseconds)(msAdjusted)(Data_Ring.negate(Data_Time_Duration.ringMilliseconds)(maxTime));
                  if ($135) {
                      return -1.0;
                  };
                  return 0.0;
              })();
              return new Data_Tuple.Tuple(Data_Semiring.add(Data_Time_Duration.semiringDays)(wholeDays)(wrap), millisToTime(Data_Ring.sub(Data_Time_Duration.ringMilliseconds)(msAdjusted)(8.64e7 * wrap)));
          };
      };
  };
  exports["Time"] = Time;
  exports["adjust"] = adjust;
  exports["diff"] = diff;
  exports["hour"] = hour;
  exports["millisecond"] = millisecond;
  exports["minute"] = minute;
  exports["second"] = second;
  exports["setHour"] = setHour;
  exports["setMillisecond"] = setMillisecond;
  exports["setMinute"] = setMinute;
  exports["setSecond"] = setSecond;
  exports["eqTime"] = eqTime;
  exports["ordTime"] = ordTime;
  exports["genericTime"] = genericTime;
  exports["boundedTime"] = boundedTime;
  exports["showTime"] = showTime;
})(PS["Data.Time"] = PS["Data.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.DateTime"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var DateTime = (function () {
      function DateTime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DateTime.create = function (value0) {
          return function (value1) {
              return new DateTime(value0, value1);
          };
      };
      return DateTime;
  })();
  var toRecord = function (v) {
      return {
          year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)), 
          month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)), 
          day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)), 
          hour: Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)), 
          minute: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)), 
          second: Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)), 
          millisecond: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))
      };
  };
  var time = function (v) {
      return v.value1;
  };
  var showDateTime = new Data_Show.Show(function (v) {
      return "(DateTime " + (Data_Show.show(Data_Date.showDate)(v.value0) + (" " + (Data_Show.show(Data_Time.showTime)(v.value1) + ")")));
  });
  var modifyTimeF = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(DateTime.create(v.value0))(f(v.value1));
          };
      };
  };
  var modifyTime = function (f) {
      return function (v) {
          return new DateTime(v.value0, f(v.value1));
      };
  };
  var modifyDateF = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(Data_Function.flip(DateTime.create)(v.value1))(f(v.value0));
          };
      };
  };
  var modifyDate = function (f) {
      return function (v) {
          return new DateTime(f(v.value0), v.value1);
      };
  };
  var genericDateTime = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.DateTime.DateTime" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(DateTime.create))(Data_Generic.fromSpine(Data_Date.genericDate)(v["value1"][0](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Time.genericTime)(v["value1"][1](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.DateTime.DateTime", [ {
          sigConstructor: "Data.DateTime.DateTime", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Date.genericDate)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Time.genericTime)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.DateTime.DateTime", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Date.genericDate)(v.value0);
      }, function ($dollarq) {
          return Data_Generic.toSpine(Data_Time.genericTime)(v.value1);
      } ]);
  });
  var eqDateTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Date.eqDate)(x.value0)(y.value0) && Data_Eq.eq(Data_Time.eqTime)(x.value1)(y.value1);
      };
  });
  var ordDateTime = new Data_Ord.Ord(function () {
      return eqDateTime;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Date.ordDate)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time.ordTime)(x.value1)(y.value1);
      };
  });
  var diff = function (dictDuration) {
      return function (dt1) {
          return function (dt2) {
              return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(toRecord(dt1), toRecord(dt2)));
          };
      };
  };
  var date = function (v) {
      return v.value0;
  };
  var boundedDateTime = new Data_Bounded.Bounded(function () {
      return ordDateTime;
  }, new DateTime(Data_Bounded.bottom(Data_Date.boundedDate), Data_Bounded.bottom(Data_Time.boundedTime)), new DateTime(Data_Bounded.top(Data_Date.boundedDate), Data_Bounded.top(Data_Time.boundedTime)));
  var adjust = function (dictDuration) {
      return function (d) {
          return function (dt) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.adjustImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(Data_Time_Duration.fromDuration(dictDuration)(d))(toRecord(dt)))(function (rec) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(DateTime.create)(Control_Bind.join(Data_Maybe.bindMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Date.exactDate)(Data_Enum.toEnum(Data_Date_Component.boundedEnumYear)(rec.year)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(rec.month)))(Data_Enum.toEnum(Data_Date_Component.boundedEnumDay)(rec.day)))))(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Time.Time.create)(Data_Enum.toEnum(Data_Time_Component.boundedEnumHour)(rec.hour)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMinute)(rec.minute)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumSecond)(rec.second)))(Data_Enum.toEnum(Data_Time_Component.boundedEnumMillisecond)(rec.millisecond)));
              });
          };
      };
  };
  exports["DateTime"] = DateTime;
  exports["adjust"] = adjust;
  exports["date"] = date;
  exports["diff"] = diff;
  exports["modifyDate"] = modifyDate;
  exports["modifyDateF"] = modifyDateF;
  exports["modifyTime"] = modifyTime;
  exports["modifyTimeF"] = modifyTimeF;
  exports["time"] = time;
  exports["eqDateTime"] = eqDateTime;
  exports["ordDateTime"] = ordDateTime;
  exports["genericDateTime"] = genericDateTime;
  exports["boundedDateTime"] = boundedDateTime;
  exports["showDateTime"] = showDateTime;
})(PS["Data.DateTime"] = PS["Data.DateTime"] || {});
(function(exports) {
    "use strict";

  exports.fromDateTimeImpl = function (y, mo, d, h, mi, s, ms) {
    return new Date(Date.UTC(y, mo - 1, d, h, mi, s, ms)).getTime();
  };

  exports.toDateTimeImpl = function (ctor) {
    return function (instant) {
      var dt = new Date(instant);
      return ctor (dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
    };
  };
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.DateTime.Instant"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Instant = function (x) {
      return x;
  };
  var unInstant = function (v) {
      return v;
  };
  var toDateTime = (function () {
      var mkDateTime = function (y) {
          return function (mo) {
              return function (d) {
                  return function (h) {
                      return function (mi) {
                          return function (s) {
                              return function (ms) {
                                  return new Data_DateTime.DateTime(Data_Date.canonicalDate(y)(Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(mo)))(d), new Data_Time.Time(h, mi, s, ms));
                              };
                          };
                      };
                  };
              };
          };
      };
      return $foreign.toDateTimeImpl(mkDateTime);
  })();
  var showInstant = new Data_Show.Show(function (v) {
      return "(Instant " + (Data_Show.show(Data_Time_Duration.showMilliseconds)(v) + ")");
  });
  var ordDateTime = Data_Time_Duration.ordMilliseconds;
  var instant = function (v) {
      if (v >= -8.6399778816e15 && v <= 8.639977881599999e15) {
          return new Data_Maybe.Just(v);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.DateTime.Instant line 45, column 1 - line 45, column 41: " + [ v.constructor.name ]);
  };
  var genericDateTime = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.DateTime.Instant.Instant" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Instant))(Data_Generic.fromSpine(Data_Time_Duration.genericMilliseconds)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.DateTime.Instant.Instant", [ {
          sigConstructor: "Data.DateTime.Instant.Instant", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Time_Duration.genericMilliseconds)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.DateTime.Instant.Instant", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Time_Duration.genericMilliseconds)(v);
      } ]);
  });
  var fromDateTime = function (v) {
      return $foreign.fromDateTimeImpl(Data_Date.year(v.value0), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)), Data_Date.day(v.value0), Data_Time.hour(v.value1), Data_Time.minute(v.value1), Data_Time.second(v.value1), Data_Time.millisecond(v.value1));
  };
  var fromDate = function (d) {
      return $foreign.fromDateTimeImpl(Data_Date.year(d), Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(d)), Data_Date.day(d), Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond));
  };
  var eqDateTime = Data_Time_Duration.eqMilliseconds;
  var boundedInstant = new Data_Bounded.Bounded(function () {
      return ordDateTime;
  }, -8.6399778816e15, 8.639977881599999e15);
  exports["fromDateTime"] = fromDateTime;
  exports["instant"] = instant;
  exports["toDateTime"] = toDateTime;
  exports["unInstant"] = unInstant;
  exports["eqDateTime"] = eqDateTime;
  exports["ordDateTime"] = ordDateTime;
  exports["genericDateTime"] = genericDateTime;
  exports["boundedInstant"] = boundedInstant;
  exports["showInstant"] = showInstant;
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.JSDate"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Date = PS["Data.Date"];
  var Data_Date_Component = PS["Data.Date.Component"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Time = PS["Data.Time"];
  var Data_Time_Component = PS["Data.Time.Component"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];        
  var toUTCString = function (dt) {
      return $foreign.dateMethod("toUTCString", dt);
  };
  var toTimeString = function (dt) {
      return $foreign.dateMethod("toTimeString", dt);
  };
  var toString = function (dt) {
      return $foreign.dateMethod("toString", dt);
  };
  var toInstant = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(function ($4) {
      return Data_DateTime_Instant.instant(Data_Time_Duration.Milliseconds($4));
  })($foreign.toInstantImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value));
  var toISOString = function (dt) {
      return $foreign.dateMethodEff("toISOString", dt);
  };
  var toDateTime = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime_Instant.toDateTime))(toInstant);
  var toDateString = function (dt) {
      return $foreign.dateMethod("toDateString", dt);
  };
  var toDate = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_DateTime.date))(toDateTime);
  var readDate = Data_Foreign.unsafeReadTagged("Date");
  var getUTCSeconds = function (dt) {
      return $foreign.dateMethod("getUTCSeconds", dt);
  };
  var getUTCMonth = function (dt) {
      return $foreign.dateMethod("getUTCMonth", dt);
  };
  var getUTCMinutes = function (dt) {
      return $foreign.dateMethod("getUTCMinutes", dt);
  };
  var getUTCMilliseconds = function (dt) {
      return $foreign.dateMethod("getUTCMilliseconds", dt);
  };
  var getUTCHours = function (dt) {
      return $foreign.dateMethod("getUTCHours", dt);
  };
  var getUTCFullYear = function (dt) {
      return $foreign.dateMethod("getUTCFullYear", dt);
  };
  var getUTCDay = function (dt) {
      return $foreign.dateMethod("getUTCDay", dt);
  };
  var getUTCDate = function (dt) {
      return $foreign.dateMethod("getUTCDate", dt);
  };
  var getTimezoneOffset = function (dt) {
      return $foreign.dateMethodEff("getTimezoneOffset", dt);
  };
  var getTime = function (dt) {
      return $foreign.dateMethod("getTime", dt);
  };
  var getSeconds = function (dt) {
      return $foreign.dateMethodEff("getSeconds", dt);
  };
  var getMonth = function (dt) {
      return $foreign.dateMethodEff("getMonth", dt);
  };
  var getMinutes = function (dt) {
      return $foreign.dateMethodEff("getMinutes", dt);
  };
  var getMilliseconds = function (dt) {
      return $foreign.dateMethodEff("getMilliseconds", dt);
  };
  var getHours = function (dt) {
      return $foreign.dateMethodEff("getHours", dt);
  };
  var getFullYear = function (dt) {
      return $foreign.dateMethodEff("getFullYear", dt);
  };
  var getDay = function (dt) {
      return $foreign.dateMethodEff("getDay", dt);
  };
  var getDate = function (dt) {
      return $foreign.dateMethodEff("getDate", dt);
  };
  var fromDateTime = function (v) {
      return $foreign.jsdate({
          year: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0))), 
          month: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)) - 1 | 0), 
          day: Data_Int.toNumber(Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0))), 
          hour: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1))), 
          minute: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1))), 
          second: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1))), 
          millisecond: Data_Int.toNumber(Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1)))
      });
  };
  exports["fromDateTime"] = fromDateTime;
  exports["getDate"] = getDate;
  exports["getDay"] = getDay;
  exports["getFullYear"] = getFullYear;
  exports["getHours"] = getHours;
  exports["getMilliseconds"] = getMilliseconds;
  exports["getMinutes"] = getMinutes;
  exports["getMonth"] = getMonth;
  exports["getSeconds"] = getSeconds;
  exports["getTime"] = getTime;
  exports["getTimezoneOffset"] = getTimezoneOffset;
  exports["getUTCDate"] = getUTCDate;
  exports["getUTCDay"] = getUTCDay;
  exports["getUTCFullYear"] = getUTCFullYear;
  exports["getUTCHours"] = getUTCHours;
  exports["getUTCMilliseconds"] = getUTCMilliseconds;
  exports["getUTCMinutes"] = getUTCMinutes;
  exports["getUTCMonth"] = getUTCMonth;
  exports["getUTCSeconds"] = getUTCSeconds;
  exports["readDate"] = readDate;
  exports["toDate"] = toDate;
  exports["toDateString"] = toDateString;
  exports["toDateTime"] = toDateTime;
  exports["toISOString"] = toISOString;
  exports["toInstant"] = toInstant;
  exports["toString"] = toString;
  exports["toTimeString"] = toTimeString;
  exports["toUTCString"] = toUTCString;
  exports["isValid"] = $foreign.isValid;
  exports["jsdate"] = $foreign.jsdate;
  exports["jsdateLocal"] = $foreign.jsdateLocal;
  exports["parse"] = $foreign.parse;
})(PS["Data.JSDate"] = PS["Data.JSDate"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLInputElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_HTML_SelectionMode = PS["DOM.HTML.SelectionMode"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_JSDate = PS["Data.JSDate"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var stepUp = $foreign["stepUp'"](1);
  var stepDown = $foreign["stepDown'"](1);
  var list = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._list($0));
  };
  var form = function ($1) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($1));
  };
  var files = function ($2) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._files($2));
  };
  exports["files"] = files;
  exports["form"] = form;
  exports["list"] = list;
  exports["accept"] = $foreign.accept;
  exports["alt"] = $foreign.alt;
  exports["autocomplete"] = $foreign.autocomplete;
  exports["autofocus"] = $foreign.autofocus;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["checked"] = $foreign.checked;
  exports["defaultChecked"] = $foreign.defaultChecked;
  exports["defaultValue"] = $foreign.defaultValue;
  exports["dirName"] = $foreign.dirName;
  exports["disabled"] = $foreign.disabled;
  exports["formAction"] = $foreign.formAction;
  exports["formEnctype"] = $foreign.formEnctype;
  exports["formMethod"] = $foreign.formMethod;
  exports["formNoValidate"] = $foreign.formNoValidate;
  exports["formTarget"] = $foreign.formTarget;
  exports["height"] = $foreign.height;
  exports["indeterminate"] = $foreign.indeterminate;
  exports["labels"] = $foreign.labels;
  exports["max"] = $foreign.max;
  exports["maxLength"] = $foreign.maxLength;
  exports["min"] = $foreign.min;
  exports["minLength"] = $foreign.minLength;
  exports["multiple"] = $foreign.multiple;
  exports["name"] = $foreign.name;
  exports["pattern"] = $foreign.pattern;
  exports["placeholder"] = $foreign.placeholder;
  exports["readOnly"] = $foreign.readOnly;
  exports["required"] = $foreign.required;
  exports["select"] = $foreign.select;
  exports["selectionDirection"] = $foreign.selectionDirection;
  exports["selectionEnd"] = $foreign.selectionEnd;
  exports["selectionStart"] = $foreign.selectionStart;
  exports["setAccept"] = $foreign.setAccept;
  exports["setAlt"] = $foreign.setAlt;
  exports["setAutocomplete"] = $foreign.setAutocomplete;
  exports["setAutofocus"] = $foreign.setAutofocus;
  exports["setChecked"] = $foreign.setChecked;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["setDefaultChecked"] = $foreign.setDefaultChecked;
  exports["setDefaultValue"] = $foreign.setDefaultValue;
  exports["setDirName"] = $foreign.setDirName;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["setFormAction"] = $foreign.setFormAction;
  exports["setFormEnctype"] = $foreign.setFormEnctype;
  exports["setFormMethod"] = $foreign.setFormMethod;
  exports["setFormNoValidate"] = $foreign.setFormNoValidate;
  exports["setFormTarget"] = $foreign.setFormTarget;
  exports["setHeight"] = $foreign.setHeight;
  exports["setIndeterminate"] = $foreign.setIndeterminate;
  exports["setMax"] = $foreign.setMax;
  exports["setMaxLength"] = $foreign.setMaxLength;
  exports["setMin"] = $foreign.setMin;
  exports["setMinLength"] = $foreign.setMinLength;
  exports["setMultiple"] = $foreign.setMultiple;
  exports["setName"] = $foreign.setName;
  exports["setPattern"] = $foreign.setPattern;
  exports["setPlaceholder"] = $foreign.setPlaceholder;
  exports["setRangeText"] = $foreign.setRangeText;
  exports["setRangeText'"] = $foreign["setRangeText'"];
  exports["setReadOnly"] = $foreign.setReadOnly;
  exports["setRequired"] = $foreign.setRequired;
  exports["setSelectionDirection"] = $foreign.setSelectionDirection;
  exports["setSelectionEnd"] = $foreign.setSelectionEnd;
  exports["setSelectionRange"] = $foreign.setSelectionRange;
  exports["setSelectionStart"] = $foreign.setSelectionStart;
  exports["setSize"] = $foreign.setSize;
  exports["setSrc"] = $foreign.setSrc;
  exports["setStep"] = $foreign.setStep;
  exports["setType"] = $foreign.setType;
  exports["setValue"] = $foreign.setValue;
  exports["setValueAsDate"] = $foreign.setValueAsDate;
  exports["setValueAsNumber"] = $foreign.setValueAsNumber;
  exports["setWidth"] = $foreign.setWidth;
  exports["size"] = $foreign.size;
  exports["src"] = $foreign.src;
  exports["step"] = $foreign.step;
  exports["stepDown'"] = $foreign["stepDown'"];
  exports["stepUp'"] = $foreign["stepUp'"];
  exports["type_"] = $foreign.type_;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["validity"] = $foreign.validity;
  exports["value"] = $foreign.value;
  exports["valueAsDate"] = $foreign.valueAsDate;
  exports["valueAsNumber"] = $foreign.valueAsNumber;
  exports["width"] = $foreign.width;
  exports["willValidate"] = $foreign.willValidate;
})(PS["DOM.HTML.HTMLInputElement"] = PS["DOM.HTML.HTMLInputElement"] || {});
(function(exports) {
    "use strict";

  exports.autofocus = function (keygen) {
    return function () {
      return keygen.autofocus;
    };
  };

  exports.setAutofocus = function (autofocus) {
    return function (keygen) {
      return function () {
        keygen.autofocus = autofocus;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.challenge = function (keygen) {
    return function () {
      return keygen.challenge;
    };
  };

  exports.setChallenge = function (challenge) {
    return function (keygen) {
      return function () {
        keygen.challenge = challenge;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.disabled = function (keygen) {
    return function () {
      return keygen.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (keygen) {
      return function () {
        keygen.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (keygen) {
    return function () {
      return keygen.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.keytype = function (keygen) {
    return function () {
      return keygen.keytype;
    };
  };

  exports.setKeytype = function (keytype) {
    return function (keygen) {
      return function () {
        keygen.keytype = keytype;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (keygen) {
    return function () {
      return keygen.name;
    };
  };

  exports.setName = function (name) {
    return function (keygen) {
      return function () {
        keygen.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (keygen) {
    return function () {
      return keygen.type;
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (keygen) {
    return function () {
      return keygen.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (keygen) {
    return function () {
      return keygen.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (keygen) {
    return function () {
      return keygen.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (keygen) {
    return function () {
      return keygen.checkValidity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (keygen) {
      return function () {
        keygen.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (keygen) {
    return function () {
      return keygen.labels;
    };
  };
})(PS["DOM.HTML.HTMLKeygenElement"] = PS["DOM.HTML.HTMLKeygenElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLKeygenElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var form = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($0));
  };
  exports["form"] = form;
  exports["autofocus"] = $foreign.autofocus;
  exports["challenge"] = $foreign.challenge;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["disabled"] = $foreign.disabled;
  exports["keytype"] = $foreign.keytype;
  exports["labels"] = $foreign.labels;
  exports["name"] = $foreign.name;
  exports["setAutofocus"] = $foreign.setAutofocus;
  exports["setChallenge"] = $foreign.setChallenge;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["setKeytype"] = $foreign.setKeytype;
  exports["setName"] = $foreign.setName;
  exports["type_"] = $foreign.type_;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["validity"] = $foreign.validity;
  exports["willValidate"] = $foreign.willValidate;
})(PS["DOM.HTML.HTMLKeygenElement"] = PS["DOM.HTML.HTMLKeygenElement"] || {});
(function(exports) {
    "use strict";

  exports.value = function (li) {
    return function () {
      return li.value;
    };
  };

  exports.setValue = function (value) {
    return function (li) {
      return function () {
        li.value = value;
      };
    };
  };
})(PS["DOM.HTML.HTMLLIElement"] = PS["DOM.HTML.HTMLLIElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLLIElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["setValue"] = $foreign.setValue;
  exports["value"] = $foreign.value;
})(PS["DOM.HTML.HTMLLIElement"] = PS["DOM.HTML.HTMLLIElement"] || {});
(function(exports) {
    "use strict";

  exports._form = function (label) {
    return function () {
      return label.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.htmlFor = function (label) {
    return function () {
      return label.htmlFor;
    };
  };

  exports.setHtmlFor = function (htmlFor) {
    return function (label) {
      return function () {
        label.htmlFor = htmlFor;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._control = function (label) {
    return function () {
      return label.control;
    };
  };
})(PS["DOM.HTML.HTMLLabelElement"] = PS["DOM.HTML.HTMLLabelElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLLabelElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var form = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($0));
  };
  var control = function ($1) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._control($1));
  };
  exports["control"] = control;
  exports["form"] = form;
  exports["htmlFor"] = $foreign.htmlFor;
  exports["setHtmlFor"] = $foreign.setHtmlFor;
})(PS["DOM.HTML.HTMLLabelElement"] = PS["DOM.HTML.HTMLLabelElement"] || {});
(function(exports) {
    "use strict";

  exports._form = function (le) {
    return function () {
      return le.form;
    };
  };
})(PS["DOM.HTML.HTMLLegendElement"] = PS["DOM.HTML.HTMLLegendElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLLegendElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var form = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($0));
  };
  exports["form"] = form;
})(PS["DOM.HTML.HTMLLegendElement"] = PS["DOM.HTML.HTMLLegendElement"] || {});
(function(exports) {
    "use strict";

  exports.disabled = function (link) {
    return function () {
      return link.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (link) {
      return function () {
        link.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.href = function (link) {
    return function () {
      return link.href;
    };
  };

  exports.setHref = function (href) {
    return function (link) {
      return function () {
        link.href = href;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.crossOrigin = function (link) {
    return function () {
      return link.crossOrigin;
    };
  };

  exports.setCrossOrigin = function (crossOrigin) {
    return function (link) {
      return function () {
        link.crossOrigin = crossOrigin;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rel = function (link) {
    return function () {
      return link.rel;
    };
  };

  exports.setRel = function (rel) {
    return function (link) {
      return function () {
        link.rel = rel;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rev = function (link) {
    return function () {
      return link.rev;
    };
  };

  exports.setRev = function (rev) {
    return function (link) {
      return function () {
        link.rev = rev;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.relList = function (link) {
    return function () {
      return link.relList;
    };
  };

  // ----------------------------------------------------------------------------

  exports.media = function (link) {
    return function () {
      return link.media;
    };
  };

  exports.setMedia = function (media) {
    return function (link) {
      return function () {
        link.media = media;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.hreflang = function (link) {
    return function () {
      return link.hreflang;
    };
  };

  exports.setHreflang = function (hreflang) {
    return function (link) {
      return function () {
        link.hreflang = hreflang;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (link) {
    return function () {
      return link.type;
    };
  };

  exports.setType = function (type) {
    return function (link) {
      return function () {
        link.type = type;
      };
    };
  };
})(PS["DOM.HTML.HTMLLinkElement"] = PS["DOM.HTML.HTMLLinkElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLLinkElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Prelude = PS["Prelude"];
  exports["crossOrigin"] = $foreign.crossOrigin;
  exports["disabled"] = $foreign.disabled;
  exports["href"] = $foreign.href;
  exports["hreflang"] = $foreign.hreflang;
  exports["media"] = $foreign.media;
  exports["rel"] = $foreign.rel;
  exports["relList"] = $foreign.relList;
  exports["rev"] = $foreign.rev;
  exports["setCrossOrigin"] = $foreign.setCrossOrigin;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["setHref"] = $foreign.setHref;
  exports["setHreflang"] = $foreign.setHreflang;
  exports["setMedia"] = $foreign.setMedia;
  exports["setRel"] = $foreign.setRel;
  exports["setRev"] = $foreign.setRev;
  exports["setType"] = $foreign.setType;
  exports["type_"] = $foreign.type_;
})(PS["DOM.HTML.HTMLLinkElement"] = PS["DOM.HTML.HTMLLinkElement"] || {});
(function(exports) {
    "use strict";

  exports.name = function (map) {
    return function () {
      return map.name;
    };
  };

  exports.setName = function (name) {
    return function (map) {
      return function () {
        map.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.areas = function (map) {
    return function () {
      return map.areas;
    };
  };

  // ----------------------------------------------------------------------------

  exports.images = function (map) {
    return function () {
      return map.images;
    };
  };
})(PS["DOM.HTML.HTMLMapElement"] = PS["DOM.HTML.HTMLMapElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLMapElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Prelude = PS["Prelude"];
  exports["areas"] = $foreign.areas;
  exports["images"] = $foreign.images;
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
})(PS["DOM.HTML.HTMLMapElement"] = PS["DOM.HTML.HTMLMapElement"] || {});
(function(exports) {
    "use strict";

  exports.src = function (media) {
    return function () {
      return media.src;
    };
  };

  exports.setSrc = function (src) {
    return function (media) {
      return function () {
        media.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.currentSrc = function (media) {
    return function () {
      return media.currentSrc;
    };
  };

  // ----------------------------------------------------------------------------

  exports.crossOrigin = function (media) {
    return function () {
      return media.crossOrigin;
    };
  };

  exports.setCrossOrigin = function (crossOrigin) {
    return function (media) {
      return function () {
        media.crossOrigin = crossOrigin;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.networkStateIndex = function (media) {
    return function () {
      return media.networkState;
    };
  };

  // ----------------------------------------------------------------------------

  exports.preload = function (media) {
    return function () {
      return media.preload;
    };
  };

  exports.setPreload = function (preload) {
    return function (media) {
      return function () {
        media.preload = preload;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.load = function (media) {
    return function () {
      return media.load();
    };
  };

  // ----------------------------------------------------------------------------

  exports.canPlayType = function (type) {
    return function (media) {
      return function () {
        return media.canPlayType(type);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.readyStateIndex = function (media) {
    return function () {
      return media.readyState;
    };
  };

  // ----------------------------------------------------------------------------

  exports.seeking = function (media) {
    return function () {
      return media.seeking;
    };
  };

  // ----------------------------------------------------------------------------

  exports.currentTime = function (media) {
    return function () {
      return media.currentTime;
    };
  };

  exports.setCurrentTime = function (currentTime) {
    return function (media) {
      return function () {
        media.currentTime = currentTime;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.duration = function (media) {
    return function () {
      return media.duration;
    };
  };

  // ----------------------------------------------------------------------------

  exports.getStartDate = function (media) {
    return function () {
      return media.getStartDate();
    };
  };

  // ----------------------------------------------------------------------------

  exports.paused = function (media) {
    return function () {
      return media.paused;
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultPlaybackRate = function (media) {
    return function () {
      return media.defaultPlaybackRate;
    };
  };

  exports.setDefaultPlaybackRate = function (defaultPlaybackRate) {
    return function (media) {
      return function () {
        media.defaultPlaybackRate = defaultPlaybackRate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.playbackRate = function (media) {
    return function () {
      return media.playbackRate;
    };
  };

  exports.setPlaybackRate = function (playbackRate) {
    return function (media) {
      return function () {
        media.playbackRate = playbackRate;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.ended = function (media) {
    return function () {
      return media.ended;
    };
  };

  // ----------------------------------------------------------------------------

  exports.autoplay = function (media) {
    return function () {
      return media.autoplay;
    };
  };

  exports.setAutoplay = function (autoplay) {
    return function (media) {
      return function () {
        media.autoplay = autoplay;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.loop = function (media) {
    return function () {
      return media.loop;
    };
  };

  exports.setLoop = function (loop) {
    return function (media) {
      return function () {
        media.loop = loop;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.play = function (media) {
    return function () {
      media.play();
    };
  };

  // ----------------------------------------------------------------------------

  exports.pause = function (media) {
    return function () {
      media.pause();
    };
  };

  // ----------------------------------------------------------------------------

  exports.mediaGroup = function (media) {
    return function () {
      return media.mediaGroup;
    };
  };

  exports.setMediaGroup = function (mediaGroup) {
    return function (media) {
      return function () {
        media.mediaGroup = mediaGroup;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.controls = function (media) {
    return function () {
      return media.controls;
    };
  };

  exports.setControls = function (controls) {
    return function (media) {
      return function () {
        media.controls = controls;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.volume = function (media) {
    return function () {
      return media.volume;
    };
  };

  exports.setVolume = function (volume) {
    return function (media) {
      return function () {
        media.volume = volume;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.muted = function (media) {
    return function () {
      return media.muted;
    };
  };

  exports.setMuted = function (muted) {
    return function (media) {
      return function () {
        media.muted = muted;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultMuted = function (media) {
    return function () {
      return media.defaultMuted;
    };
  };

  exports.setDefaultMuted = function (defaultMuted) {
    return function (media) {
      return function () {
        media.defaultMuted = defaultMuted;
      };
    };
  };
})(PS["DOM.HTML.HTMLMediaElement"] = PS["DOM.HTML.HTMLMediaElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var CanPlayType = function (x) {
      return x;
  };
  var unspecified = "";
  var showCanPlayType = new Data_Show.Show(function (v) {
      return "(CanPlayType " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var runCanPlayType = function (v) {
      return v;
  };
  var probably = "probably";
  var maybe = "maybe";
  var eqCanPlayType = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordCanPlayType = new Data_Ord.Ord(function () {
      return eqCanPlayType;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  exports["maybe"] = maybe;
  exports["probably"] = probably;
  exports["runCanPlayType"] = runCanPlayType;
  exports["unspecified"] = unspecified;
  exports["eqCanPlayType"] = eqCanPlayType;
  exports["ordCanPlayType"] = ordCanPlayType;
  exports["showCanPlayType"] = showCanPlayType;
})(PS["DOM.HTML.HTMLMediaElement.CanPlayType"] = PS["DOM.HTML.HTMLMediaElement.CanPlayType"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var NETWORK_EMPTY = (function () {
      function NETWORK_EMPTY() {

      };
      NETWORK_EMPTY.value = new NETWORK_EMPTY();
      return NETWORK_EMPTY;
  })();
  var NETWORK_IDLE = (function () {
      function NETWORK_IDLE() {

      };
      NETWORK_IDLE.value = new NETWORK_IDLE();
      return NETWORK_IDLE;
  })();
  var NETWORK_LOADING = (function () {
      function NETWORK_LOADING() {

      };
      NETWORK_LOADING.value = new NETWORK_LOADING();
      return NETWORK_LOADING;
  })();
  var NETWORK_NO_SOURCE = (function () {
      function NETWORK_NO_SOURCE() {

      };
      NETWORK_NO_SOURCE.value = new NETWORK_NO_SOURCE();
      return NETWORK_NO_SOURCE;
  })();
  var toEnumNetworkState = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(NETWORK_EMPTY.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(NETWORK_IDLE.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(NETWORK_LOADING.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(NETWORK_NO_SOURCE.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showNetworkState = new Data_Show.Show(function (v) {
      if (v instanceof NETWORK_EMPTY) {
          return "NETWORK_EMPTY";
      };
      if (v instanceof NETWORK_IDLE) {
          return "NETWORK_IDLE";
      };
      if (v instanceof NETWORK_LOADING) {
          return "NETWORK_LOADING";
      };
      if (v instanceof NETWORK_NO_SOURCE) {
          return "NETWORK_NO_SOURCE";
      };
      throw new Error("Failed pattern match at DOM.HTML.HTMLMediaElement.NetworkState line 29, column 1 - line 29, column 47: " + [ v.constructor.name ]);
  });
  var fromEnumNetworkState = function (v) {
      if (v instanceof NETWORK_EMPTY) {
          return 0;
      };
      if (v instanceof NETWORK_IDLE) {
          return 1;
      };
      if (v instanceof NETWORK_LOADING) {
          return 2;
      };
      if (v instanceof NETWORK_NO_SOURCE) {
          return 3;
      };
      throw new Error("Failed pattern match at DOM.HTML.HTMLMediaElement.NetworkState line 46, column 3 - line 50, column 26: " + [ v.constructor.name ]);
  };
  var eqNetworkState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof NETWORK_EMPTY && y instanceof NETWORK_EMPTY) {
              return true;
          };
          if (x instanceof NETWORK_IDLE && y instanceof NETWORK_IDLE) {
              return true;
          };
          if (x instanceof NETWORK_LOADING && y instanceof NETWORK_LOADING) {
              return true;
          };
          if (x instanceof NETWORK_NO_SOURCE && y instanceof NETWORK_NO_SOURCE) {
              return true;
          };
          return false;
      };
  });
  var ordNetworkState = new Data_Ord.Ord(function () {
      return eqNetworkState;
  }, function (x) {
      return function (y) {
          if (x instanceof NETWORK_EMPTY && y instanceof NETWORK_EMPTY) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof NETWORK_EMPTY) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof NETWORK_EMPTY) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof NETWORK_IDLE && y instanceof NETWORK_IDLE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof NETWORK_IDLE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof NETWORK_IDLE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof NETWORK_LOADING && y instanceof NETWORK_LOADING) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof NETWORK_LOADING) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof NETWORK_LOADING) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof NETWORK_NO_SOURCE && y instanceof NETWORK_NO_SOURCE) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at DOM.HTML.HTMLMediaElement.NetworkState line 14, column 8 - line 14, column 52: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumNetworkState = new Data_Enum.Enum(function () {
      return ordNetworkState;
  }, Data_Enum.defaultPred(toEnumNetworkState)(fromEnumNetworkState), Data_Enum.defaultSucc(toEnumNetworkState)(fromEnumNetworkState));
  var boundedNetworkState = new Data_Bounded.Bounded(function () {
      return ordNetworkState;
  }, NETWORK_EMPTY.value, NETWORK_NO_SOURCE.value);
  var boundedEnumNetworkState = new Data_Enum.BoundedEnum(function () {
      return boundedNetworkState;
  }, function () {
      return enumNetworkState;
  }, 4, fromEnumNetworkState, toEnumNetworkState);
  exports["NETWORK_EMPTY"] = NETWORK_EMPTY;
  exports["NETWORK_IDLE"] = NETWORK_IDLE;
  exports["NETWORK_LOADING"] = NETWORK_LOADING;
  exports["NETWORK_NO_SOURCE"] = NETWORK_NO_SOURCE;
  exports["eqNetworkState"] = eqNetworkState;
  exports["ordNetworkState"] = ordNetworkState;
  exports["boundedNetworkState"] = boundedNetworkState;
  exports["enumNetworkState"] = enumNetworkState;
  exports["boundedEnumNetworkState"] = boundedEnumNetworkState;
  exports["showNetworkState"] = showNetworkState;
})(PS["DOM.HTML.HTMLMediaElement.NetworkState"] = PS["DOM.HTML.HTMLMediaElement.NetworkState"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var HAVE_NOTHING = (function () {
      function HAVE_NOTHING() {

      };
      HAVE_NOTHING.value = new HAVE_NOTHING();
      return HAVE_NOTHING;
  })();
  var HAVE_METADATA = (function () {
      function HAVE_METADATA() {

      };
      HAVE_METADATA.value = new HAVE_METADATA();
      return HAVE_METADATA;
  })();
  var HAVE_CURRENT_DATA = (function () {
      function HAVE_CURRENT_DATA() {

      };
      HAVE_CURRENT_DATA.value = new HAVE_CURRENT_DATA();
      return HAVE_CURRENT_DATA;
  })();
  var HAVE_FUTURE_DATA = (function () {
      function HAVE_FUTURE_DATA() {

      };
      HAVE_FUTURE_DATA.value = new HAVE_FUTURE_DATA();
      return HAVE_FUTURE_DATA;
  })();
  var HAVE_ENOUGH_DATA = (function () {
      function HAVE_ENOUGH_DATA() {

      };
      HAVE_ENOUGH_DATA.value = new HAVE_ENOUGH_DATA();
      return HAVE_ENOUGH_DATA;
  })();
  var toEnumReadyState = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(HAVE_NOTHING.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(HAVE_METADATA.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(HAVE_CURRENT_DATA.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(HAVE_FUTURE_DATA.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(HAVE_ENOUGH_DATA.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showReadyState = new Data_Show.Show(function (v) {
      if (v instanceof HAVE_NOTHING) {
          return "HAVE_NOTHING";
      };
      if (v instanceof HAVE_METADATA) {
          return "HAVE_METADATA";
      };
      if (v instanceof HAVE_CURRENT_DATA) {
          return "HAVE_CURRENT_DATA";
      };
      if (v instanceof HAVE_FUTURE_DATA) {
          return "HAVE_FUTURE_DATA";
      };
      if (v instanceof HAVE_ENOUGH_DATA) {
          return "HAVE_ENOUGH_DATA";
      };
      throw new Error("Failed pattern match at DOM.HTML.HTMLMediaElement.ReadyState line 30, column 1 - line 30, column 43: " + [ v.constructor.name ]);
  });
  var fromEnumReadyState = function (v) {
      if (v instanceof HAVE_NOTHING) {
          return 0;
      };
      if (v instanceof HAVE_METADATA) {
          return 1;
      };
      if (v instanceof HAVE_CURRENT_DATA) {
          return 2;
      };
      if (v instanceof HAVE_FUTURE_DATA) {
          return 3;
      };
      if (v instanceof HAVE_ENOUGH_DATA) {
          return 4;
      };
      throw new Error("Failed pattern match at DOM.HTML.HTMLMediaElement.ReadyState line 49, column 3 - line 54, column 25: " + [ v.constructor.name ]);
  };
  var eqReadyState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof HAVE_NOTHING && y instanceof HAVE_NOTHING) {
              return true;
          };
          if (x instanceof HAVE_METADATA && y instanceof HAVE_METADATA) {
              return true;
          };
          if (x instanceof HAVE_CURRENT_DATA && y instanceof HAVE_CURRENT_DATA) {
              return true;
          };
          if (x instanceof HAVE_FUTURE_DATA && y instanceof HAVE_FUTURE_DATA) {
              return true;
          };
          if (x instanceof HAVE_ENOUGH_DATA && y instanceof HAVE_ENOUGH_DATA) {
              return true;
          };
          return false;
      };
  });
  var ordReadyState = new Data_Ord.Ord(function () {
      return eqReadyState;
  }, function (x) {
      return function (y) {
          if (x instanceof HAVE_NOTHING && y instanceof HAVE_NOTHING) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HAVE_NOTHING) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HAVE_NOTHING) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HAVE_METADATA && y instanceof HAVE_METADATA) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HAVE_METADATA) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HAVE_METADATA) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HAVE_CURRENT_DATA && y instanceof HAVE_CURRENT_DATA) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HAVE_CURRENT_DATA) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HAVE_CURRENT_DATA) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HAVE_FUTURE_DATA && y instanceof HAVE_FUTURE_DATA) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HAVE_FUTURE_DATA) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HAVE_FUTURE_DATA) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HAVE_ENOUGH_DATA && y instanceof HAVE_ENOUGH_DATA) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at DOM.HTML.HTMLMediaElement.ReadyState line 15, column 8 - line 15, column 48: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumReadyState = new Data_Enum.Enum(function () {
      return ordReadyState;
  }, Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState), Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState));
  var boundedReadyState = new Data_Bounded.Bounded(function () {
      return ordReadyState;
  }, HAVE_NOTHING.value, HAVE_ENOUGH_DATA.value);
  var boundedEnumReadyState = new Data_Enum.BoundedEnum(function () {
      return boundedReadyState;
  }, function () {
      return enumReadyState;
  }, 5, fromEnumReadyState, toEnumReadyState);
  exports["HAVE_NOTHING"] = HAVE_NOTHING;
  exports["HAVE_METADATA"] = HAVE_METADATA;
  exports["HAVE_CURRENT_DATA"] = HAVE_CURRENT_DATA;
  exports["HAVE_FUTURE_DATA"] = HAVE_FUTURE_DATA;
  exports["HAVE_ENOUGH_DATA"] = HAVE_ENOUGH_DATA;
  exports["eqReadyState"] = eqReadyState;
  exports["ordReadyState"] = ordReadyState;
  exports["boundedReadyState"] = boundedReadyState;
  exports["enumReadyState"] = enumReadyState;
  exports["boundedEnumReadyState"] = boundedEnumReadyState;
  exports["showReadyState"] = showReadyState;
})(PS["DOM.HTML.HTMLMediaElement.ReadyState"] = PS["DOM.HTML.HTMLMediaElement.ReadyState"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLMediaElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_HTMLMediaElement_CanPlayType = PS["DOM.HTML.HTMLMediaElement.CanPlayType"];
  var DOM_HTML_HTMLMediaElement_NetworkState = PS["DOM.HTML.HTMLMediaElement.NetworkState"];
  var DOM_HTML_HTMLMediaElement_ReadyState = PS["DOM.HTML.HTMLMediaElement.ReadyState"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Functor = PS["Data.Functor"];
  var Data_JSDate = PS["Data.JSDate"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];        
  var readyState = function (dictPartial) {
      return function ($2) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(function ($3) {
              return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(DOM_HTML_HTMLMediaElement_ReadyState.boundedEnumReadyState)($3));
          })($foreign.readyStateIndex($2));
      };
  };
  var networkState = function (dictPartial) {
      return function ($4) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(function ($5) {
              return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(DOM_HTML_HTMLMediaElement_NetworkState.boundedEnumNetworkState)($5));
          })($foreign.readyStateIndex($4));
      };
  };
  exports["networkState"] = networkState;
  exports["readyState"] = readyState;
  exports["autoplay"] = $foreign.autoplay;
  exports["canPlayType"] = $foreign.canPlayType;
  exports["controls"] = $foreign.controls;
  exports["crossOrigin"] = $foreign.crossOrigin;
  exports["currentSrc"] = $foreign.currentSrc;
  exports["currentTime"] = $foreign.currentTime;
  exports["defaultMuted"] = $foreign.defaultMuted;
  exports["defaultPlaybackRate"] = $foreign.defaultPlaybackRate;
  exports["duration"] = $foreign.duration;
  exports["ended"] = $foreign.ended;
  exports["getStartDate"] = $foreign.getStartDate;
  exports["load"] = $foreign.load;
  exports["loop"] = $foreign.loop;
  exports["mediaGroup"] = $foreign.mediaGroup;
  exports["muted"] = $foreign.muted;
  exports["networkStateIndex"] = $foreign.networkStateIndex;
  exports["pause"] = $foreign.pause;
  exports["paused"] = $foreign.paused;
  exports["play"] = $foreign.play;
  exports["playbackRate"] = $foreign.playbackRate;
  exports["preload"] = $foreign.preload;
  exports["readyStateIndex"] = $foreign.readyStateIndex;
  exports["seeking"] = $foreign.seeking;
  exports["setAutoplay"] = $foreign.setAutoplay;
  exports["setControls"] = $foreign.setControls;
  exports["setCrossOrigin"] = $foreign.setCrossOrigin;
  exports["setCurrentTime"] = $foreign.setCurrentTime;
  exports["setDefaultMuted"] = $foreign.setDefaultMuted;
  exports["setDefaultPlaybackRate"] = $foreign.setDefaultPlaybackRate;
  exports["setLoop"] = $foreign.setLoop;
  exports["setMediaGroup"] = $foreign.setMediaGroup;
  exports["setMuted"] = $foreign.setMuted;
  exports["setPlaybackRate"] = $foreign.setPlaybackRate;
  exports["setPreload"] = $foreign.setPreload;
  exports["setSrc"] = $foreign.setSrc;
  exports["setVolume"] = $foreign.setVolume;
  exports["src"] = $foreign.src;
  exports["volume"] = $foreign.volume;
})(PS["DOM.HTML.HTMLMediaElement"] = PS["DOM.HTML.HTMLMediaElement"] || {});
(function(exports) {
    "use strict";

  exports.name = function (meta) {
    return function () {
      return meta.name;
    };
  };

  exports.setName = function (name) {
    return function (meta) {
      return function () {
        meta.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.httpEquiv = function (meta) {
    return function () {
      return meta.httpEquiv;
    };
  };

  exports.setHttpEquiv = function (httpEquiv) {
    return function (meta) {
      return function () {
        meta.httpEquiv = httpEquiv;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.content = function (meta) {
    return function () {
      return meta.content;
    };
  };

  exports.setContent = function (content) {
    return function (meta) {
      return function () {
        meta.content = content;
      };
    };
  };
})(PS["DOM.HTML.HTMLMetaElement"] = PS["DOM.HTML.HTMLMetaElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLMetaElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["content"] = $foreign.content;
  exports["httpEquiv"] = $foreign.httpEquiv;
  exports["name"] = $foreign.name;
  exports["setContent"] = $foreign.setContent;
  exports["setHttpEquiv"] = $foreign.setHttpEquiv;
  exports["setName"] = $foreign.setName;
})(PS["DOM.HTML.HTMLMetaElement"] = PS["DOM.HTML.HTMLMetaElement"] || {});
(function(exports) {
    "use strict";

  exports.value = function (meter) {
    return function () {
      return meter.value;
    };
  };

  exports.setValue = function (value) {
    return function (meter) {
      return function () {
        meter.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.min = function (meter) {
    return function () {
      return meter.min;
    };
  };

  exports.setMin = function (min) {
    return function (meter) {
      return function () {
        meter.min = min;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.max = function (meter) {
    return function () {
      return meter.max;
    };
  };

  exports.setMax = function (max) {
    return function (meter) {
      return function () {
        meter.max = max;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.low = function (meter) {
    return function () {
      return meter.low;
    };
  };

  exports.setLow = function (low) {
    return function (meter) {
      return function () {
        meter.low = low;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.high = function (meter) {
    return function () {
      return meter.high;
    };
  };

  exports.setHigh = function (high) {
    return function (meter) {
      return function () {
        meter.high = high;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.optimum = function (meter) {
    return function () {
      return meter.optimum;
    };
  };

  exports.setOptimum = function (optimum) {
    return function (meter) {
      return function () {
        meter.optimum = optimum;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (meter) {
    return function () {
      return meter.labels;
    };
  };
})(PS["DOM.HTML.HTMLMeterElement"] = PS["DOM.HTML.HTMLMeterElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLMeterElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Prelude = PS["Prelude"];
  exports["high"] = $foreign.high;
  exports["labels"] = $foreign.labels;
  exports["low"] = $foreign.low;
  exports["max"] = $foreign.max;
  exports["min"] = $foreign.min;
  exports["optimum"] = $foreign.optimum;
  exports["setHigh"] = $foreign.setHigh;
  exports["setLow"] = $foreign.setLow;
  exports["setMax"] = $foreign.setMax;
  exports["setMin"] = $foreign.setMin;
  exports["setOptimum"] = $foreign.setOptimum;
  exports["setValue"] = $foreign.setValue;
  exports["value"] = $foreign.value;
})(PS["DOM.HTML.HTMLMeterElement"] = PS["DOM.HTML.HTMLMeterElement"] || {});
(function(exports) {
    "use strict";

  exports.cite = function (mod) {
    return function () {
      return mod.cite;
    };
  };

  exports.setCite = function (cite) {
    return function (mod) {
      return function () {
        mod.cite = cite;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.dateTime = function (mod) {
    return function () {
      return mod.dateTime;
    };
  };

  exports.setDateTime = function (dateTime) {
    return function (mod) {
      return function () {
        mod.dateTime = dateTime;
      };
    };
  };
})(PS["DOM.HTML.HTMLModElement"] = PS["DOM.HTML.HTMLModElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLModElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["cite"] = $foreign.cite;
  exports["dateTime"] = $foreign.dateTime;
  exports["setCite"] = $foreign.setCite;
  exports["setDateTime"] = $foreign.setDateTime;
})(PS["DOM.HTML.HTMLModElement"] = PS["DOM.HTML.HTMLModElement"] || {});
(function(exports) {
    "use strict";

  exports.reversed = function (ol) {
    return function () {
      return ol.reversed;
    };
  };

  exports.setReversed = function (reversed) {
    return function (ol) {
      return function () {
        ol.reversed = reversed;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.start = function (ol) {
    return function () {
      return ol.start;
    };
  };

  exports.setStart = function (start) {
    return function (ol) {
      return function () {
        ol.start = start;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (ol) {
    return function () {
      return ol.type;
    };
  };

  exports.setType = function (type) {
    return function (ol) {
      return function () {
        ol.type = type;
      };
    };
  };
})(PS["DOM.HTML.HTMLOListElement"] = PS["DOM.HTML.HTMLOListElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLOListElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["reversed"] = $foreign.reversed;
  exports["setReversed"] = $foreign.setReversed;
  exports["setStart"] = $foreign.setStart;
  exports["setType"] = $foreign.setType;
  exports["start"] = $foreign.start;
  exports["type_"] = $foreign.type_;
})(PS["DOM.HTML.HTMLOListElement"] = PS["DOM.HTML.HTMLOListElement"] || {});
(function(exports) {
    "use strict";

  exports.data_ = function (object) {
    return function () {
      return object.data;
    };
  };

  exports.setData = function (data) {
    return function (object) {
      return function () {
        object.data = data;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (object) {
    return function () {
      return object.type;
    };
  };

  exports.setType = function (type) {
    return function (object) {
      return function () {
        object.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.typeMustMatch = function (object) {
    return function () {
      return object.typeMustMatch;
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (object) {
    return function () {
      return object.name;
    };
  };

  exports.setName = function (name) {
    return function (object) {
      return function () {
        object.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.useMap = function (object) {
    return function () {
      return object.useMap;
    };
  };

  exports.setUseMap = function (useMap) {
    return function (object) {
      return function () {
        object.useMap = useMap;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (object) {
    return function () {
      return object.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.width = function (object) {
    return function () {
      return object.width;
    };
  };

  exports.setWidth = function (width) {
    return function (object) {
      return function () {
        object.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (object) {
    return function () {
      return object.height;
    };
  };

  exports.setHeight = function (height) {
    return function (object) {
      return function () {
        object.height = height;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._contentDocument = function (object) {
    return function () {
      return object.contentDocument;
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (object) {
    return function () {
      return object.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (object) {
    return function () {
      return object.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (object) {
    return function () {
      return object.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (object) {
    return function () {
      return object.checkValidity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (object) {
      return function () {
        object.setCustomValidity(value);
      };
    };
  };
})(PS["DOM.HTML.HTMLObjectElement"] = PS["DOM.HTML.HTMLObjectElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLObjectElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var form = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($0));
  };
  var contentDocument = function ($1) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._contentDocument($1));
  };
  exports["contentDocument"] = contentDocument;
  exports["form"] = form;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["data_"] = $foreign.data_;
  exports["height"] = $foreign.height;
  exports["name"] = $foreign.name;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["setData"] = $foreign.setData;
  exports["setHeight"] = $foreign.setHeight;
  exports["setName"] = $foreign.setName;
  exports["setType"] = $foreign.setType;
  exports["setUseMap"] = $foreign.setUseMap;
  exports["setWidth"] = $foreign.setWidth;
  exports["typeMustMatch"] = $foreign.typeMustMatch;
  exports["type_"] = $foreign.type_;
  exports["useMap"] = $foreign.useMap;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["validity"] = $foreign.validity;
  exports["width"] = $foreign.width;
  exports["willValidate"] = $foreign.willValidate;
})(PS["DOM.HTML.HTMLObjectElement"] = PS["DOM.HTML.HTMLObjectElement"] || {});
(function(exports) {
    "use strict";

  exports.disabled = function (optgroup) {
    return function () {
      return optgroup.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (optgroup) {
      return function () {
        optgroup.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.label = function (optgroup) {
    return function () {
      return optgroup.label;
    };
  };

  exports.setLabel = function (label) {
    return function (optgroup) {
      return function () {
        optgroup.label = label;
      };
    };
  };
})(PS["DOM.HTML.HTMLOptGroupElement"] = PS["DOM.HTML.HTMLOptGroupElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLOptGroupElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["disabled"] = $foreign.disabled;
  exports["label"] = $foreign.label;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["setLabel"] = $foreign.setLabel;
})(PS["DOM.HTML.HTMLOptGroupElement"] = PS["DOM.HTML.HTMLOptGroupElement"] || {});
(function(exports) {
    "use strict";

  exports.disabled = function (option) {
    return function () {
      return option.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (option) {
      return function () {
        option.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (option) {
    return function () {
      return option.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.label = function (option) {
    return function () {
      return option.label;
    };
  };

  exports.setLabel = function (label) {
    return function (option) {
      return function () {
        option.label = label;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultSelected = function (option) {
    return function () {
      return option.defaultSelected;
    };
  };

  exports.setDefaultSelected = function (defaultSelected) {
    return function (option) {
      return function () {
        option.defaultSelected = defaultSelected;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selected = function (option) {
    return function () {
      return option.selected;
    };
  };

  exports.setSelected = function (selected) {
    return function (option) {
      return function () {
        option.selected = selected;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (option) {
    return function () {
      return option.value;
    };
  };

  exports.setValue = function (value) {
    return function (option) {
      return function () {
        option.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.text = function (option) {
    return function () {
      return option.text;
    };
  };

  exports.setText = function (text) {
    return function (option) {
      return function () {
        option.text = text;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.index = function (option) {
    return function () {
      return option.index;
    };
  };
})(PS["DOM.HTML.HTMLOptionElement"] = PS["DOM.HTML.HTMLOptionElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLOptionElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var form = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($0));
  };
  exports["form"] = form;
  exports["defaultSelected"] = $foreign.defaultSelected;
  exports["disabled"] = $foreign.disabled;
  exports["index"] = $foreign.index;
  exports["label"] = $foreign.label;
  exports["selected"] = $foreign.selected;
  exports["setDefaultSelected"] = $foreign.setDefaultSelected;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["setLabel"] = $foreign.setLabel;
  exports["setSelected"] = $foreign.setSelected;
  exports["setText"] = $foreign.setText;
  exports["setValue"] = $foreign.setValue;
  exports["text"] = $foreign.text;
  exports["value"] = $foreign.value;
})(PS["DOM.HTML.HTMLOptionElement"] = PS["DOM.HTML.HTMLOptionElement"] || {});
(function(exports) {
    "use strict";

  exports._form = function (output) {
    return function () {
      return output.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (output) {
    return function () {
      return output.name;
    };
  };

  exports.setName = function (name) {
    return function (output) {
      return function () {
        output.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (output) {
    return function () {
      return output.type;
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultValue = function (output) {
    return function () {
      return output.defaultValue;
    };
  };

  exports.setDefaultValue = function (defaultValue) {
    return function (output) {
      return function () {
        output.defaultValue = defaultValue;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (output) {
    return function () {
      return output.value;
    };
  };

  exports.setValue = function (value) {
    return function (output) {
      return function () {
        output.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (output) {
    return function () {
      return output.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (output) {
    return function () {
      return output.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (output) {
    return function () {
      return output.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (output) {
    return function () {
      return output.checkValidity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (output) {
      return function () {
        output.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (output) {
    return function () {
      return output.labels;
    };
  };
})(PS["DOM.HTML.HTMLOutputElement"] = PS["DOM.HTML.HTMLOutputElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLOutputElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var form = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($0));
  };
  exports["form"] = form;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["defaultValue"] = $foreign.defaultValue;
  exports["labels"] = $foreign.labels;
  exports["name"] = $foreign.name;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["setDefaultValue"] = $foreign.setDefaultValue;
  exports["setName"] = $foreign.setName;
  exports["setValue"] = $foreign.setValue;
  exports["type_"] = $foreign.type_;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["validity"] = $foreign.validity;
  exports["value"] = $foreign.value;
  exports["willValidate"] = $foreign.willValidate;
})(PS["DOM.HTML.HTMLOutputElement"] = PS["DOM.HTML.HTMLOutputElement"] || {});
(function(exports) {
    "use strict";

  exports.name = function (param) {
    return function () {
      return param.name;
    };
  };

  exports.setName = function (name) {
    return function (param) {
      return function () {
        param.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (param) {
    return function () {
      return param.value;
    };
  };

  exports.setValue = function (value) {
    return function (param) {
      return function () {
        param.value = value;
      };
    };
  };
})(PS["DOM.HTML.HTMLParamElement"] = PS["DOM.HTML.HTMLParamElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLParamElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["name"] = $foreign.name;
  exports["setName"] = $foreign.setName;
  exports["setValue"] = $foreign.setValue;
  exports["value"] = $foreign.value;
})(PS["DOM.HTML.HTMLParamElement"] = PS["DOM.HTML.HTMLParamElement"] || {});
(function(exports) {
    "use strict";

  exports.value = function (progress) {
    return function () {
      return progress.value;
    };
  };

  exports.setValue = function (value) {
    return function (progress) {
      return function () {
        progress.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.max = function (progress) {
    return function () {
      return progress.max;
    };
  };

  exports.setMax = function (max) {
    return function (progress) {
      return function () {
        progress.max = max;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.position = function (progress) {
    return function () {
      return progress.position;
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (progress) {
    return function () {
      return progress.labels;
    };
  };
})(PS["DOM.HTML.HTMLProgressElement"] = PS["DOM.HTML.HTMLProgressElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLProgressElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Prelude = PS["Prelude"];
  exports["labels"] = $foreign.labels;
  exports["max"] = $foreign.max;
  exports["position"] = $foreign.position;
  exports["setMax"] = $foreign.setMax;
  exports["setValue"] = $foreign.setValue;
  exports["value"] = $foreign.value;
})(PS["DOM.HTML.HTMLProgressElement"] = PS["DOM.HTML.HTMLProgressElement"] || {});
(function(exports) {
    "use strict";

  exports.cite = function (quote) {
    return function () {
      return quote.cite;
    };
  };

  exports.setCite = function (cite) {
    return function (quote) {
      return function () {
        quote.cite = cite;
      };
    };
  };
})(PS["DOM.HTML.HTMLQuoteElement"] = PS["DOM.HTML.HTMLQuoteElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLQuoteElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["cite"] = $foreign.cite;
  exports["setCite"] = $foreign.setCite;
})(PS["DOM.HTML.HTMLQuoteElement"] = PS["DOM.HTML.HTMLQuoteElement"] || {});
(function(exports) {
    "use strict";

  exports.src = function (script) {
    return function () {
      return script.src;
    };
  };

  exports.setSrc = function (src) {
    return function (script) {
      return function () {
        script.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (script) {
    return function () {
      return script.type;
    };
  };

  exports.setType = function (type) {
    return function (script) {
      return function () {
        script.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.charset = function (script) {
    return function () {
      return script.charset;
    };
  };

  exports.setCharset = function (charset) {
    return function (script) {
      return function () {
        script.charset = charset;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.async = function (script) {
    return function () {
      return script.async;
    };
  };

  exports.setAsync = function (async) {
    return function (script) {
      return function () {
        script.async = async;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.defer = function (script) {
    return function () {
      return script.defer;
    };
  };

  exports.setDefer = function (defer) {
    return function (script) {
      return function () {
        script.defer = defer;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.crossOrigin = function (script) {
    return function () {
      return script.crossOrigin;
    };
  };

  exports.setCrossOrigin = function (crossOrigin) {
    return function (script) {
      return function () {
        script.crossOrigin = crossOrigin;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.text = function (script) {
    return function () {
      return script.text;
    };
  };

  exports.setText = function (text) {
    return function (script) {
      return function () {
        script.text = text;
      };
    };
  };
})(PS["DOM.HTML.HTMLScriptElement"] = PS["DOM.HTML.HTMLScriptElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLScriptElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["async"] = $foreign.async;
  exports["charset"] = $foreign.charset;
  exports["crossOrigin"] = $foreign.crossOrigin;
  exports["defer"] = $foreign.defer;
  exports["setAsync"] = $foreign.setAsync;
  exports["setCharset"] = $foreign.setCharset;
  exports["setCrossOrigin"] = $foreign.setCrossOrigin;
  exports["setDefer"] = $foreign.setDefer;
  exports["setSrc"] = $foreign.setSrc;
  exports["setText"] = $foreign.setText;
  exports["setType"] = $foreign.setType;
  exports["src"] = $foreign.src;
  exports["text"] = $foreign.text;
  exports["type_"] = $foreign.type_;
})(PS["DOM.HTML.HTMLScriptElement"] = PS["DOM.HTML.HTMLScriptElement"] || {});
(function(exports) {
    "use strict";

  exports.autofocus = function (select) {
    return function () {
      return select.autofocus;
    };
  };

  exports.setAutofocus = function (autofocus) {
    return function (select) {
      return function () {
        select.autofocus = autofocus;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.disabled = function (select) {
    return function () {
      return select.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (select) {
      return function () {
        select.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.multiple = function (select) {
    return function () {
      return select.multiple;
    };
  };

  exports.setMultiple = function (multiple) {
    return function (select) {
      return function () {
        select.multiple = multiple;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (select) {
    return function () {
      return select.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (select) {
    return function () {
      return select.name;
    };
  };

  exports.setName = function (name) {
    return function (select) {
      return function () {
        select.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.required = function (select) {
    return function () {
      return select.required;
    };
  };

  exports.setRequired = function (required) {
    return function (select) {
      return function () {
        select.required = required;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.size = function (select) {
    return function () {
      return select.size;
    };
  };

  exports.setSize = function (size) {
    return function (select) {
      return function () {
        select.size = size;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (select) {
    return function () {
      return select.type;
    };
  };

  // ----------------------------------------------------------------------------

  exports.length = function (select) {
    return function () {
      return select.length;
    };
  };

  exports.setLength = function (length) {
    return function (select) {
      return function () {
        select.length = length;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectedOptions = function (select) {
    return function () {
      return select.selectedOptions;
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectedIndex = function (select) {
    return function () {
      return select.selectedIndex;
    };
  };

  exports.setSelectedIndex = function (selectedIndex) {
    return function (select) {
      return function () {
        select.selectedIndex = selectedIndex;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (select) {
    return function () {
      return select.value;
    };
  };

  exports.setValue = function (value) {
    return function (select) {
      return function () {
        select.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (select) {
    return function () {
      return select.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (select) {
    return function () {
      return select.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (select) {
    return function () {
      return select.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (select) {
    return function () {
      return select.checkValidity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (select) {
      return function () {
        select.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (select) {
    return function () {
      return select.labels;
    };
  };
})(PS["DOM.HTML.HTMLSelectElement"] = PS["DOM.HTML.HTMLSelectElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLSelectElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var form = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($0));
  };
  exports["form"] = form;
  exports["autofocus"] = $foreign.autofocus;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["disabled"] = $foreign.disabled;
  exports["labels"] = $foreign.labels;
  exports["length"] = $foreign.length;
  exports["multiple"] = $foreign.multiple;
  exports["name"] = $foreign.name;
  exports["required"] = $foreign.required;
  exports["selectedIndex"] = $foreign.selectedIndex;
  exports["selectedOptions"] = $foreign.selectedOptions;
  exports["setAutofocus"] = $foreign.setAutofocus;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["setLength"] = $foreign.setLength;
  exports["setMultiple"] = $foreign.setMultiple;
  exports["setName"] = $foreign.setName;
  exports["setRequired"] = $foreign.setRequired;
  exports["setSelectedIndex"] = $foreign.setSelectedIndex;
  exports["setSize"] = $foreign.setSize;
  exports["setValue"] = $foreign.setValue;
  exports["size"] = $foreign.size;
  exports["type_"] = $foreign.type_;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["validity"] = $foreign.validity;
  exports["value"] = $foreign.value;
  exports["willValidate"] = $foreign.willValidate;
})(PS["DOM.HTML.HTMLSelectElement"] = PS["DOM.HTML.HTMLSelectElement"] || {});
(function(exports) {
    "use strict";

  exports.src = function (source) {
    return function () {
      return source.src;
    };
  };

  exports.setSrc = function (src) {
    return function (source) {
      return function () {
        source.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (source) {
    return function () {
      return source.type;
    };
  };

  exports.setType = function (type) {
    return function (source) {
      return function () {
        source.type = type;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.media = function (source) {
    return function () {
      return source.media;
    };
  };

  exports.setMedia = function (media) {
    return function (source) {
      return function () {
        source.media = media;
      };
    };
  };
})(PS["DOM.HTML.HTMLSourceElement"] = PS["DOM.HTML.HTMLSourceElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLSourceElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["media"] = $foreign.media;
  exports["setMedia"] = $foreign.setMedia;
  exports["setSrc"] = $foreign.setSrc;
  exports["setType"] = $foreign.setType;
  exports["src"] = $foreign.src;
  exports["type_"] = $foreign.type_;
})(PS["DOM.HTML.HTMLSourceElement"] = PS["DOM.HTML.HTMLSourceElement"] || {});
(function(exports) {
    "use strict";

  exports.disabled = function (style) {
    return function () {
      return style.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (style) {
      return function () {
        style.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.media = function (style) {
    return function () {
      return style.media;
    };
  };

  exports.setMedia = function (media) {
    return function (style) {
      return function () {
        style.media = media;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (style) {
    return function () {
      return style.type;
    };
  };

  exports.setType = function (type) {
    return function (style) {
      return function () {
        style.type = type;
      };
    };
  };
})(PS["DOM.HTML.HTMLStyleElement"] = PS["DOM.HTML.HTMLStyleElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLStyleElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["disabled"] = $foreign.disabled;
  exports["media"] = $foreign.media;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["setMedia"] = $foreign.setMedia;
  exports["setType"] = $foreign.setType;
  exports["type_"] = $foreign.type_;
})(PS["DOM.HTML.HTMLStyleElement"] = PS["DOM.HTML.HTMLStyleElement"] || {});
(function(exports) {
    "use strict";

  exports.colSpan = function (cell) {
    return function () {
      return cell.colSpan;
    };
  };

  exports.setColSpan = function (colSpan) {
    return function (cell) {
      return function () {
        cell.colSpan = colSpan;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rowSpan = function (cell) {
    return function () {
      return cell.rowSpan;
    };
  };

  exports.setRowSpan = function (rowSpan) {
    return function (cell) {
      return function () {
        cell.rowSpan = rowSpan;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.cellIndex = function (cell) {
    return function () {
      return cell.cellIndex;
    };
  };
})(PS["DOM.HTML.HTMLTableCellElement"] = PS["DOM.HTML.HTMLTableCellElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTableCellElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["cellIndex"] = $foreign.cellIndex;
  exports["colSpan"] = $foreign.colSpan;
  exports["rowSpan"] = $foreign.rowSpan;
  exports["setColSpan"] = $foreign.setColSpan;
  exports["setRowSpan"] = $foreign.setRowSpan;
})(PS["DOM.HTML.HTMLTableCellElement"] = PS["DOM.HTML.HTMLTableCellElement"] || {});
(function(exports) {
    "use strict";

  exports.span = function (col) {
    return function () {
      return col.span;
    };
  };

  exports.setSpan = function (span) {
    return function (col) {
      return function () {
        col.span = span;
      };
    };
  };
})(PS["DOM.HTML.HTMLTableColElement"] = PS["DOM.HTML.HTMLTableColElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTableColElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["setSpan"] = $foreign.setSpan;
  exports["span"] = $foreign.span;
})(PS["DOM.HTML.HTMLTableColElement"] = PS["DOM.HTML.HTMLTableColElement"] || {});
(function(exports) {
    "use strict";

  exports._caption = function (table) {
    return function () {
      return table.caption;
    };
  };

  exports._setCaption = function (caption) {
    return function (table) {
      return function () {
        table.caption = caption;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.createCaption = function (table) {
    return function () {
      return table.createCaption();
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteCaption = function (table) {
    return function () {
      table.deleteCaption();
    };
  };

  // ----------------------------------------------------------------------------

  exports._tHead = function (table) {
    return function () {
      return table.tHead;
    };
  };

  exports._setTHead = function (tHead) {
    return function (table) {
      return function () {
        table.tHead = tHead;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.createTHead = function (table) {
    return function () {
      return table.createTHead();
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteTHead = function (table) {
    return function () {
      table.deleteTHead();
    };
  };

  // ----------------------------------------------------------------------------

  exports._tFoot = function (table) {
    return function () {
      return table.tFoot;
    };
  };

  exports._setTFoot = function (tFoot) {
    return function (table) {
      return function () {
        table.tFoot = tFoot;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.createTFoot = function (table) {
    return function () {
      return table.createTFoot();
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteTFoot = function (table) {
    return function () {
      table.deleteTFoot();
    };
  };

  // ----------------------------------------------------------------------------

  exports.tBodies = function (table) {
    return function () {
      return table.tBodies;
    };
  };

  // ----------------------------------------------------------------------------

  exports.createTBody = function (table) {
    return function () {
      return table.createTBody();
    };
  };

  // ----------------------------------------------------------------------------

  exports.rows = function (table) {
    return function () {
      return table.rows;
    };
  };

  // ----------------------------------------------------------------------------

  exports["insertRow'"] = function (index) {
    return function (table) {
      return function () {
        return table.insertRow(index);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteRow = function (index) {
    return function (table) {
      return function () {
        table.deleteRow(index);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.border = function (table) {
    return function () {
      return table.border;
    };
  };

  exports.setBorder = function (border) {
    return function (table) {
      return function () {
        table.border = border;
      };
    };
  };
})(PS["DOM.HTML.HTMLTableElement"] = PS["DOM.HTML.HTMLTableElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTableElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];        
  var tHead = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._tHead($0));
  };
  var tFoot = function ($1) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._tFoot($1));
  };
  var setTHead = function ($2) {
      return $foreign._setTHead(Data_Nullable.toNullable($2));
  };
  var setTFoot = function ($3) {
      return $foreign._setTFoot(Data_Nullable.toNullable($3));
  };
  var setCaption = function ($4) {
      return $foreign._setCaption(Data_Nullable.toNullable($4));
  };
  var insertRow = $foreign["insertRow'"](-1 | 0);
  var caption = function ($5) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._caption($5));
  };
  exports["caption"] = caption;
  exports["insertRow"] = insertRow;
  exports["setCaption"] = setCaption;
  exports["setTFoot"] = setTFoot;
  exports["setTHead"] = setTHead;
  exports["tFoot"] = tFoot;
  exports["tHead"] = tHead;
  exports["border"] = $foreign.border;
  exports["createCaption"] = $foreign.createCaption;
  exports["createTBody"] = $foreign.createTBody;
  exports["createTFoot"] = $foreign.createTFoot;
  exports["createTHead"] = $foreign.createTHead;
  exports["deleteCaption"] = $foreign.deleteCaption;
  exports["deleteRow"] = $foreign.deleteRow;
  exports["deleteTFoot"] = $foreign.deleteTFoot;
  exports["deleteTHead"] = $foreign.deleteTHead;
  exports["insertRow'"] = $foreign["insertRow'"];
  exports["rows"] = $foreign.rows;
  exports["setBorder"] = $foreign.setBorder;
  exports["tBodies"] = $foreign.tBodies;
})(PS["DOM.HTML.HTMLTableElement"] = PS["DOM.HTML.HTMLTableElement"] || {});
(function(exports) {
    "use strict";

  exports.scope = function (cell) {
    return function () {
      return cell.scope;
    };
  };

  exports.setScope = function (scope) {
    return function (cell) {
      return function () {
        cell.scope = scope;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.abbr = function (cell) {
    return function () {
      return cell.abbr;
    };
  };

  exports.setAbbr = function (abbr) {
    return function (cell) {
      return function () {
        cell.abbr = abbr;
      };
    };
  };
})(PS["DOM.HTML.HTMLTableHeaderCellElement"] = PS["DOM.HTML.HTMLTableHeaderCellElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTableHeaderCellElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["abbr"] = $foreign.abbr;
  exports["scope"] = $foreign.scope;
  exports["setAbbr"] = $foreign.setAbbr;
  exports["setScope"] = $foreign.setScope;
})(PS["DOM.HTML.HTMLTableHeaderCellElement"] = PS["DOM.HTML.HTMLTableHeaderCellElement"] || {});
(function(exports) {
    "use strict";

  exports.rowIndex = function (row) {
    return function () {
      return row.rowIndex;
    };
  };

  // ----------------------------------------------------------------------------

  exports.sectionRowIndex = function (row) {
    return function () {
      return row.sectionRowIndex;
    };
  };

  // ----------------------------------------------------------------------------

  exports.cells = function (row) {
    return function () {
      return row.cells;
    };
  };

  // ----------------------------------------------------------------------------

  exports.cells = function (row) {
    return function () {
      return row.cells;
    };
  };

  // ----------------------------------------------------------------------------

  exports["insertCell'"] = function (index) {
    return function (row) {
      return function () {
        return row.insertCell(index);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteCell = function (index) {
    return function (row) {
      return function () {
        row.deleteCell(index);
      };
    };
  };
})(PS["DOM.HTML.HTMLTableRowElement"] = PS["DOM.HTML.HTMLTableRowElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTableRowElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];        
  var insertCell = $foreign["insertCell'"](-1 | 0);
  exports["insertCell"] = insertCell;
  exports["cells"] = $foreign.cells;
  exports["deleteCell"] = $foreign.deleteCell;
  exports["insertCell'"] = $foreign["insertCell'"];
  exports["rowIndex"] = $foreign.rowIndex;
  exports["sectionRowIndex"] = $foreign.sectionRowIndex;
})(PS["DOM.HTML.HTMLTableRowElement"] = PS["DOM.HTML.HTMLTableRowElement"] || {});
(function(exports) {
    "use strict";

  exports.rows = function (section) {
    return function () {
      return section.rows;
    };
  };

  // ----------------------------------------------------------------------------

  exports["insertRow'"] = function (index) {
    return function (section) {
      return function () {
        return section.insertRow(index);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.deleteRow = function (index) {
    return function (section) {
      return function () {
        section.deleteRow(index);
      };
    };
  };
})(PS["DOM.HTML.HTMLTableSectionElement"] = PS["DOM.HTML.HTMLTableSectionElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTableSectionElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];        
  var insertRow = $foreign["insertRow'"](-1 | 0);
  exports["insertRow"] = insertRow;
  exports["deleteRow"] = $foreign.deleteRow;
  exports["insertRow'"] = $foreign["insertRow'"];
  exports["rows"] = $foreign.rows;
})(PS["DOM.HTML.HTMLTableSectionElement"] = PS["DOM.HTML.HTMLTableSectionElement"] || {});
(function(exports) {
    "use strict";

  exports.content = function (template) {
    return function () {
      return template.content;
    };
  };
})(PS["DOM.HTML.HTMLTemplateElement"] = PS["DOM.HTML.HTMLTemplateElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTemplateElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["content"] = $foreign.content;
})(PS["DOM.HTML.HTMLTemplateElement"] = PS["DOM.HTML.HTMLTemplateElement"] || {});
(function(exports) {
    "use strict";

  exports.autocomplete = function (textarea) {
    return function () {
      return textarea.autocomplete;
    };
  };

  exports.setAutocomplete = function (autocomplete) {
    return function (textarea) {
      return function () {
        textarea.autocomplete = autocomplete;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.autofocus = function (textarea) {
    return function () {
      return textarea.autofocus;
    };
  };

  exports.setAutofocus = function (autofocus) {
    return function (textarea) {
      return function () {
        textarea.autofocus = autofocus;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.cols = function (textarea) {
    return function () {
      return textarea.cols;
    };
  };

  exports.setCols = function (cols) {
    return function (textarea) {
      return function () {
        textarea.cols = cols;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.dirName = function (textarea) {
    return function () {
      return textarea.dirName;
    };
  };

  exports.setDirName = function (dirName) {
    return function (textarea) {
      return function () {
        textarea.dirName = dirName;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.disabled = function (textarea) {
    return function () {
      return textarea.disabled;
    };
  };

  exports.setDisabled = function (disabled) {
    return function (textarea) {
      return function () {
        textarea.disabled = disabled;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports._form = function (textarea) {
    return function () {
      return textarea.form;
    };
  };

  // ----------------------------------------------------------------------------

  exports.maxLength = function (textarea) {
    return function () {
      return textarea.maxLength;
    };
  };

  exports.setMaxLength = function (maxLength) {
    return function (textarea) {
      return function () {
        textarea.maxLength = maxLength;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.minLength = function (textarea) {
    return function () {
      return textarea.minLength;
    };
  };

  exports.setMinLength = function (minLength) {
    return function (textarea) {
      return function () {
        textarea.minLength = minLength;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.name = function (textarea) {
    return function () {
      return textarea.name;
    };
  };

  exports.setName = function (name) {
    return function (textarea) {
      return function () {
        textarea.name = name;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.placeholder = function (textarea) {
    return function () {
      return textarea.placeholder;
    };
  };

  exports.setPlaceholder = function (placeholder) {
    return function (textarea) {
      return function () {
        textarea.placeholder = placeholder;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.readOnly = function (textarea) {
    return function () {
      return textarea.readOnly;
    };
  };

  exports.setReadOnly = function (readOnly) {
    return function (textarea) {
      return function () {
        textarea.readOnly = readOnly;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.required = function (textarea) {
    return function () {
      return textarea.required;
    };
  };

  exports.setRequired = function (required) {
    return function (textarea) {
      return function () {
        textarea.required = required;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.rows = function (textarea) {
    return function () {
      return textarea.rows;
    };
  };

  exports.setRows = function (rows) {
    return function (textarea) {
      return function () {
        textarea.rows = rows;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.wrap = function (textarea) {
    return function () {
      return textarea.wrap;
    };
  };

  exports.setWrap = function (wrap) {
    return function (textarea) {
      return function () {
        textarea.wrap = wrap;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.type_ = function (textarea) {
    return function () {
      return textarea.type;
    };
  };

  // ----------------------------------------------------------------------------

  exports.defaultValue = function (textarea) {
    return function () {
      return textarea.defaultValue;
    };
  };

  exports.setDefaultValue = function (defaultValue) {
    return function (textarea) {
      return function () {
        textarea.defaultValue = defaultValue;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.value = function (textarea) {
    return function () {
      return textarea.value;
    };
  };

  exports.setValue = function (value) {
    return function (textarea) {
      return function () {
        textarea.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.textLength = function (textarea) {
    return function () {
      return textarea.textLength;
    };
  };

  // ----------------------------------------------------------------------------

  exports.willValidate = function (textarea) {
    return function () {
      return textarea.willValidate;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validity = function (textarea) {
    return function () {
      return textarea.validity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.validationMessage = function (textarea) {
    return function () {
      return textarea.validationMessage;
    };
  };

  // ----------------------------------------------------------------------------

  exports.checkValidity = function (textarea) {
    return function () {
      return textarea.checkValidity;
    };
  };

  // ----------------------------------------------------------------------------

  exports.setCustomValidity = function (value) {
    return function (textarea) {
      return function () {
        textarea.setCustomValidity(value);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.labels = function (textarea) {
    return function () {
      return textarea.labels;
    };
  };

  // ----------------------------------------------------------------------------

  exports.select = function (textarea) {
    return function () {
      textarea.select();
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionStart = function (textarea) {
    return function () {
      return textarea.selectionStart;
    };
  };

  exports.setSelectionStart = function (selectionStart) {
    return function (textarea) {
      return function () {
        textarea.selectionStart = selectionStart;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionEnd = function (textarea) {
    return function () {
      return textarea.selectionEnd;
    };
  };

  exports.setSelectionEnd = function (selectionEnd) {
    return function (textarea) {
      return function () {
        textarea.selectionEnd = selectionEnd;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.selectionDirection = function (textarea) {
    return function () {
      return textarea.selectionDirection;
    };
  };

  exports.setSelectionDirection = function (selectionDirection) {
    return function (textarea) {
      return function () {
        textarea.selectionDirection = selectionDirection;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.setRangeText = function (replacement) {
    return function (textarea) {
      return function () {
        textarea.setRangeText(replacement);
      };
    };
  };

  exports["setRangeText'"] = function (replacement) {
    return function (start) {
      return function (end) {
        return function (selectionMode) {
          return function (textarea) {
            return function () {
              textarea.setRangeText(replacement, start, end, selectionMode);
            };
          };
        };
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.setSelectionRange = function (start) {
    return function (end) {
      return function (direction) {
        return function (textarea) {
          return function () {
            textarea.setSelectionRange(start, end, direction);
          };
        };
      };
    };
  };
})(PS["DOM.HTML.HTMLTextAreaElement"] = PS["DOM.HTML.HTMLTextAreaElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTextAreaElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_SelectionMode = PS["DOM.HTML.SelectionMode"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var form = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._form($0));
  };
  exports["form"] = form;
  exports["autocomplete"] = $foreign.autocomplete;
  exports["autofocus"] = $foreign.autofocus;
  exports["checkValidity"] = $foreign.checkValidity;
  exports["cols"] = $foreign.cols;
  exports["defaultValue"] = $foreign.defaultValue;
  exports["dirName"] = $foreign.dirName;
  exports["disabled"] = $foreign.disabled;
  exports["labels"] = $foreign.labels;
  exports["maxLength"] = $foreign.maxLength;
  exports["minLength"] = $foreign.minLength;
  exports["name"] = $foreign.name;
  exports["placeholder"] = $foreign.placeholder;
  exports["readOnly"] = $foreign.readOnly;
  exports["required"] = $foreign.required;
  exports["rows"] = $foreign.rows;
  exports["select"] = $foreign.select;
  exports["selectionDirection"] = $foreign.selectionDirection;
  exports["selectionEnd"] = $foreign.selectionEnd;
  exports["selectionStart"] = $foreign.selectionStart;
  exports["setAutocomplete"] = $foreign.setAutocomplete;
  exports["setAutofocus"] = $foreign.setAutofocus;
  exports["setCols"] = $foreign.setCols;
  exports["setCustomValidity"] = $foreign.setCustomValidity;
  exports["setDefaultValue"] = $foreign.setDefaultValue;
  exports["setDirName"] = $foreign.setDirName;
  exports["setDisabled"] = $foreign.setDisabled;
  exports["setMaxLength"] = $foreign.setMaxLength;
  exports["setMinLength"] = $foreign.setMinLength;
  exports["setName"] = $foreign.setName;
  exports["setPlaceholder"] = $foreign.setPlaceholder;
  exports["setRangeText"] = $foreign.setRangeText;
  exports["setRangeText'"] = $foreign["setRangeText'"];
  exports["setReadOnly"] = $foreign.setReadOnly;
  exports["setRequired"] = $foreign.setRequired;
  exports["setRows"] = $foreign.setRows;
  exports["setSelectionDirection"] = $foreign.setSelectionDirection;
  exports["setSelectionEnd"] = $foreign.setSelectionEnd;
  exports["setSelectionRange"] = $foreign.setSelectionRange;
  exports["setSelectionStart"] = $foreign.setSelectionStart;
  exports["setValue"] = $foreign.setValue;
  exports["setWrap"] = $foreign.setWrap;
  exports["textLength"] = $foreign.textLength;
  exports["type_"] = $foreign.type_;
  exports["validationMessage"] = $foreign.validationMessage;
  exports["validity"] = $foreign.validity;
  exports["value"] = $foreign.value;
  exports["willValidate"] = $foreign.willValidate;
  exports["wrap"] = $foreign.wrap;
})(PS["DOM.HTML.HTMLTextAreaElement"] = PS["DOM.HTML.HTMLTextAreaElement"] || {});
(function(exports) {
    "use strict";

  exports.dateTime = function (time) {
    return function () {
      return time.dateTime;
    };
  };

  exports.setDateTime = function (dateTime) {
    return function (time) {
      return function () {
        time.dateTime = dateTime;
      };
    };
  };
})(PS["DOM.HTML.HTMLTimeElement"] = PS["DOM.HTML.HTMLTimeElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTimeElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["dateTime"] = $foreign.dateTime;
  exports["setDateTime"] = $foreign.setDateTime;
})(PS["DOM.HTML.HTMLTimeElement"] = PS["DOM.HTML.HTMLTimeElement"] || {});
(function(exports) {
    "use strict";

  exports.text = function (title) {
    return function () {
      return title.text;
    };
  };

  exports.setText = function (text) {
    return function (title) {
      return function () {
        title.text = text;
      };
    };
  };
})(PS["DOM.HTML.HTMLTitleElement"] = PS["DOM.HTML.HTMLTitleElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTitleElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["setText"] = $foreign.setText;
  exports["text"] = $foreign.text;
})(PS["DOM.HTML.HTMLTitleElement"] = PS["DOM.HTML.HTMLTitleElement"] || {});
(function(exports) {
    "use strict";

  exports.kind = function (track) {
    return function () {
      return track.kind;
    };
  };

  exports.setKind = function (kind) {
    return function (track) {
      return function () {
        track.kind = kind;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.src = function (track) {
    return function () {
      return track.src;
    };
  };

  exports.setSrc = function (src) {
    return function (track) {
      return function () {
        track.src = src;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.srclang = function (track) {
    return function () {
      return track.srclang;
    };
  };

  exports.setSrclang = function (srclang) {
    return function (track) {
      return function () {
        track.srclang = srclang;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.label = function (track) {
    return function () {
      return track.label;
    };
  };

  exports.setLabel = function (label) {
    return function (track) {
      return function () {
        track.label = label;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports["default"] = function (track) {
    return function () {
      return track["default"];
    };
  };

  exports.setDefault = function (def) {
    return function (track) {
      return function () {
        track["default"] = def;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.readyStateIndex = function (track) {
    return function () {
      return track.readyState;
    };
  };
})(PS["DOM.HTML.HTMLTrackElement"] = PS["DOM.HTML.HTMLTrackElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var NONE = (function () {
      function NONE() {

      };
      NONE.value = new NONE();
      return NONE;
  })();
  var LOADING = (function () {
      function LOADING() {

      };
      LOADING.value = new LOADING();
      return LOADING;
  })();
  var LOADED = (function () {
      function LOADED() {

      };
      LOADED.value = new LOADED();
      return LOADED;
  })();
  var ERROR = (function () {
      function ERROR() {

      };
      ERROR.value = new ERROR();
      return ERROR;
  })();
  var toEnumReadyState = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(NONE.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(LOADING.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(LOADED.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(ERROR.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showReadyState = new Data_Show.Show(function (v) {
      if (v instanceof NONE) {
          return "NONE";
      };
      if (v instanceof LOADING) {
          return "LOADING";
      };
      if (v instanceof LOADED) {
          return "LOADED";
      };
      if (v instanceof ERROR) {
          return "ERROR";
      };
      throw new Error("Failed pattern match at DOM.HTML.HTMLTrackElement.ReadyState line 29, column 1 - line 29, column 43: " + [ v.constructor.name ]);
  });
  var fromEnumReadyState = function (v) {
      if (v instanceof NONE) {
          return 0;
      };
      if (v instanceof LOADING) {
          return 1;
      };
      if (v instanceof LOADED) {
          return 2;
      };
      if (v instanceof ERROR) {
          return 3;
      };
      throw new Error("Failed pattern match at DOM.HTML.HTMLTrackElement.ReadyState line 46, column 3 - line 50, column 14: " + [ v.constructor.name ]);
  };
  var eqReadyState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof NONE && y instanceof NONE) {
              return true;
          };
          if (x instanceof LOADING && y instanceof LOADING) {
              return true;
          };
          if (x instanceof LOADED && y instanceof LOADED) {
              return true;
          };
          if (x instanceof ERROR && y instanceof ERROR) {
              return true;
          };
          return false;
      };
  });
  var ordReadyState = new Data_Ord.Ord(function () {
      return eqReadyState;
  }, function (x) {
      return function (y) {
          if (x instanceof NONE && y instanceof NONE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof NONE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof NONE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof LOADING && y instanceof LOADING) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof LOADING) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof LOADING) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof LOADED && y instanceof LOADED) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof LOADED) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof LOADED) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ERROR && y instanceof ERROR) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at DOM.HTML.HTMLTrackElement.ReadyState line 14, column 8 - line 14, column 48: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumReadyState = new Data_Enum.Enum(function () {
      return ordReadyState;
  }, Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState), Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState));
  var boundedReadyState = new Data_Bounded.Bounded(function () {
      return ordReadyState;
  }, NONE.value, ERROR.value);
  var boundedEnumReadyState = new Data_Enum.BoundedEnum(function () {
      return boundedReadyState;
  }, function () {
      return enumReadyState;
  }, 4, fromEnumReadyState, toEnumReadyState);
  exports["NONE"] = NONE;
  exports["LOADING"] = LOADING;
  exports["LOADED"] = LOADED;
  exports["ERROR"] = ERROR;
  exports["fromEnumReadyState"] = fromEnumReadyState;
  exports["toEnumReadyState"] = toEnumReadyState;
  exports["eqReadyState"] = eqReadyState;
  exports["ordReadyState"] = ordReadyState;
  exports["boundedReadyState"] = boundedReadyState;
  exports["enumReadyState"] = enumReadyState;
  exports["boundedEnumReadyState"] = boundedEnumReadyState;
  exports["showReadyState"] = showReadyState;
})(PS["DOM.HTML.HTMLTrackElement.ReadyState"] = PS["DOM.HTML.HTMLTrackElement.ReadyState"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLTrackElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_HTMLTrackElement_ReadyState = PS["DOM.HTML.HTMLTrackElement.ReadyState"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];        
  var readyState = function (dictPartial) {
      return function ($1) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(function ($2) {
              return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(DOM_HTML_HTMLTrackElement_ReadyState.boundedEnumReadyState)($2));
          })($foreign.readyStateIndex($1));
      };
  };
  exports["readyState"] = readyState;
  exports["default"] = $foreign["default"];
  exports["kind"] = $foreign.kind;
  exports["label"] = $foreign.label;
  exports["readyStateIndex"] = $foreign.readyStateIndex;
  exports["setDefault"] = $foreign.setDefault;
  exports["setKind"] = $foreign.setKind;
  exports["setLabel"] = $foreign.setLabel;
  exports["setSrc"] = $foreign.setSrc;
  exports["setSrclang"] = $foreign.setSrclang;
  exports["src"] = $foreign.src;
  exports["srclang"] = $foreign.srclang;
})(PS["DOM.HTML.HTMLTrackElement"] = PS["DOM.HTML.HTMLTrackElement"] || {});
(function(exports) {
    "use strict";

  // ----------------------------------------------------------------------------

  exports.width = function (video) {
    return function () {
      return video.width;
    };
  };

  exports.setWidth = function (width) {
    return function (video) {
      return function () {
        video.width = width;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.height = function (video) {
    return function () {
      return video.height;
    };
  };

  exports.setHeight = function (height) {
    return function (video) {
      return function () {
        video.height = height;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.videoWidth = function (video) {
    return function () {
      return video.videoWidth;
    };
  };

  // ----------------------------------------------------------------------------

  exports.videoHeight = function (video) {
    return function () {
      return video.videoHeight;
    };
  };

  // ----------------------------------------------------------------------------

  exports.poster = function (video) {
    return function () {
      return video.poster;
    };
  };

  exports.setPoster = function (poster) {
    return function (video) {
      return function () {
        video.poster = poster;
      };
    };
  };
})(PS["DOM.HTML.HTMLVideoElement"] = PS["DOM.HTML.HTMLVideoElement"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.HTMLVideoElement"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["height"] = $foreign.height;
  exports["poster"] = $foreign.poster;
  exports["setHeight"] = $foreign.setHeight;
  exports["setPoster"] = $foreign.setPoster;
  exports["setWidth"] = $foreign.setWidth;
  exports["videoHeight"] = $foreign.videoHeight;
  exports["videoWidth"] = $foreign.videoWidth;
  exports["width"] = $foreign.width;
})(PS["DOM.HTML.HTMLVideoElement"] = PS["DOM.HTML.HTMLVideoElement"] || {});
(function(exports) {
    "use strict";

  exports.back = function(history) {
    return function() {
      return history.back();
    };
  };
  exports.forward = function(history) {
    return function() {
      return history.forward();
    };
  };
  exports.go = function(delta) {
    return function(history) {
      return function() {
        return history.go(delta);
      };
    };
  };
  exports.pushState = function(a) {
    return function(docTitle) {
      return function(url) {
        return function(history) {
          return function() {
            return history.pushState(a, docTitle, url);
          };
        };
      };
    };
  };
  exports.replaceState = function(a) {
    return function(docTitle) {
      return function(url) {
        return function(history) {
          return function() {
            return history.replaceState(a, docTitle, url);
          };
        };
      };
    };
  };
  exports.state = function(history) {
    return function() {
      return history.state;
    };
  };
})(PS["DOM.HTML.History"] = PS["DOM.HTML.History"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.History"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];        
  var URL = function (x) {
      return x;
  };
  var DocumentTitle = function (x) {
      return x;
  };
  var Delta = function (x) {
      return x;
  };
  var newtypeURL = new Data_Newtype.Newtype(function (n) {
      return n;
  }, URL);
  var newtypeDocumentTitle = new Data_Newtype.Newtype(function (n) {
      return n;
  }, DocumentTitle);
  var newtypeDelta = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Delta);
  var eqURL = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordURL = new Data_Ord.Ord(function () {
      return eqURL;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  var eqDocumentTitle = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordDocumentTitle = new Data_Ord.Ord(function () {
      return eqDocumentTitle;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordString)(x)(y);
      };
  });
  var eqDelta = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordDelta = new Data_Ord.Ord(function () {
      return eqDelta;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  exports["Delta"] = Delta;
  exports["DocumentTitle"] = DocumentTitle;
  exports["URL"] = URL;
  exports["eqDocumentTitle"] = eqDocumentTitle;
  exports["ordDocumentTitle"] = ordDocumentTitle;
  exports["newtypeDocumentTitle"] = newtypeDocumentTitle;
  exports["eqDelta"] = eqDelta;
  exports["ordDelta"] = ordDelta;
  exports["newtypeDelta"] = newtypeDelta;
  exports["eqURL"] = eqURL;
  exports["ordURL"] = ordURL;
  exports["newtypeURL"] = newtypeURL;
  exports["back"] = $foreign.back;
  exports["forward"] = $foreign.forward;
  exports["go"] = $foreign.go;
  exports["pushState"] = $foreign.pushState;
  exports["replaceState"] = $foreign.replaceState;
  exports["state"] = $foreign.state;
})(PS["DOM.HTML.History"] = PS["DOM.HTML.History"] || {});
(function(exports) {
    "use strict";

  exports.hash = function (location) {
    return function () {
      return location.hash;
    };
  };

  exports.setHash = function (hash) {
    return function (location) {
      return function () {
        location.hash = hash;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.host = function (location) {
    return function () {
      return location.host;
    };
  };

  exports.setHost = function (host) {
    return function (location) {
      return function () {
        location.host = host;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.hostname = function (location) {
    return function () {
      return location.hostname;
    };
  };

  exports.setHostname = function (hostname) {
    return function (location) {
      return function () {
        location.hostname = hostname;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.href = function (location) {
    return function () {
      return location.href;
    };
  };

  exports.setHref = function (href) {
    return function (location) {
      return function () {
        location.href = href;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.origin = function (location) {
    return function () {
      return location.origin;
    };
  };

  exports.setOrigin = function (origin) {
    return function (location) {
      return function () {
        location.origin = origin;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.pathname = function (location) {
    return function () {
      return location.pathname;
    };
  };

  exports.setPathname = function (pathname) {
    return function (location) {
      return function () {
        location.pathname = pathname;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.port = function (location) {
    return function () {
      return location.port;
    };
  };

  exports.setPort = function (port) {
    return function (location) {
      return function () {
        location.port = port;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.protocol = function (location) {
    return function () {
      return location.protocol;
    };
  };

  exports.setProtocol = function (protocol) {
    return function (location) {
      return function () {
        location.protocol = protocol;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.search = function (location) {
    return function () {
      return location.search;
    };
  };

  exports.setSearch = function (search) {
    return function (location) {
      return function () {
        location.search = search;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.assign = function (url) {
    return function (location) {
      return function () {
        location.assign(url);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.replace = function (url) {
    return function (location) {
      return function () {
        location.replace(url);
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.reload = function (location) {
    return function () {
      location.reload();
    };
  };
})(PS["DOM.HTML.Location"] = PS["DOM.HTML.Location"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Location"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  exports["assign"] = $foreign.assign;
  exports["hash"] = $foreign.hash;
  exports["host"] = $foreign.host;
  exports["hostname"] = $foreign.hostname;
  exports["href"] = $foreign.href;
  exports["origin"] = $foreign.origin;
  exports["pathname"] = $foreign.pathname;
  exports["port"] = $foreign.port;
  exports["protocol"] = $foreign.protocol;
  exports["reload"] = $foreign.reload;
  exports["replace"] = $foreign.replace;
  exports["search"] = $foreign.search;
  exports["setHash"] = $foreign.setHash;
  exports["setHost"] = $foreign.setHost;
  exports["setHostname"] = $foreign.setHostname;
  exports["setHref"] = $foreign.setHref;
  exports["setOrigin"] = $foreign.setOrigin;
  exports["setPathname"] = $foreign.setPathname;
  exports["setPort"] = $foreign.setPort;
  exports["setProtocol"] = $foreign.setProtocol;
  exports["setSearch"] = $foreign.setSearch;
})(PS["DOM.HTML.Location"] = PS["DOM.HTML.Location"] || {});
(function(exports) {
    "use strict";

  exports.platform = function (navigator) {
    return function () {
      return navigator.platform;
    };
  };
})(PS["DOM.HTML.Navigator"] = PS["DOM.HTML.Navigator"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Navigator"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["platform"] = $foreign.platform;
})(PS["DOM.HTML.Navigator"] = PS["DOM.HTML.Navigator"] || {});
(function(exports) {
    "use strict";

  exports.createObjectURL = function (fileOrBlob) {
    return function (URL) {
      return function () {
        return URL.createObjectURL(fileOrBlob);
      };
    };
  };

  exports.revokeObjectURL = function (objectURL) {
    return function (URL) {
      return function () {
        return URL.revokeObjectURL(objectURL);
      };
    };
  };
})(PS["DOM.HTML.URL"] = PS["DOM.HTML.URL"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.URL"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Unit = PS["Data.Unit"];
  exports["createObjectURL"] = $foreign.createObjectURL;
  exports["revokeObjectURL"] = $foreign.revokeObjectURL;
})(PS["DOM.HTML.URL"] = PS["DOM.HTML.URL"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };

  exports.navigator = function (window) {
    return function () {
      return window.navigator;
    };
  };

  exports.location = function (window) {
    return function () {
      return window.location;
    };
  };

  exports.history = function(window) {
    return function() {
      return window.history;
    };
  };

  exports.innerWidth = function (window) {
    return function () {
      return window.innerWidth;
    };
  };

  exports.innerHeight = function (window) {
    return function () {
      return window.innerHeight;
    };
  };

  exports.alert = function (str) {
    return function (window) {
      return function () {
        window.alert(str);
        return {};
      };
    };
  };

  exports.confirm = function (str) {
    return function (window) {
      return function () {
        return window.confirm(str);
      };
    };
  };

  exports.moveBy = function (xDelta) {
    return function (yDelta) {
      return function (window) {
        return function () {
          window.moveBy(xDelta, yDelta);
          return {};
        };
      };
    };
  };

  exports.moveTo = function (width) {
    return function (height) {
      return function (window) {
        return function () {
          window.moveTo(width, height);
          return {};
        };
      };
    };
  };

  exports._open = function (url) {
    return function (name) {
      return function (features) {
        return function (window) {
          return function () {
            return window.open(url, name, features);
          };
        };
      };
    };
  };

  exports.outerHeight = function (window) {
    return function () {
      return window.outerHeight;
    };
  };

  exports.outerWidth = function (window) {
    return function () {
      return window.outerWidth;
    };
  };

  exports.print = function (window) {
    return function () {
      window.print();
      return {};
    };
  };

  exports._prompt = function (str) {
    return function (defaultText) {
      return function (window) {
        return function () {
          return window.prompt(str, defaultText);
        };
      };
    };
  };

  exports.resizeBy = function (xDelta) {
    return function (yDelta) {
      return function (window) {
        return function () {
          window.resizeBy(xDelta, yDelta);
          return {};
        };
      };
    };
  };

  exports.resizeTo = function (width) {
    return function (height) {
      return function (window) {
        return function () {
          window.resizeTo(width, height);
          return {};
        };
      };
    };
  };

  exports.screenX = function (window) {
    return function () {
      return window.screenX;
    };
  };

  exports.screenY = function (window) {
    return function () {
      return window.screenY;
    };
  };

  exports.scroll = function (xCoord) {
    return function (yCoord) {
      return function (window) {
        return function () {
          window.scroll(xCoord, yCoord);
          return {};
        };
      };
    };
  };

  exports.scrollBy = function (xCoord) {
    return function (yCoord) {
      return function (window) {
        return function () {
          window.scrollBy(xCoord, yCoord);
          return {};
        };
      };
    };
  };

  exports.scrollX = function (window) {
    return function () {
      return window.scrollX;
    };
  };

  exports.scrollY = function (window) {
    return function () {
      return window.scrollY;
    };
  };

  exports.url = function (window) {
    return function () {
      return window.URL;
    };
  };

  exports.localStorage = function (window) {
    return function () {
      return window.localStorage;
    };
  };

  exports.sessionStorage = function (window) {
    return function () {
      return window.sessionStorage;
    };
  };

  exports._requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };

  exports._cancelAnimationFrame = function(id) {
    return function(window) {
      return function() {
        return window.cancelAnimationFrame(id);
      };
    };
  };

  exports._requestIdleCallback = function(opts) {
    return function(fn) {
      return function(window) {
        return function() {
          return window.requestIdleCallback(fn, opts);
        };
      };
    };
  };

  exports._cancelIdleCallback = function(id) {
    return function(window) {
      return function() {
        return window.cancelIdleCallback(id);
      };
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Foreign = PS["Data.Foreign"];        
  var readStorage = Data_Foreign.unsafeReadTagged("Storage");
  exports["readStorage"] = readStorage;
})(PS["DOM.WebStorage.Types"] = PS["DOM.WebStorage.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];        
  var RequestIdleCallbackId = function (x) {
      return x;
  };
  var RequestAnimationFrameId = function (x) {
      return x;
  };
  var requestIdleCallback = function (opts) {
      return function (fn) {
          return function ($30) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(RequestIdleCallbackId)($foreign._requestIdleCallback(opts)(fn)($30));
          };
      };
  };
  var requestAnimationFrame = function (fn) {
      return function ($31) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(RequestAnimationFrameId)($foreign._requestAnimationFrame(fn)($31));
      };
  };
  var promptDefault = function (msg) {
      return function (defaultText) {
          return function (window) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._prompt(msg)(defaultText)(window));
          };
      };
  };
  var prompt = function (msg) {
      return function (window) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._prompt(msg)("")(window));
      };
  };
  var open = function (window) {
      return function (url$prime) {
          return function (name) {
              return function (features) {
                  return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._open(window)(url$prime)(name)(features));
              };
          };
      };
  };
  var newtypeRequestIdleCallbackId = new Data_Newtype.Newtype(function (n) {
      return n;
  }, RequestIdleCallbackId);
  var newtypeRequestAnimationFrameId = new Data_Newtype.Newtype(function (n) {
      return n;
  }, RequestAnimationFrameId);
  var eqRequestIdleCallbackId = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordRequestIdleCallbackId = new Data_Ord.Ord(function () {
      return eqRequestIdleCallbackId;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var eqRequestAnimationFrameId = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });
  var ordRequestAnimationFrameId = new Data_Ord.Ord(function () {
      return eqRequestAnimationFrameId;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
      };
  });
  var cancelIdleCallback = function (idAF) {
      return $foreign._cancelIdleCallback(Data_Newtype.unwrap(newtypeRequestIdleCallbackId)(idAF));
  };
  var cancelAnimationFrame = function (idAF) {
      return $foreign._cancelAnimationFrame(Data_Newtype.unwrap(newtypeRequestAnimationFrameId)(idAF));
  };
  exports["cancelAnimationFrame"] = cancelAnimationFrame;
  exports["cancelIdleCallback"] = cancelIdleCallback;
  exports["open"] = open;
  exports["prompt"] = prompt;
  exports["promptDefault"] = promptDefault;
  exports["requestAnimationFrame"] = requestAnimationFrame;
  exports["requestIdleCallback"] = requestIdleCallback;
  exports["newtypeRequestAnimationFrameId"] = newtypeRequestAnimationFrameId;
  exports["eqRequestAnimationFrameId"] = eqRequestAnimationFrameId;
  exports["ordRequestAnimationFrameId"] = ordRequestAnimationFrameId;
  exports["newtypeRequestIdleCallbackId"] = newtypeRequestIdleCallbackId;
  exports["eqRequestIdleCallbackId"] = eqRequestIdleCallbackId;
  exports["ordRequestIdleCallbackId"] = ordRequestIdleCallbackId;
  exports["alert"] = $foreign.alert;
  exports["confirm"] = $foreign.confirm;
  exports["document"] = $foreign.document;
  exports["history"] = $foreign.history;
  exports["innerHeight"] = $foreign.innerHeight;
  exports["innerWidth"] = $foreign.innerWidth;
  exports["localStorage"] = $foreign.localStorage;
  exports["location"] = $foreign.location;
  exports["moveBy"] = $foreign.moveBy;
  exports["moveTo"] = $foreign.moveTo;
  exports["navigator"] = $foreign.navigator;
  exports["outerHeight"] = $foreign.outerHeight;
  exports["outerWidth"] = $foreign.outerWidth;
  exports["print"] = $foreign.print;
  exports["resizeBy"] = $foreign.resizeBy;
  exports["resizeTo"] = $foreign.resizeTo;
  exports["screenX"] = $foreign.screenX;
  exports["screenY"] = $foreign.screenY;
  exports["scroll"] = $foreign.scroll;
  exports["scrollBy"] = $foreign.scrollBy;
  exports["scrollX"] = $foreign.scrollX;
  exports["scrollY"] = $foreign.scrollY;
  exports["sessionStorage"] = $foreign.sessionStorage;
  exports["url"] = $foreign.url;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  exports.remove = function (node) {
    return function () {
      return node.remove();
    };
  };
})(PS["DOM.Node.ChildNode"] = PS["DOM.Node.ChildNode"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.ChildNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Prelude = PS["Prelude"];
  exports["remove"] = $foreign.remove;
})(PS["DOM.Node.ChildNode"] = PS["DOM.Node.ChildNode"] || {});
(function(exports) {
    "use strict";

  var getEffProp = function (name) {
    return function (doc) {
      return function () {
        return doc[name];
      };
    };
  };

  exports.url = getEffProp("URL");
  exports.documentURI = getEffProp("documentURI");
  exports.origin = getEffProp("origin");
  exports.compatMode = getEffProp("compatMode");
  exports.characterSet = getEffProp("characterSet");
  exports.contentType = getEffProp("contentType");

  exports._doctype = getEffProp("doctype");
  exports._documentElement = getEffProp("documentElement");

  exports.getElementsByTagName = function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagName(localName);
      };
    };
  };

  exports._getElementsByTagNameNS = function (ns) {
    return function (localName) {
      return function (doc) {
        return function () {
          return doc.getElementsByTagNameNS(ns, localName);
        };
      };
    };
  };

  exports.getElementsByClassName = function (classNames) {
    return function (doc) {
      return function () {
        return doc.getElementsByClassName(classNames);
      };
    };
  };

  exports.createElement = function (localName) {
    return function (doc) {
      return function () {
        return doc.createElement(localName);
      };
    };
  };

  exports._createElementNS = function (ns) {
    return function (qualifiedName) {
      return function (doc) {
        return function () {
          return doc.createElementNS(ns, qualifiedName);
        };
      };
    };
  };

  exports.createDocumentFragment = function (doc) {
    return function () {
      return doc.createDocumentFragment();
    };
  };

  exports.createTextNode = function (data) {
    return function (doc) {
      return function () {
        return doc.createTextNode(data);
      };
    };
  };

  exports.createComment = function (data) {
    return function (doc) {
      return function () {
        return doc.createComment(data);
      };
    };
  };

  exports.createProcessingInstruction = function (target) {
    return function (data) {
      return function (doc) {
        return function () {
          return doc.createProcessingInstruction(target, data);
        };
      };
    };
  };

  exports.importNode = function (node) {
    return function (deep) {
      return function (doc) {
        return function () {
          return doc.importNode(node, deep);
        };
      };
    };
  };

  exports.adoptNode = function (node) {
    return function (doc) {
      return function () {
        return doc.adoptNode(node);
      };
    };
  };
})(PS["DOM.Node.Document"] = PS["DOM.Node.Document"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.Document"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var getElementsByTagNameNS = function ($0) {
      return $foreign._getElementsByTagNameNS(Data_Nullable.toNullable($0));
  };
  var documentElement = function ($1) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._documentElement($1));
  };
  var doctype = function ($2) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._doctype($2));
  };
  var createElementNS = function ($3) {
      return $foreign._createElementNS(Data_Nullable.toNullable($3));
  };
  exports["createElementNS"] = createElementNS;
  exports["doctype"] = doctype;
  exports["documentElement"] = documentElement;
  exports["getElementsByTagNameNS"] = getElementsByTagNameNS;
  exports["adoptNode"] = $foreign.adoptNode;
  exports["characterSet"] = $foreign.characterSet;
  exports["compatMode"] = $foreign.compatMode;
  exports["contentType"] = $foreign.contentType;
  exports["createComment"] = $foreign.createComment;
  exports["createDocumentFragment"] = $foreign.createDocumentFragment;
  exports["createElement"] = $foreign.createElement;
  exports["createProcessingInstruction"] = $foreign.createProcessingInstruction;
  exports["createTextNode"] = $foreign.createTextNode;
  exports["documentURI"] = $foreign.documentURI;
  exports["getElementsByClassName"] = $foreign.getElementsByClassName;
  exports["getElementsByTagName"] = $foreign.getElementsByTagName;
  exports["importNode"] = $foreign.importNode;
  exports["origin"] = $foreign.origin;
  exports["url"] = $foreign.url;
})(PS["DOM.Node.Document"] = PS["DOM.Node.Document"] || {});
(function(exports) {
    "use strict";

  var getProp = function (name) {
    return function (doctype) {
      return doctype[name];
    };
  };

  exports.name = getProp("name");
  exports.publicId = getProp("publicId");
  exports.systemId = getProp("systemId");
})(PS["DOM.Node.DocumentType"] = PS["DOM.Node.DocumentType"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.DocumentType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports["name"] = $foreign.name;
  exports["publicId"] = $foreign.publicId;
  exports["systemId"] = $foreign.systemId;
})(PS["DOM.Node.DocumentType"] = PS["DOM.Node.DocumentType"] || {});
(function(exports) {
    "use strict";

  var getProp = function (name) {
    return function (doctype) {
      return doctype[name];
    };
  };

  exports._namespaceURI = getProp("namespaceURI");
  exports._prefix = getProp("prefix");
  exports.localName = getProp("localName");
  exports.tagName = getProp("tagName");

  exports.id = function (node) {
    return function () {
      return node.id;
    };
  };

  exports.setId = function (id) {
    return function (node) {
      return function () {
        node.id = id;
        return {};
      };
    };
  };

  exports.className = function (node) {
    return function () {
      return node.className;
    };
  };

  exports.setClassName = function (className) {
    return function (node) {
      return function () {
        node.className = className;
        return {};
      };
    };
  };

  exports.getElementsByTagName = function (localName) {
    return function (doc) {
      return function () {
        return doc.getElementsByTagName(localName);
      };
    };
  };

  exports._getElementsByTagNameNS = function (ns) {
    return function (localName) {
      return function (doc) {
        return function () {
          return doc.getElementsByTagNameNS(ns, localName);
        };
      };
    };
  };

  exports.getElementsByClassName = function (classNames) {
    return function (doc) {
      return function () {
        return doc.getElementsByClassName(classNames);
      };
    };
  };

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
          return {};
        };
      };
    };
  };

  exports._getAttribute = function (name) {
    return function (element) {
      return function () {
        return element.getAttribute(name);
      };
    };
  };

  exports.removeAttribute = function (name) {
    return function (element) {
      return function () {
        element.removeAttribute(name);
        return {};
      };
    };
  };

  // - CSSOM ---------------------------------------------------------------------

  exports.scrollTop = function (node) {
    return function () {
      return node.scrollTop;
    };
  };

  exports.setScrollTop = function (scrollTop) {
    return function (node) {
      return function () {
        node.scrollTop = scrollTop;
        return {};
      };
    };
  };

  exports.scrollLeft = function (node) {
    return function () {
      return node.scrollLeft;
    };
  };

  exports.setScrollLeft = function (scrollLeft) {
    return function (node) {
      return function () {
        node.scrollLeft = scrollLeft;
        return {};
      };
    };
  };

  exports.scrollWidth = function (el) {
    return function () {
      return el.scrollWidth;
    };
  };

  exports.scrollHeight = function (el) {
    return function () {
      return el.scrollHeight;
    };
  };

  exports.clientTop = function (el) {
    return function () {
      return el.clientTop;
    };
  };

  exports.clientLeft = function (el) {
    return function () {
      return el.clientLeft;
    };
  };

  exports.clientWidth = function (el) {
    return function () {
      return el.clientWidth;
    };
  };

  exports.clientHeight = function (el) {
    return function () {
      return el.clientHeight;
    };
  };
})(PS["DOM.Node.Element"] = PS["DOM.Node.Element"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.Element"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var prefix = function ($0) {
      return Data_Nullable.toMaybe($foreign._prefix($0));
  };
  var namespaceURI = function ($1) {
      return Data_Nullable.toMaybe($foreign._namespaceURI($1));
  };
  var getElementsByTagNameNS = function ($2) {
      return $foreign._getElementsByTagNameNS(Data_Nullable.toNullable($2));
  };
  var getAttribute = function (attr) {
      return function ($3) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._getAttribute(attr)($3));
      };
  };
  exports["getAttribute"] = getAttribute;
  exports["getElementsByTagNameNS"] = getElementsByTagNameNS;
  exports["namespaceURI"] = namespaceURI;
  exports["prefix"] = prefix;
  exports["className"] = $foreign.className;
  exports["clientHeight"] = $foreign.clientHeight;
  exports["clientLeft"] = $foreign.clientLeft;
  exports["clientTop"] = $foreign.clientTop;
  exports["clientWidth"] = $foreign.clientWidth;
  exports["getElementsByClassName"] = $foreign.getElementsByClassName;
  exports["getElementsByTagName"] = $foreign.getElementsByTagName;
  exports["id"] = $foreign.id;
  exports["localName"] = $foreign.localName;
  exports["removeAttribute"] = $foreign.removeAttribute;
  exports["scrollHeight"] = $foreign.scrollHeight;
  exports["scrollLeft"] = $foreign.scrollLeft;
  exports["scrollTop"] = $foreign.scrollTop;
  exports["scrollWidth"] = $foreign.scrollWidth;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["setClassName"] = $foreign.setClassName;
  exports["setId"] = $foreign.setId;
  exports["setScrollLeft"] = $foreign.setScrollLeft;
  exports["setScrollTop"] = $foreign.setScrollTop;
  exports["tagName"] = $foreign.tagName;
})(PS["DOM.Node.Element"] = PS["DOM.Node.Element"] || {});
(function(exports) {
    "use strict";

  exports.length = function (list) {
    return function () {
      return list.length;
    };
  };

  exports._item = function (index) {
    return function (list) {
      return function () {
        return list.item(index);
      };
    };
  };

  exports._namedItem = function (name) {
    return function (list) {
      return function () {
        return list.namedItem(name);
      };
    };
  };
})(PS["DOM.Node.HTMLCollection"] = PS["DOM.Node.HTMLCollection"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.HTMLCollection"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var namedItem = function (id) {
      return function ($0) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._namedItem(id)($0));
      };
  };
  var item = function (i) {
      return function ($1) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._item(i)($1));
      };
  };
  exports["item"] = item;
  exports["namedItem"] = namedItem;
  exports["length"] = $foreign.length;
})(PS["DOM.Node.HTMLCollection"] = PS["DOM.Node.HTMLCollection"] || {});
(function(exports) {
    "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };

  exports.nodeTypeIndex = function (node) {
    return node.nodeType;
  };

  exports.nodeName = function (node) {
    return node.nodeName;
  };

  exports.baseURI = getEffProp("baseURI");

  exports._ownerDocument = getEffProp("ownerDocument");

  exports._parentNode = getEffProp("parentNode");

  exports._parentElement = getEffProp("parentElement");

  exports.hasChildNodes = function (node) {
    return function () {
      return node.hasChildNodes();
    };
  };

  exports.childNodes = getEffProp("childNodes");

  exports._firstChild = getEffProp("firstChild");

  exports._lastChild = getEffProp("lastChild");

  exports._previousSibling = getEffProp("previousSibling");

  exports._nextSibling = getEffProp("nextSibling");

  exports.nodeValue = getEffProp("nodeValue");

  exports.setNodeValue = function (value) {
    return function (node) {
      return function () {
        node.nodeValue = value;
        return {};
      };
    };
  };

  exports.textContent = getEffProp("textContent");

  exports.setTextContent = function (value) {
    return function (node) {
      return function () {
        node.textContent = value;
        return {};
      };
    };
  };

  exports.normalize = function (node) {
    return function () {
      node.normalize();
      return {};
    };
  };

  exports.clone = function (node) {
    return function () {
      return node.cloneNode(false);
    };
  };

  exports.deepClone = function (node) {
    return function () {
      return node.cloneNode(true);
    };
  };

  exports.isEqualNode = function (node1) {
    return function (node2) {
      return function () {
        return node1.isEqualNode(node2);
      };
    };
  };

  exports.compareDocumentPositionBits = function (node1) {
    return function (node2) {
      return function () {
        return node1.compareDocumentPosition(node2);
      };
    };
  };

  exports.contains = function (node1) {
    return function (node2) {
      return function () {
        return node1.contains(node2);
      };
    };
  };

  exports._lookupPrefix = function (prefix) {
    return function (node) {
      return function () {
        return node.lookupPrefix(prefix);
      };
    };
  };

  exports._lookupNamespaceURI = function (ns) {
    return function (node) {
      return function () {
        return node.lookupNamespaceURI(ns);
      };
    };
  };

  exports.isDefaultNamespace = function (ns) {
    return function (node) {
      return function () {
        return node.isDefaultNamespace(ns);
      };
    };
  };

  exports.insertBefore = function (node1) {
    return function (node2) {
      return function (parent) {
        return function () {
          return parent.insertBefore(node1, node2);
        };
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };

  exports.replaceChild = function (newChild) {
    return function (oldChild) {
      return function (parent) {
        return function () {
          return parent.replaceChild(newChild, oldChild);
        };
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        return parent.removeChild(node);
      };
    };
  };
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];        
  var ElementNode = (function () {
      function ElementNode() {

      };
      ElementNode.value = new ElementNode();
      return ElementNode;
  })();
  var AttributeNode = (function () {
      function AttributeNode() {

      };
      AttributeNode.value = new AttributeNode();
      return AttributeNode;
  })();
  var TextNode = (function () {
      function TextNode() {

      };
      TextNode.value = new TextNode();
      return TextNode;
  })();
  var CDATASectionNode = (function () {
      function CDATASectionNode() {

      };
      CDATASectionNode.value = new CDATASectionNode();
      return CDATASectionNode;
  })();
  var EntityReferenceNode = (function () {
      function EntityReferenceNode() {

      };
      EntityReferenceNode.value = new EntityReferenceNode();
      return EntityReferenceNode;
  })();
  var EntityNode = (function () {
      function EntityNode() {

      };
      EntityNode.value = new EntityNode();
      return EntityNode;
  })();
  var ProcessingInstructionNode = (function () {
      function ProcessingInstructionNode() {

      };
      ProcessingInstructionNode.value = new ProcessingInstructionNode();
      return ProcessingInstructionNode;
  })();
  var CommentNode = (function () {
      function CommentNode() {

      };
      CommentNode.value = new CommentNode();
      return CommentNode;
  })();
  var DocumentNode = (function () {
      function DocumentNode() {

      };
      DocumentNode.value = new DocumentNode();
      return DocumentNode;
  })();
  var DocumentTypeNode = (function () {
      function DocumentTypeNode() {

      };
      DocumentTypeNode.value = new DocumentTypeNode();
      return DocumentTypeNode;
  })();
  var DocumentFragmentNode = (function () {
      function DocumentFragmentNode() {

      };
      DocumentFragmentNode.value = new DocumentFragmentNode();
      return DocumentFragmentNode;
  })();
  var NotationNode = (function () {
      function NotationNode() {

      };
      NotationNode.value = new NotationNode();
      return NotationNode;
  })();
  var toEnumNodeType = function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(ElementNode.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(AttributeNode.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(TextNode.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(CDATASectionNode.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(EntityReferenceNode.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(EntityNode.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(ProcessingInstructionNode.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(CommentNode.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(DocumentNode.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(DocumentTypeNode.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(DocumentFragmentNode.value);
      };
      if (v === 12) {
          return new Data_Maybe.Just(NotationNode.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var fromEnumNodeType = function (v) {
      if (v instanceof ElementNode) {
          return 1;
      };
      if (v instanceof AttributeNode) {
          return 2;
      };
      if (v instanceof TextNode) {
          return 3;
      };
      if (v instanceof CDATASectionNode) {
          return 4;
      };
      if (v instanceof EntityReferenceNode) {
          return 5;
      };
      if (v instanceof EntityNode) {
          return 6;
      };
      if (v instanceof ProcessingInstructionNode) {
          return 7;
      };
      if (v instanceof CommentNode) {
          return 8;
      };
      if (v instanceof DocumentNode) {
          return 9;
      };
      if (v instanceof DocumentTypeNode) {
          return 10;
      };
      if (v instanceof DocumentFragmentNode) {
          return 11;
      };
      if (v instanceof NotationNode) {
          return 12;
      };
      throw new Error("Failed pattern match at DOM.Node.NodeType line 54, column 1 - line 54, column 36: " + [ v.constructor.name ]);
  };
  var eqNodeType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof ElementNode && y instanceof ElementNode) {
              return true;
          };
          if (x instanceof AttributeNode && y instanceof AttributeNode) {
              return true;
          };
          if (x instanceof TextNode && y instanceof TextNode) {
              return true;
          };
          if (x instanceof CDATASectionNode && y instanceof CDATASectionNode) {
              return true;
          };
          if (x instanceof EntityReferenceNode && y instanceof EntityReferenceNode) {
              return true;
          };
          if (x instanceof EntityNode && y instanceof EntityNode) {
              return true;
          };
          if (x instanceof ProcessingInstructionNode && y instanceof ProcessingInstructionNode) {
              return true;
          };
          if (x instanceof CommentNode && y instanceof CommentNode) {
              return true;
          };
          if (x instanceof DocumentNode && y instanceof DocumentNode) {
              return true;
          };
          if (x instanceof DocumentTypeNode && y instanceof DocumentTypeNode) {
              return true;
          };
          if (x instanceof DocumentFragmentNode && y instanceof DocumentFragmentNode) {
              return true;
          };
          if (x instanceof NotationNode && y instanceof NotationNode) {
              return true;
          };
          return false;
      };
  });
  var ordNodeType = new Data_Ord.Ord(function () {
      return eqNodeType;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(fromEnumNodeType(x))(fromEnumNodeType(y));
      };
  });
  var enumNodeType = new Data_Enum.Enum(function () {
      return ordNodeType;
  }, Data_Enum.defaultPred(toEnumNodeType)(fromEnumNodeType), Data_Enum.defaultSucc(toEnumNodeType)(fromEnumNodeType));
  var boundedNodeType = new Data_Bounded.Bounded(function () {
      return ordNodeType;
  }, ElementNode.value, NotationNode.value);
  var boundedEnumNodeType = new Data_Enum.BoundedEnum(function () {
      return boundedNodeType;
  }, function () {
      return enumNodeType;
  }, 12, fromEnumNodeType, toEnumNodeType);
  exports["ElementNode"] = ElementNode;
  exports["AttributeNode"] = AttributeNode;
  exports["TextNode"] = TextNode;
  exports["CDATASectionNode"] = CDATASectionNode;
  exports["EntityReferenceNode"] = EntityReferenceNode;
  exports["EntityNode"] = EntityNode;
  exports["ProcessingInstructionNode"] = ProcessingInstructionNode;
  exports["CommentNode"] = CommentNode;
  exports["DocumentNode"] = DocumentNode;
  exports["DocumentTypeNode"] = DocumentTypeNode;
  exports["DocumentFragmentNode"] = DocumentFragmentNode;
  exports["NotationNode"] = NotationNode;
  exports["eqNodeType"] = eqNodeType;
  exports["ordNodeType"] = ordNodeType;
  exports["boundedNodeType"] = boundedNodeType;
  exports["enumNodeType"] = enumNodeType;
  exports["boundedEnumNodeType"] = boundedEnumNodeType;
})(PS["DOM.Node.NodeType"] = PS["DOM.Node.NodeType"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.Node"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_NodeType = PS["DOM.Node.NodeType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var previousSibling = function ($1) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._previousSibling($1));
  };
  var parentNode = function ($2) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._parentNode($2));
  };
  var parentElement = function ($3) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._parentElement($3));
  };
  var ownerDocument = function ($4) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._ownerDocument($4));
  };
  var nodeType = function (dictPartial) {
      return function ($5) {
          return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(DOM_Node_NodeType.boundedEnumNodeType)($foreign.nodeTypeIndex($5)));
      };
  };
  var nextSibling = function ($6) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._nextSibling($6));
  };
  var lookupPrefix = function (p) {
      return function ($7) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._lookupPrefix(p)($7));
      };
  };
  var lookupNamespaceURI = function (ns) {
      return function ($8) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._lookupNamespaceURI(ns)($8));
      };
  };
  var lastChild = function ($9) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._lastChild($9));
  };
  var firstChild = function ($10) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._firstChild($10));
  };
  exports["firstChild"] = firstChild;
  exports["lastChild"] = lastChild;
  exports["lookupNamespaceURI"] = lookupNamespaceURI;
  exports["lookupPrefix"] = lookupPrefix;
  exports["nextSibling"] = nextSibling;
  exports["nodeType"] = nodeType;
  exports["ownerDocument"] = ownerDocument;
  exports["parentElement"] = parentElement;
  exports["parentNode"] = parentNode;
  exports["previousSibling"] = previousSibling;
  exports["appendChild"] = $foreign.appendChild;
  exports["baseURI"] = $foreign.baseURI;
  exports["childNodes"] = $foreign.childNodes;
  exports["clone"] = $foreign.clone;
  exports["compareDocumentPositionBits"] = $foreign.compareDocumentPositionBits;
  exports["contains"] = $foreign.contains;
  exports["deepClone"] = $foreign.deepClone;
  exports["hasChildNodes"] = $foreign.hasChildNodes;
  exports["insertBefore"] = $foreign.insertBefore;
  exports["isDefaultNamespace"] = $foreign.isDefaultNamespace;
  exports["isEqualNode"] = $foreign.isEqualNode;
  exports["nodeName"] = $foreign.nodeName;
  exports["nodeTypeIndex"] = $foreign.nodeTypeIndex;
  exports["nodeValue"] = $foreign.nodeValue;
  exports["normalize"] = $foreign.normalize;
  exports["removeChild"] = $foreign.removeChild;
  exports["replaceChild"] = $foreign.replaceChild;
  exports["setNodeValue"] = $foreign.setNodeValue;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["textContent"] = $foreign.textContent;
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
    "use strict";

  exports.length = function (list) {
    return function () {
      return list.length;
    };
  };

  exports._item = function (index) {
    return function (list) {
      return function () {
        return list.item(index);
      };
    };
  };
})(PS["DOM.Node.NodeList"] = PS["DOM.Node.NodeList"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.NodeList"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var item = function (i) {
      return function ($0) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._item(i)($0));
      };
  };
  exports["item"] = item;
  exports["length"] = $foreign.length;
})(PS["DOM.Node.NodeList"] = PS["DOM.Node.NodeList"] || {});
(function(exports) {
    "use strict";

  exports._previousElementSibling = function (node) {
    return function () {
      return node.previousElementSibling;
    };
  };

  exports._nextElementSibling = function (node) {
    return function () {
      return node.nextElementSibling;
    };
  };
})(PS["DOM.Node.NonDocumentTypeChildNode"] = PS["DOM.Node.NonDocumentTypeChildNode"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.NonDocumentTypeChildNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var previousElementSibling = function ($0) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._previousElementSibling($0));
  };
  var nextElementSibling = function ($1) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._nextElementSibling($1));
  };
  exports["nextElementSibling"] = nextElementSibling;
  exports["previousElementSibling"] = previousElementSibling;
})(PS["DOM.Node.NonDocumentTypeChildNode"] = PS["DOM.Node.NonDocumentTypeChildNode"] || {});
(function(exports) {
    "use strict";

  exports._getElementById = function (id) {
    return function (node) {
      return function () {
        return node.getElementById(id);
      };
    };
  };
})(PS["DOM.Node.NonElementParentNode"] = PS["DOM.Node.NonElementParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.NonElementParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var getElementById = function (eid) {
      return function ($0) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._getElementById(eid)($0));
      };
  };
  exports["getElementById"] = getElementById;
})(PS["DOM.Node.NonElementParentNode"] = PS["DOM.Node.NonElementParentNode"] || {});
(function(exports) {
    "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };

  exports.children = getEffProp("children");

  exports._firstElementChild = getEffProp("firstElementChild");

  exports._lastElementChild = getEffProp("lastElementChild");

  exports.childElementCount = getEffProp("childElementCount");

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };

  exports.querySelectorAll = function (selector) {
    return function (node) {
      return function () {
        return node.querySelectorAll(selector);
      };
    };
  };
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];        
  var QuerySelector = function (x) {
      return x;
  };
  var querySelector = function (qs) {
      return function ($3) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._querySelector(qs)($3));
      };
  };
  var ordQuerySelector = Data_Ord.ordString;
  var newtypeQuerySelector = new Data_Newtype.Newtype(function (n) {
      return n;
  }, QuerySelector);
  var lastElementChild = function ($4) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._lastElementChild($4));
  };
  var firstElementChild = function ($5) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._firstElementChild($5));
  };
  var eqQuerySelector = Data_Eq.eqString;
  exports["QuerySelector"] = QuerySelector;
  exports["firstElementChild"] = firstElementChild;
  exports["lastElementChild"] = lastElementChild;
  exports["querySelector"] = querySelector;
  exports["eqQuerySelector"] = eqQuerySelector;
  exports["ordQuerySelector"] = ordQuerySelector;
  exports["newtypeQuerySelector"] = newtypeQuerySelector;
  exports["childElementCount"] = $foreign.childElementCount;
  exports["children"] = $foreign.children;
  exports["querySelectorAll"] = $foreign.querySelectorAll;
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
    "use strict";

  exports._key = function (storage) {
    return storage.key;
  };

  exports._oldValue = function (storage) {
    return storage.oldValue;
  };

  exports._newValue = function (storage) {
    return storage.newValue;
  };

  exports.url = function (storage) {
    return storage.url;
  };

  exports._storageArea = function (storage) {
    return storage.storageArea;
  };
})(PS["DOM.WebStorage.Event.StorageEvent"] = PS["DOM.WebStorage.Event.StorageEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var storageEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var readStorageEvent = Data_Foreign.unsafeReadTagged("StorageEvent");
  exports["readStorageEvent"] = readStorageEvent;
  exports["storageEventToEvent"] = storageEventToEvent;
})(PS["DOM.WebStorage.Event.Types"] = PS["DOM.WebStorage.Event.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.WebStorage.Event.StorageEvent"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_WebStorage_Event_Types = PS["DOM.WebStorage.Event.Types"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var storageArea = function ($0) {
      return Data_Nullable.toMaybe($foreign._storageArea($0));
  };
  var oldValue = function ($1) {
      return Data_Nullable.toMaybe($foreign._oldValue($1));
  };
  var newValue = function ($2) {
      return Data_Nullable.toMaybe($foreign._newValue($2));
  };
  var key = function ($3) {
      return Data_Nullable.toMaybe($foreign._key($3));
  };
  exports["key"] = key;
  exports["newValue"] = newValue;
  exports["oldValue"] = oldValue;
  exports["storageArea"] = storageArea;
  exports["url"] = $foreign.url;
})(PS["DOM.WebStorage.Event.StorageEvent"] = PS["DOM.WebStorage.Event.StorageEvent"] || {});
(function(exports) {
    "use strict";

  exports.length = function (storage) {
    return function () {
      return storage.length;
    };
  };

  exports._key = function (index) {
    return function (storage) {
      return function () {
        return storage.key(index);
      };
    };
  };

  exports._getItem = function (key) {
    return function (storage) {
      return function () {
        return storage.getItem(key);
      };
    };
  };

  exports.setItem = function (key) {
    return function (value) {
      return function (storage) {
        return function () {
          storage.setItem(key, value);
        };
      };
    };
  };

  exports.removeItem = function (key) {
    return function (storage) {
      return function () {
        storage.removeItem(key);
      };
    };
  };

  exports.clear = function (storage) {
    return function () {
      storage.clear();
    };
  };
})(PS["DOM.WebStorage.Storage"] = PS["DOM.WebStorage.Storage"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.WebStorage.Storage"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];        
  var key = function (i) {
      return function ($0) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._key(i)($0));
      };
  };
  var getItem = function (s) {
      return function ($1) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._getItem(s)($1));
      };
  };
  exports["getItem"] = getItem;
  exports["key"] = key;
  exports["clear"] = $foreign.clear;
  exports["length"] = $foreign.length;
  exports["removeItem"] = $foreign.removeItem;
  exports["setItem"] = $foreign.setItem;
})(PS["DOM.WebStorage.Storage"] = PS["DOM.WebStorage.Storage"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Blob = (function () {
      function Blob() {

      };
      Blob.value = new Blob();
      return Blob;
  })();
  var $$ArrayBuffer = (function () {
      function $$ArrayBuffer() {

      };
      $$ArrayBuffer.value = new $$ArrayBuffer();
      return $$ArrayBuffer;
  })();
  var toEnumBinaryType = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Blob.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just($$ArrayBuffer.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showBinaryType = new Data_Show.Show(function (v) {
      if (v instanceof Blob) {
          return "Blob";
      };
      if (v instanceof $$ArrayBuffer) {
          return "ArrayBuffer";
      };
      throw new Error("Failed pattern match at DOM.Websocket.BinaryType line 27, column 1 - line 27, column 43: " + [ v.constructor.name ]);
  });
  var printBinaryType = function (v) {
      if (v instanceof Blob) {
          return "blob";
      };
      if (v instanceof $$ArrayBuffer) {
          return "arraybuffer";
      };
      throw new Error("Failed pattern match at DOM.Websocket.BinaryType line 46, column 3 - line 48, column 20: " + [ v.constructor.name ]);
  };
  var fromEnumBinaryType = function (v) {
      if (v instanceof Blob) {
          return 0;
      };
      if (v instanceof $$ArrayBuffer) {
          return 1;
      };
      throw new Error("Failed pattern match at DOM.Websocket.BinaryType line 40, column 3 - line 44, column 1: " + [ v.constructor.name ]);
  };
  var eqBinaryType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Blob && y instanceof Blob) {
              return true;
          };
          if (x instanceof $$ArrayBuffer && y instanceof $$ArrayBuffer) {
              return true;
          };
          return false;
      };
  });
  var ordBinaryType = new Data_Ord.Ord(function () {
      return eqBinaryType;
  }, function (x) {
      return function (y) {
          if (x instanceof Blob && y instanceof Blob) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Blob) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Blob) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof $$ArrayBuffer && y instanceof $$ArrayBuffer) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at DOM.Websocket.BinaryType line 12, column 8 - line 12, column 48: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumBinaryType = new Data_Enum.Enum(function () {
      return ordBinaryType;
  }, Data_Enum.defaultPred(toEnumBinaryType)(fromEnumBinaryType), Data_Enum.defaultSucc(toEnumBinaryType)(fromEnumBinaryType));
  var boundedBinaryType = new Data_Bounded.Bounded(function () {
      return ordBinaryType;
  }, Blob.value, $$ArrayBuffer.value);
  var boundedEnumBinaryType = new Data_Enum.BoundedEnum(function () {
      return boundedBinaryType;
  }, function () {
      return enumBinaryType;
  }, 2, fromEnumBinaryType, toEnumBinaryType);
  exports["Blob"] = Blob;
  exports["ArrayBuffer"] = $$ArrayBuffer;
  exports["fromEnumBinaryType"] = fromEnumBinaryType;
  exports["printBinaryType"] = printBinaryType;
  exports["toEnumBinaryType"] = toEnumBinaryType;
  exports["eqBinaryType"] = eqBinaryType;
  exports["ordBinaryType"] = ordBinaryType;
  exports["boundedBinaryType"] = boundedBinaryType;
  exports["enumBinaryType"] = enumBinaryType;
  exports["boundedEnumBinaryType"] = boundedEnumBinaryType;
  exports["showBinaryType"] = showBinaryType;
})(PS["DOM.Websocket.BinaryType"] = PS["DOM.Websocket.BinaryType"] || {});
(function(exports) {
    "use strict";

  exports.code = function (e) {
    return e.code;
  };

  exports.reason = function (e) {
    return e.reason;
  };

  exports.wasClean = function (e) {
    return e.wasClean;
  };
})(PS["DOM.Websocket.Event.CloseEvent"] = PS["DOM.Websocket.Event.CloseEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var readMessageEvent = Data_Foreign.unsafeReadTagged("MessageEvent");
  var readCloseEvent = Data_Foreign.unsafeReadTagged("CloseEvent");
  var messageEventToEvent = Unsafe_Coerce.unsafeCoerce;
  var closeEventToEvent = Unsafe_Coerce.unsafeCoerce;
  exports["closeEventToEvent"] = closeEventToEvent;
  exports["messageEventToEvent"] = messageEventToEvent;
  exports["readCloseEvent"] = readCloseEvent;
  exports["readMessageEvent"] = readMessageEvent;
})(PS["DOM.Websocket.Event.Types"] = PS["DOM.Websocket.Event.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Websocket.Event.CloseEvent"];
  var DOM_Websocket_Event_Types = PS["DOM.Websocket.Event.Types"];
  exports["code"] = $foreign.code;
  exports["reason"] = $foreign.reason;
  exports["wasClean"] = $foreign.wasClean;
})(PS["DOM.Websocket.Event.CloseEvent"] = PS["DOM.Websocket.Event.CloseEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];        
  var onOpen = "open";
  var onMessage = "message";
  var onError = "error";
  var onClose = "close";
  exports["onClose"] = onClose;
  exports["onError"] = onError;
  exports["onMessage"] = onMessage;
  exports["onOpen"] = onOpen;
})(PS["DOM.Websocket.Event.EventTypes"] = PS["DOM.Websocket.Event.EventTypes"] || {});
(function(exports) {
    "use strict";

  exports.data_ = function (e) {
    return e.data;
  };

  exports.origin = function (e) {
    return e.origin;
  };

  exports.lastEventId = function (e) {
    return e.lastEventId;
  };
})(PS["DOM.Websocket.Event.MessageEvent"] = PS["DOM.Websocket.Event.MessageEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Websocket.Event.MessageEvent"];
  var DOM_Websocket_Event_Types = PS["DOM.Websocket.Event.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  exports["data_"] = $foreign.data_;
  exports["lastEventId"] = $foreign.lastEventId;
  exports["origin"] = $foreign.origin;
})(PS["DOM.Websocket.Event.MessageEvent"] = PS["DOM.Websocket.Event.MessageEvent"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Connecting = (function () {
      function Connecting() {

      };
      Connecting.value = new Connecting();
      return Connecting;
  })();
  var Open = (function () {
      function Open() {

      };
      Open.value = new Open();
      return Open;
  })();
  var Closing = (function () {
      function Closing() {

      };
      Closing.value = new Closing();
      return Closing;
  })();
  var Closed = (function () {
      function Closed() {

      };
      Closed.value = new Closed();
      return Closed;
  })();
  var toEnumReadyState = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Connecting.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Open.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Closing.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Closed.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var showReadyState = new Data_Show.Show(function (v) {
      if (v instanceof Connecting) {
          return "Connecting";
      };
      if (v instanceof Open) {
          return "Open";
      };
      if (v instanceof Closing) {
          return "Closing";
      };
      if (v instanceof Closed) {
          return "Closed";
      };
      throw new Error("Failed pattern match at DOM.Websocket.ReadyState line 29, column 1 - line 29, column 43: " + [ v.constructor.name ]);
  });
  var fromEnumReadyState = function (v) {
      if (v instanceof Connecting) {
          return 0;
      };
      if (v instanceof Open) {
          return 1;
      };
      if (v instanceof Closing) {
          return 2;
      };
      if (v instanceof Closed) {
          return 3;
      };
      throw new Error("Failed pattern match at DOM.Websocket.ReadyState line 46, column 3 - line 50, column 15: " + [ v.constructor.name ]);
  };
  var eqReadyState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Connecting && y instanceof Connecting) {
              return true;
          };
          if (x instanceof Open && y instanceof Open) {
              return true;
          };
          if (x instanceof Closing && y instanceof Closing) {
              return true;
          };
          if (x instanceof Closed && y instanceof Closed) {
              return true;
          };
          return false;
      };
  });
  var ordReadyState = new Data_Ord.Ord(function () {
      return eqReadyState;
  }, function (x) {
      return function (y) {
          if (x instanceof Connecting && y instanceof Connecting) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Connecting) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Connecting) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Open && y instanceof Open) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Open) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Open) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Closing && y instanceof Closing) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Closing) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Closing) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Closed && y instanceof Closed) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at DOM.Websocket.ReadyState line 14, column 8 - line 14, column 48: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumReadyState = new Data_Enum.Enum(function () {
      return ordReadyState;
  }, Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState), Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState));
  var boundedReadyState = new Data_Bounded.Bounded(function () {
      return ordReadyState;
  }, Connecting.value, Closed.value);
  var boundedEnumReadyState = new Data_Enum.BoundedEnum(function () {
      return boundedReadyState;
  }, function () {
      return enumReadyState;
  }, 4, fromEnumReadyState, toEnumReadyState);
  exports["Connecting"] = Connecting;
  exports["Open"] = Open;
  exports["Closing"] = Closing;
  exports["Closed"] = Closed;
  exports["fromEnumReadyState"] = fromEnumReadyState;
  exports["toEnumReadyState"] = toEnumReadyState;
  exports["eqReadyState"] = eqReadyState;
  exports["ordReadyState"] = ordReadyState;
  exports["boundedReadyState"] = boundedReadyState;
  exports["enumReadyState"] = enumReadyState;
  exports["boundedEnumReadyState"] = boundedEnumReadyState;
  exports["showReadyState"] = showReadyState;
})(PS["DOM.Websocket.ReadyState"] = PS["DOM.Websocket.ReadyState"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML_History = PS["DOM.HTML.History"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Protocol = function (x) {
      return x;
  };
  var socketToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var readWebSocket = Data_Foreign.unsafeReadTagged("WebSocket");
  var ordProtocol = Data_Ord.ordString;
  var newtypeProtocol = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Protocol);
  var eqProtocol = Data_Eq.eqString;
  exports["Protocol"] = Protocol;
  exports["readWebSocket"] = readWebSocket;
  exports["socketToEventTarget"] = socketToEventTarget;
  exports["eqProtocol"] = eqProtocol;
  exports["ordProtocol"] = ordProtocol;
  exports["newtypeProtocol"] = newtypeProtocol;
})(PS["DOM.Websocket.Types"] = PS["DOM.Websocket.Types"] || {});
(function(exports) {
    "use strict";

  exports.create = function (url) {
    return function (protocols) {
      return function () {
        return new WebSocket(url, protocols);
      };
    };
  };

  exports.url = function (ws) {
    return function () {
      return ws.url;
    };
  };

  exports.readyStateImpl = function (ws) {
    return function () {
      return ws.readyStateImpl;
    };
  };

  exports.bufferedAmount = function (ws) {
    return function () {
      return ws.bufferedAmount;
    };
  };

  exports.extensions = function (ws) {
    return function () {
      return ws.extensions;
    };
  };

  exports.protocol = function (ws) {
    return function () {
      return ws.protocol;
    };
  };

  exports.close = function (ws) {
    return function () {
      return ws.close();
    };
  };

  exports.getBinaryTypeImpl = function (ws) {
    return function () {
      return ws.binaryType;
    };
  };

  exports.setBinaryTypeImpl = function (ws) {
    return function (bt) {
      return function () {
        ws.binaryType = bt;
      };
    };
  };

  exports.sendImpl = function (ws) {
    return function (value) {
      return function () {
        ws.send(value);
      };
    };
  };
})(PS["DOM.Websocket.WebSocket"] = PS["DOM.Websocket.WebSocket"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.Websocket.WebSocket"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Websocket_BinaryType = PS["DOM.Websocket.BinaryType"];
  var DOM_Websocket_Event_Types = PS["DOM.Websocket.Event.Types"];
  var DOM_Websocket_ReadyState = PS["DOM.Websocket.ReadyState"];
  var DOM_Websocket_Types = PS["DOM.Websocket.Types"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var setBinaryType = function (ws) {
      return function ($9) {
          return $foreign.setBinaryTypeImpl(ws)(DOM_Websocket_BinaryType.printBinaryType($9));
      };
  };
  var sendString = function (ws) {
      return function ($10) {
          return $foreign.sendImpl(ws)(Data_Foreign.toForeign($10));
      };
  };
  var sendBlob = function (ws) {
      return function ($11) {
          return $foreign.sendImpl(ws)(Data_Foreign.toForeign($11));
      };
  };
  var sendArrayBufferView = function (ws) {
      return function ($12) {
          return $foreign.sendImpl(ws)(Data_Foreign.toForeign($12));
      };
  };
  var sendArrayBuffer = function (ws) {
      return function ($13) {
          return $foreign.sendImpl(ws)(Data_Foreign.toForeign($13));
      };
  };
  var readyState = function (ws) {
      return function __do() {
          var v = $foreign.readyStateImpl(ws)();
          return Data_Maybe.fromJust()(DOM_Websocket_ReadyState.toEnumReadyState(v));
      };
  };
  var getBinaryType = function (ws) {
      return Data_Functor.mapFlipped(Control_Monad_Eff.functorEff)($foreign.getBinaryTypeImpl(ws))(function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar4) {
                  return $dollar4;
              };
          };
          return __unused()((function () {
              if (v === "blob") {
                  return DOM_Websocket_BinaryType.Blob.value;
              };
              if (v === "arraybuffer") {
                  return DOM_Websocket_BinaryType["ArrayBuffer"].value;
              };
              throw new Error("Failed pattern match at DOM.Websocket.WebSocket line 61, column 28 - line 63, column 33: " + [ v.constructor.name ]);
          })());
      });
  };
  exports["getBinaryType"] = getBinaryType;
  exports["readyState"] = readyState;
  exports["sendArrayBuffer"] = sendArrayBuffer;
  exports["sendArrayBufferView"] = sendArrayBufferView;
  exports["sendBlob"] = sendBlob;
  exports["sendString"] = sendString;
  exports["setBinaryType"] = setBinaryType;
  exports["bufferedAmount"] = $foreign.bufferedAmount;
  exports["close"] = $foreign.close;
  exports["create"] = $foreign.create;
  exports["extensions"] = $foreign.extensions;
  exports["protocol"] = $foreign.protocol;
  exports["url"] = $foreign.url;
})(PS["DOM.Websocket.WebSocket"] = PS["DOM.Websocket.WebSocket"] || {});
(function(exports) {
  /* global FormData */
  "use strict";

  exports.newFormData = function () {
    return new FormData();
  };

  exports.appendString = function (form) {
    return function (key) {
      return function (val) {
        form.append(key, val);
        return {};
      };
    };
  };

  exports.appendWithName = function (form) {
    return function (key) {
      return function (val) {
        return function (name) {
          form.append(key, val, name);
          return {};
        };
      };
    };
  };
})(PS["DOM.XHR.FormData"] = PS["DOM.XHR.FormData"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.XHR.FormData"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var FormDataString = (function () {
      function FormDataString(value0) {
          this.value0 = value0;
      };
      FormDataString.create = function (value0) {
          return new FormDataString(value0);
      };
      return FormDataString;
  })();
  var FormDataFile = (function () {
      function FormDataFile(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FormDataFile.create = function (value0) {
          return function (value1) {
              return new FormDataFile(value0, value1);
          };
      };
      return FormDataFile;
  })();
  var FormDataBlob = (function () {
      function FormDataBlob(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FormDataBlob.create = function (value0) {
          return function (value1) {
              return new FormDataBlob(value0, value1);
          };
      };
      return FormDataBlob;
  })();
  var toFormData = function (dictFoldable) {
      return function (dat) {
          var appendData = function (form) {
              return function (v) {
                  if (v.value1 instanceof FormDataString) {
                      return $foreign.appendString(form)(v.value0)(v.value1.value0);
                  };
                  if (v.value1 instanceof FormDataFile) {
                      return $foreign.appendWithName(form)(v.value0)(v.value1.value1)(v.value1.value0);
                  };
                  if (v.value1 instanceof FormDataBlob) {
                      return $foreign.appendWithName(form)(v.value0)(v.value1.value1)(v.value1.value0);
                  };
                  throw new Error("Failed pattern match at DOM.XHR.FormData line 23, column 17 - line 23, column 93: " + [ form.constructor.name, v.constructor.name ]);
              };
          };
          var form = $foreign.newFormData(Data_Unit.unit);
          var _unit = Data_Foldable.foldMap(dictFoldable)(Data_Monoid.monoidUnit)(appendData(form))(dat);
          return form;
      };
  };
  exports["FormDataString"] = FormDataString;
  exports["FormDataFile"] = FormDataFile;
  exports["FormDataBlob"] = FormDataBlob;
  exports["toFormData"] = toFormData;
})(PS["DOM.XHR.FormData"] = PS["DOM.XHR.FormData"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];        
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var last = function (dictPartial) {
      return function (xs) {
          return xs[Data_Array.length(xs) - 1 | 0];
      };
  };
  var init = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(0)(Data_Array.length(xs) - 1 | 0)(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Join = function (x) {
      return x;
  };
  var showJoin = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Join " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordJoin = function (dictOrd) {
      return dictOrd;
  };
  var newtypeJoin = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Join);
  var eqJoin = function (dictEq) {
      return dictEq;
  };
  var bifunctorJoin = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.bimap(dictBifunctor)(f)(f)(v);
          };
      });
  };
  var biapplyJoin = function (dictBiapply) {
      return new Control_Apply.Apply(function () {
          return bifunctorJoin(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeJoin = function (dictBiapplicative) {
      return new Control_Applicative.Applicative(function () {
          return biapplyJoin(dictBiapplicative.Biapply0());
      }, function (a) {
          return Control_Biapplicative.bipure(dictBiapplicative)(a)(a);
      });
  };
  exports["Join"] = Join;
  exports["newtypeJoin"] = newtypeJoin;
  exports["eqJoin"] = eqJoin;
  exports["ordJoin"] = ordJoin;
  exports["showJoin"] = showJoin;
  exports["bifunctorJoin"] = bifunctorJoin;
  exports["biapplyJoin"] = biapplyJoin;
  exports["biapplicativeJoin"] = biapplicativeJoin;
})(PS["Data.Bifunctor.Join"] = PS["Data.Bifunctor.Join"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var LocaleName = function (x) {
      return x;
  };
  var Locale = (function () {
      function Locale(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Locale.create = function (value0) {
          return function (value1) {
              return new Locale(value0, value1);
          };
      };
      return Locale;
  })();
  var LocalValue = (function () {
      function LocalValue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LocalValue.create = function (value0) {
          return function (value1) {
              return new LocalValue(value0, value1);
          };
      };
      return LocalValue;
  })();
  var showLocaleName = new Data_Show.Show(function (v) {
      return "(LocaleName " + (Data_Show.show(Data_Show.showString)(v) + ")");
  });
  var showLocale = new Data_Show.Show(function (v) {
      return "(Locale " + (Data_Show.show(Data_Maybe.showMaybe(showLocaleName))(v.value0) + (" " + (Data_Show.show(Data_Time_Duration.showMinutes)(v.value1) + ")")));
  });
  var showLocalValue = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(LocalValue " + (Data_Show.show(showLocale)(v.value0) + (" " + (Data_Show.show(dictShow)(v.value1) + ")")));
      });
  };
  var ordLocaleName = Data_Ord.ordString;
  var newtypeLocaleName = new Data_Newtype.Newtype(function (n) {
      return n;
  }, LocaleName);
  var genericLocaleName = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.DateTime.Locale.LocaleName" && v.value1.length === 1)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(LocaleName))(Data_Generic.fromSpine(Data_Generic.genericString)(v["value1"][0](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.DateTime.Locale.LocaleName", [ {
          sigConstructor: "Data.DateTime.Locale.LocaleName", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.DateTime.Locale.LocaleName", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericString)(v);
      } ]);
  });
  var genericLocale = new Data_Generic.Generic(function (v) {
      if (v instanceof Data_Generic.SProd && (v.value0 === "Data.DateTime.Locale.Locale" && v.value1.length === 2)) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Locale.create))(Data_Generic.fromSpine(Data_Generic.genericMaybe(genericLocaleName))(v["value1"][0](Data_Unit.unit))))(Data_Generic.fromSpine(Data_Time_Duration.genericMinutes)(v["value1"][1](Data_Unit.unit)));
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Data.DateTime.Locale.Locale", [ {
          sigConstructor: "Data.DateTime.Locale.Locale", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericMaybe(genericLocaleName))(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(Data_Time_Duration.genericMinutes)(Data_Generic.anyProxy);
          } ]
      } ]);
  }, function (v) {
      return new Data_Generic.SProd("Data.DateTime.Locale.Locale", [ function ($dollarq) {
          return Data_Generic.toSpine(Data_Generic.genericMaybe(genericLocaleName))(v.value0);
      }, function ($dollarq) {
          return Data_Generic.toSpine(Data_Time_Duration.genericMinutes)(v.value1);
      } ]);
  });
  var genericLocalValue = function (dictGeneric) {
      return new Data_Generic.Generic(function (v) {
          if (v instanceof Data_Generic.SProd && (v.value0 === "Data.DateTime.Locale.LocalValue" && v.value1.length === 2)) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(LocalValue.create))(Data_Generic.fromSpine(genericLocale)(v["value1"][0](Data_Unit.unit))))(Data_Generic.fromSpine(dictGeneric)(v["value1"][1](Data_Unit.unit)));
          };
          return Data_Maybe.Nothing.value;
      }, function ($dollarq) {
          return new Data_Generic.SigProd("Data.DateTime.Locale.LocalValue", [ {
              sigConstructor: "Data.DateTime.Locale.LocalValue", 
              sigValues: [ function ($dollarq1) {
                  return Data_Generic.toSignature(genericLocale)(Data_Generic.anyProxy);
              }, function ($dollarq1) {
                  return Data_Generic.toSignature(dictGeneric)(Data_Generic.anyProxy);
              } ]
          } ]);
      }, function (v) {
          return new Data_Generic.SProd("Data.DateTime.Locale.LocalValue", [ function ($dollarq) {
              return Data_Generic.toSpine(genericLocale)(v.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(dictGeneric)(v.value1);
          } ]);
      });
  };
  var functorLocalValue = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new LocalValue(v.value0, f(v.value1));
      };
  });
  var extendLocalValue = new Control_Extend.Extend(function () {
      return functorLocalValue;
  }, function (f) {
      return function (v) {
          return new LocalValue(v.value0, f(v));
      };
  });
  var eqLocaleName = Data_Eq.eqString;
  var eqLocale = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(eqLocaleName))(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Duration.eqMinutes)(x.value1)(y.value1);
      };
  });
  var ordLocale = new Data_Ord.Ord(function () {
      return eqLocale;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Maybe.ordMaybe(ordLocaleName))(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time_Duration.ordMinutes)(x.value1)(y.value1);
      };
  });
  var eqLocalValue = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              return Data_Eq.eq(eqLocale)(x.value0)(y.value0) && Data_Eq.eq(dictEq)(x.value1)(y.value1);
          };
      });
  };
  var ordLocalValue = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqLocalValue(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              var v = Data_Ord.compare(ordLocale)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(dictOrd)(x.value1)(y.value1);
          };
      });
  };
  var comonadLocalValue = new Control_Comonad.Comonad(function () {
      return extendLocalValue;
  }, function (v) {
      return v.value1;
  });
  exports["LocalValue"] = LocalValue;
  exports["Locale"] = Locale;
  exports["LocaleName"] = LocaleName;
  exports["eqLocale"] = eqLocale;
  exports["ordLocale"] = ordLocale;
  exports["genericLocale"] = genericLocale;
  exports["showLocale"] = showLocale;
  exports["newtypeLocaleName"] = newtypeLocaleName;
  exports["eqLocaleName"] = eqLocaleName;
  exports["ordLocaleName"] = ordLocaleName;
  exports["genericLocaleName"] = genericLocaleName;
  exports["showLocaleName"] = showLocaleName;
  exports["eqLocalValue"] = eqLocalValue;
  exports["ordLocalValue"] = ordLocalValue;
  exports["genericLocalValue"] = genericLocalValue;
  exports["showLocalValue"] = showLocalValue;
  exports["functorLocalValue"] = functorLocalValue;
  exports["extendLocalValue"] = extendLocalValue;
  exports["comonadLocalValue"] = comonadLocalValue;
})(PS["Data.DateTime.Locale"] = PS["Data.DateTime.Locale"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Void = PS["Data.Void"];        
  var in9 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))))))));
  };
  var in8 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))))));
  };
  var in7 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))))));
  };
  var in6 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))));
  };
  var in5 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))));
  };
  var in4 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))));
  };
  var in3 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)));
  };
  var in2 = function (v) {
      return new Data_Either.Right(new Data_Either.Left(v));
  };
  var in10 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))))))));
  };
  var in1 = Data_Either.Left.create;
  var either9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (y) {
                                          if (y instanceof Data_Either.Left) {
                                              return a(y.value0);
                                          };
                                          if (y instanceof Data_Either.Right) {
                                              if (y.value0 instanceof Data_Either.Left) {
                                                  return b(y.value0.value0);
                                              };
                                              if (y.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                                      return c(y.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return d(y.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return e(y.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return f(y.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Either.Nested line 245, column 29 - line 247, column 40: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Either.Nested line 243, column 27 - line 247, column 40: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 241, column 25 - line 247, column 40: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested line 239, column 23 - line 247, column 40: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 237, column 21 - line 247, column 40: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 235, column 19 - line 247, column 40: " + [ y.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 233, column 17 - line 247, column 40: " + [ y.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 231, column 15 - line 247, column 40: " + [ y.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 229, column 31 - line 247, column 40: " + [ y.constructor.name ]);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (y) {
                                      if (y instanceof Data_Either.Left) {
                                          return a(y.value0);
                                      };
                                      if (y instanceof Data_Either.Right) {
                                          if (y.value0 instanceof Data_Either.Left) {
                                              return b(y.value0.value0);
                                          };
                                          if (y.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0 instanceof Data_Either.Left) {
                                                  return c(y.value0.value0.value0);
                                              };
                                              if (y.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return d(y.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return e(y.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return f(y.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 224, column 27 - line 226, column 38: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested line 222, column 25 - line 226, column 38: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 220, column 23 - line 226, column 38: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 218, column 21 - line 226, column 38: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 216, column 19 - line 226, column 38: " + [ y.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 214, column 17 - line 226, column 38: " + [ y.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 212, column 15 - line 226, column 38: " + [ y.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 210, column 29 - line 226, column 38: " + [ y.constructor.name ]);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (y) {
                                  if (y instanceof Data_Either.Left) {
                                      return a(y.value0);
                                  };
                                  if (y instanceof Data_Either.Right) {
                                      if (y.value0 instanceof Data_Either.Left) {
                                          return b(y.value0.value0);
                                      };
                                      if (y.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0 instanceof Data_Either.Left) {
                                              return c(y.value0.value0.value0);
                                          };
                                          if (y.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return d(y.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return e(y.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return f(y.value0.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 205, column 25 - line 207, column 36: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 203, column 23 - line 207, column 36: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 201, column 21 - line 207, column 36: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 199, column 19 - line 207, column 36: " + [ y.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 197, column 17 - line 207, column 36: " + [ y.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 195, column 15 - line 207, column 36: " + [ y.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 193, column 27 - line 207, column 36: " + [ y.constructor.name ]);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (y) {
                              if (y instanceof Data_Either.Left) {
                                  return a(y.value0);
                              };
                              if (y instanceof Data_Either.Right) {
                                  if (y.value0 instanceof Data_Either.Left) {
                                      return b(y.value0.value0);
                                  };
                                  if (y.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                          return c(y.value0.value0.value0);
                                      };
                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                              return d(y.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return e(y.value0.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 188, column 23 - line 190, column 34: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 186, column 21 - line 190, column 34: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 184, column 19 - line 190, column 34: " + [ y.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 182, column 17 - line 190, column 34: " + [ y.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 180, column 15 - line 190, column 34: " + [ y.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested line 178, column 25 - line 190, column 34: " + [ y.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var either5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (y) {
                          if (y instanceof Data_Either.Left) {
                              return a(y.value0);
                          };
                          if (y instanceof Data_Either.Right) {
                              if (y.value0 instanceof Data_Either.Left) {
                                  return b(y.value0.value0);
                              };
                              if (y.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                      return c(y.value0.value0.value0);
                                  };
                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                          return d(y.value0.value0.value0.value0);
                                      };
                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                              return e(y.value0.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 173, column 21 - line 175, column 32: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 171, column 19 - line 175, column 32: " + [ y.value0.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 169, column 17 - line 175, column 32: " + [ y.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested line 167, column 15 - line 175, column 32: " + [ y.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested line 165, column 23 - line 175, column 32: " + [ y.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var either4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (y) {
                      if (y instanceof Data_Either.Left) {
                          return a(y.value0);
                      };
                      if (y instanceof Data_Either.Right) {
                          if (y.value0 instanceof Data_Either.Left) {
                              return b(y.value0.value0);
                          };
                          if (y.value0 instanceof Data_Either.Right) {
                              if (y.value0.value0 instanceof Data_Either.Left) {
                                  return c(y.value0.value0.value0);
                              };
                              if (y.value0.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                      return d(y.value0.value0.value0.value0);
                                  };
                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                      return Data_Void.absurd(y.value0.value0.value0.value0);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 160, column 19 - line 162, column 30: " + [ y.value0.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested line 158, column 17 - line 162, column 30: " + [ y.value0.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested line 156, column 15 - line 162, column 30: " + [ y.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Either.Nested line 154, column 21 - line 162, column 30: " + [ y.constructor.name ]);
                  };
              };
          };
      };
  };
  var either3 = function (a) {
      return function (b) {
          return function (c) {
              return function (y) {
                  if (y instanceof Data_Either.Left) {
                      return a(y.value0);
                  };
                  if (y instanceof Data_Either.Right) {
                      if (y.value0 instanceof Data_Either.Left) {
                          return b(y.value0.value0);
                      };
                      if (y.value0 instanceof Data_Either.Right) {
                          if (y.value0.value0 instanceof Data_Either.Left) {
                              return c(y.value0.value0.value0);
                          };
                          if (y.value0.value0 instanceof Data_Either.Right) {
                              return Data_Void.absurd(y.value0.value0.value0);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested line 149, column 17 - line 151, column 28: " + [ y.value0.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Either.Nested line 147, column 15 - line 151, column 28: " + [ y.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Either.Nested line 145, column 19 - line 151, column 28: " + [ y.constructor.name ]);
              };
          };
      };
  };
  var either2 = function (a) {
      return function (b) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return a(y.value0);
              };
              if (y instanceof Data_Either.Right) {
                  if (y.value0 instanceof Data_Either.Left) {
                      return b(y.value0.value0);
                  };
                  if (y.value0 instanceof Data_Either.Right) {
                      return Data_Void.absurd(y.value0.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either.Nested line 140, column 15 - line 142, column 26: " + [ y.value0.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Either.Nested line 138, column 17 - line 142, column 26: " + [ y.constructor.name ]);
          };
      };
  };
  var either10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return function (y) {
                                              if (y instanceof Data_Either.Left) {
                                                  return a(y.value0);
                                              };
                                              if (y instanceof Data_Either.Right) {
                                                  if (y.value0 instanceof Data_Either.Left) {
                                                      return b(y.value0.value0);
                                                  };
                                                  if (y.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                                          return c(y.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return d(y.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return e(y.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                  return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                              };
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                      return j(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                                  };
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                                  };
                                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 268, column 31 - line 270, column 41: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                              };
                                                                              throw new Error("Failed pattern match at Data.Either.Nested line 266, column 29 - line 270, column 41: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Either.Nested line 264, column 27 - line 270, column 41: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Either.Nested line 262, column 25 - line 270, column 41: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 260, column 23 - line 270, column 41: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested line 258, column 21 - line 270, column 41: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 256, column 19 - line 270, column 41: " + [ y.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 254, column 17 - line 270, column 41: " + [ y.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 252, column 15 - line 270, column 41: " + [ y.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 250, column 34 - line 270, column 41: " + [ y.constructor.name ]);
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either1 = function (y) {
      if (y instanceof Data_Either.Left) {
          return y.value0;
      };
      if (y instanceof Data_Either.Right) {
          return Data_Void.absurd(y.value0);
      };
      throw new Error("Failed pattern match at Data.Either.Nested line 133, column 13 - line 135, column 24: " + [ y.constructor.name ]);
  };
  var at9 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at8 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at7 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at6 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))) {
                  return f(y.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at5 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0 instanceof Data_Either.Left)))) {
                  return f(y.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at4 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0 instanceof Data_Either.Left))) {
                  return f(y.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at3 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && y.value0.value0 instanceof Data_Either.Left)) {
                  return f(y.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at2 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && y.value0 instanceof Data_Either.Left) {
                  return f(y.value0.value0);
              };
              return b;
          };
      };
  };
  var at10 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at1 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return f(y.value0);
              };
              return b;
          };
      };
  };
  exports["at1"] = at1;
  exports["at10"] = at10;
  exports["at2"] = at2;
  exports["at3"] = at3;
  exports["at4"] = at4;
  exports["at5"] = at5;
  exports["at6"] = at6;
  exports["at7"] = at7;
  exports["at8"] = at8;
  exports["at9"] = at9;
  exports["either1"] = either1;
  exports["either10"] = either10;
  exports["either2"] = either2;
  exports["either3"] = either3;
  exports["either4"] = either4;
  exports["either5"] = either5;
  exports["either6"] = either6;
  exports["either7"] = either7;
  exports["either8"] = either8;
  exports["either9"] = either9;
  exports["in1"] = in1;
  exports["in10"] = in10;
  exports["in2"] = in2;
  exports["in3"] = in3;
  exports["in4"] = in4;
  exports["in5"] = in5;
  exports["in6"] = in6;
  exports["in7"] = in7;
  exports["in8"] = in8;
  exports["in9"] = in9;
})(PS["Data.Either.Nested"] = PS["Data.Either.Nested"] || {});
(function(exports) {
    "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Prelude = PS["Prelude"];        
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var Indexable = function (ix) {
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Data_Foreign.fail(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp;
  var readIndex = unsafeReadProp;
  var ix = function (dict) {
      return dict.ix;
  };
  var index = function (dict) {
      return dict.index;
  };
  var indexableExceptT = new Indexable(function (dictIndex) {
      return function (f) {
          return function (i) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Function.flip(index(dictIndex))(i))(f);
          };
      };
  });
  var indexableForeign = new Indexable(function (dictIndex) {
      return index(dictIndex);
  });
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };
  var indexInt = new Index(Data_Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readIndex));
  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["Indexable"] = Indexable;
  exports["errorAt"] = errorAt;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["hasProperty"] = hasProperty;
  exports["index"] = index;
  exports["ix"] = ix;
  exports["readIndex"] = readIndex;
  exports["readProp"] = readProp;
  exports["indexString"] = indexString;
  exports["indexInt"] = indexInt;
  exports["indexableForeign"] = indexableForeign;
  exports["indexableExceptT"] = indexableExceptT;
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
    "use strict";

  exports.unsafeKeys = Object.keys || function (value) {
    var keys = [];
    for (var prop in value) {
      if (Object.prototype.hasOwnProperty.call(value, prop)) {
        keys.push(prop);
      }
    }
    return keys;
  };
})(PS["Data.Foreign.Keys"] = PS["Data.Foreign.Keys"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foreign.Keys"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Prelude = PS["Prelude"];        
  var keys = function (value) {
      if (Data_Foreign.isNull(value)) {
          return Data_Foreign.fail(new Data_Foreign.TypeMismatch("object", "null"));
      };
      if (Data_Foreign.isUndefined(value)) {
          return Data_Foreign.fail(new Data_Foreign.TypeMismatch("object", "undefined"));
      };
      if (Data_Foreign.typeOf(value) === "object") {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeKeys(value));
      };
      if (Data_Boolean.otherwise) {
          return Data_Foreign.fail(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value)));
      };
      throw new Error("Failed pattern match at Data.Foreign.Keys line 15, column 1 - line 15, column 36: " + [ value.constructor.name ]);
  };
  exports["keys"] = keys;
})(PS["Data.Foreign.Keys"] = PS["Data.Foreign.Keys"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));
  var newtypeNonEmptyList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, NonEmptyList);
  var newtypeList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, List);
  var step = function ($165) {
      return Data_Lazy.force(Data_Newtype.unwrap(newtypeList)($165));
  };
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return step(ys);
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 96, column 5 - line 96, column 21: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return "Nil";
              };
              if (v instanceof Cons) {
                  return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (go(step(v.value1)) + ")")));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 62, column 5 - line 63, column 5: " + [ v.constructor.name ]);
          };
          return "fromStrict (" + (go(step(xs)) + ")");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_Lazy.showLazy(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow))))(v) + ")");
      });
  };
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, nil);
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($166) {
          return step(f($166));
      }));
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 105, column 5 - line 105, column 17: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
      };
  });
  var functorNonEmptyList = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(Data_NonEmpty.functorNonEmpty(functorList))(f))(v);
      };
  });
  var eq1List = new Data_Eq.Eq1(function (dictEq) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              $tco_done = true;
                              return true;
                          };
                          if (v instanceof Cons && (v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                              $tco_var_v = step(v.value1);
                              $copy_v1 = step(v1.value1);
                              return;
                          };
                          $tco_done = true;
                          return false;
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(step(xs))(step(ys));
          };
      };
  });
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
  };
  var eqNonEmptyList = function (dictEq) {
      return Data_Lazy.eqLazy(Data_NonEmpty.eqNonEmpty(eq1List)(dictEq));
  };
  var ord1List = new Data_Ord.Ord1(function () {
      return eq1List;
  }, function (dictOrd) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.EQ.value;
                          };
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_var_v = step(v.value1);
                                  $copy_v1 = step(v1.value1);
                                  return;
                              };
                              $tco_done = true;
                              return v2;
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy.Types line 82, column 5 - line 82, column 20: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(step(xs))(step(ys));
          };
      };
  });
  var ordList = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqList(dictOrd.Eq0());
      }, Data_Ord.compare1(ord1List)(dictOrd));
  };
  var ordNonEmptyList = function (dictOrd) {
      return Data_Lazy.ordLazy(Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd));
  };
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (b) {
              return function (a) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (op) {
      var go = function ($copy_b) {
          return function ($copy_xs) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, xs) {
                  var v = step(xs);
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = op(b)(v.value0);
                      $copy_xs = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types line 117, column 7 - line 119, column 40: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_xs);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (op) {
      return function (z) {
          return function (xs) {
              var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
          };
      };
  });
  var extendList = new Control_Extend.Extend(function () {
      return functorList;
  }, function (f) {
      return function (l) {
          var go = function (a) {
              return function (v) {
                  var acc$prime = cons(a)(v.acc);
                  return {
                      val: cons(f(acc$prime))(v.val), 
                      acc: acc$prime
                  };
              };
          };
          var v = step(l);
          if (v instanceof Nil) {
              return nil;
          };
          if (v instanceof Cons) {
              return cons(f(l))((Data_Foldable.foldr(foldableList)(go)({
                  val: nil, 
                  acc: nil
              })(v.value1)).val);
          };
          throw new Error("Failed pattern match at Data.List.Lazy.Types line 163, column 5 - line 166, column 55: " + [ v.constructor.name ]);
      };
  });
  var extendNonEmptyList = new Control_Extend.Extend(function () {
      return functorNonEmptyList;
  }, function (f) {
      return function (v) {
          var go = function (a) {
              return function (v1) {
                  return {
                      val: cons(f(Data_Lazy.defer(function (v2) {
                          return new Data_NonEmpty.NonEmpty(a, v1.acc);
                      })))(v1.val), 
                      acc: cons(a)(v1.acc)
                  };
              };
          };
          var v1 = Data_Lazy.force(v);
          return NonEmptyList(Data_Lazy.defer(function (v2) {
              return new Data_NonEmpty.NonEmpty(f(v), (Data_Foldable.foldr(foldableList)(go)({
                  val: nil, 
                  acc: nil
              })(v1.value1)).val);
          }));
      };
  });
  var foldableNonEmptyList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldMap(Data_NonEmpty.foldableNonEmpty(foldableList))(dictMonoid)(f)(Data_Lazy.force(v));
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldl(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldr(Data_NonEmpty.foldableNonEmpty(foldableList))(f)(b)(Data_Lazy.force(v));
          };
      };
  });
  var toList = function (v) {
      return Control_Lazy.defer(lazyList)(function (v1) {
          var v2 = Data_Lazy.force(v);
          return cons(v2.value0)(v2.value1);
      });
  };
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          var v1 = Data_Lazy.force(v);
          return Data_Lazy.defer(function (v2) {
              return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(toList(as$prime)));
          });
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return Data_Foldable.foldr(foldableList)(function (a) {
              return function (b) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(a)))(b);
              };
          })(Control_Applicative.pure(dictApplicative)(nil));
      };
  });
  var traversableNonEmptyList = new Data_Traversable.Traversable(function () {
      return foldableNonEmptyList;
  }, function () {
      return functorNonEmptyList;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
              return NonEmptyList(Data_Lazy.defer(function (v1) {
                  return xxs;
              }));
          })(Data_Traversable.sequence(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(Data_Lazy.force(v)));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (xxs) {
                  return NonEmptyList(Data_Lazy.defer(function (v1) {
                      return xxs;
                  }));
              })(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(traversableList))(dictApplicative)(f)(Data_Lazy.force(v)));
          };
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable((function () {
      var go = function (f) {
          return function (b) {
              return Control_Lazy.defer(lazyList)(function (v) {
                  var v1 = f(b);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return nil;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types line 125, column 28 - line 127, column 39: " + [ v1.constructor.name ]);
              });
          };
      };
      return go;
  })());
  var comonadNonEmptyList = new Control_Comonad.Comonad(function () {
      return extendNonEmptyList;
  }, function (v) {
      return Data_NonEmpty.head(Data_Lazy.force(v));
  });
  var monadList = new Control_Monad.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (xs) {
      return function (f) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 144, column 5 - line 144, column 17: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, Control_Monad.ap(monadList));
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return cons(a)(nil);
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          var v2 = Data_Lazy.force(v1);
          var v3 = Data_Lazy.force(v);
          return Data_Lazy.defer(function (v4) {
              return new Data_NonEmpty.NonEmpty(v3.value0(v2.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v3.value1)(cons(v2.value0)(nil)))(Control_Apply.apply(applyList)(cons(v3.value0)(v3.value1))(v2.value1)));
          });
      };
  });
  var bindNonEmptyList = new Control_Bind.Bind(function () {
      return applyNonEmptyList;
  }, function (v) {
      return function (f) {
          var v1 = Data_Lazy.force(v);
          var v2 = Data_Lazy.force(Data_Newtype.unwrap(newtypeNonEmptyList)(f(v1.value0)));
          return Data_Lazy.defer(function (v3) {
              return new Data_NonEmpty.NonEmpty(v2.value0, Data_Semigroup.append(semigroupList)(v2.value1)(Control_Bind.bind(bindList)(v1.value1)(function ($167) {
                  return toList(f($167));
              })));
          });
      };
  });
  var altNonEmptyList = new Control_Alt.Alt(function () {
      return functorNonEmptyList;
  }, Data_Semigroup.append(semigroupNonEmptyList));
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, nil);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return applicativeList;
  }, function () {
      return plusList;
  });
  var monadZeroList = new Control_MonadZero.MonadZero(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return monadZeroList;
  });
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function (a) {
      return Data_Lazy.defer(function (v) {
          return Data_NonEmpty.singleton(plusList)(a);
      });
  });
  var monadNonEmptyList = new Control_Monad.Monad(function () {
      return applicativeNonEmptyList;
  }, function () {
      return bindNonEmptyList;
  });
  exports["List"] = List;
  exports["NonEmptyList"] = NonEmptyList;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["cons"] = cons;
  exports["nil"] = nil;
  exports["step"] = step;
  exports["toList"] = toList;
  exports["newtypeList"] = newtypeList;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["eq1List"] = eq1List;
  exports["ordList"] = ordList;
  exports["ord1List"] = ord1List;
  exports["lazyList"] = lazyList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadZeroList"] = monadZeroList;
  exports["monadPlusList"] = monadPlusList;
  exports["extendList"] = extendList;
  exports["newtypeNonEmptyList"] = newtypeNonEmptyList;
  exports["eqNonEmptyList"] = eqNonEmptyList;
  exports["ordNonEmptyList"] = ordNonEmptyList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["bindNonEmptyList"] = bindNonEmptyList;
  exports["monadNonEmptyList"] = monadNonEmptyList;
  exports["altNonEmptyList"] = altNonEmptyList;
  exports["extendNonEmptyList"] = extendNonEmptyList;
  exports["comonadNonEmptyList"] = comonadNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
  exports["traversableNonEmptyList"] = traversableNonEmptyList;
})(PS["Data.List.Lazy.Types"] = PS["Data.List.Lazy.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      if (v instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 633, column 3 - line 633, column 35: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs)))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(ys));
          };
      };
  };
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_List_Lazy_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var updateAt = function (n) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(x, v1.value1);
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(v1.value0, updateAt(v - 1 | 0)(x)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 346, column 3 - line 346, column 17: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
          };
      };
  };
  var unzip = Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(Data_List_Lazy_Types.cons(v.value0)(v1.value0), Data_List_Lazy_Types.cons(v.value1)(v1.value1));
      };
  })(new Data_Tuple.Tuple(Data_List_Lazy_Types.nil, Data_List_Lazy_Types.nil));
  var uncons = function (xs) {
      var v = Data_List_Lazy_Types.step(xs);
      if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 264, column 13 - line 266, column 44: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var takeWhile = function (p) {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
              return new Data_List_Lazy_Types.Cons(v.value0, takeWhile(p)(v.value1));
          };
          return Data_List_Lazy_Types.Nil.value;
      };
      return function ($195) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($195)));
      };
  };
  var take = function (n) {
      var go = function (v) {
          return function (v1) {
              if (v <= 0) {
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Lazy_Types.Nil) {
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Lazy_Types.Cons) {
                  return new Data_List_Lazy_Types.Cons(v1.value0, take(v - 1 | 0)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 466, column 3 - line 466, column 32: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      return function ($196) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($196)));
      };
  };
  var tail = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      })(uncons(xs));
  };
  var span = function (p) {
      return function (xs) {
          var v = uncons(xs);
          if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
              var v1 = span(p)(v.value0.tail);
              return {
                  init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init), 
                  rest: v1.rest
              };
          };
          return {
              init: Data_List_Lazy_Types.nil, 
              rest: xs
          };
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Foldable.foldr(Data_List_Lazy_Types.foldableList)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.cons(x)(Data_List_Lazy_Types.nil))(xs);
      };
  };
  var singleton = function (a) {
      return Data_List_Lazy_Types.cons(a)(Data_List_Lazy_Types.nil);
  };
  var reverse = function (xs) {
      return Control_Lazy.defer(Data_List_Lazy_Types.lazyList)(function (v) {
          return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(Data_List_Lazy_Types.cons))(Data_List_Lazy_Types.nil)(xs);
      });
  };
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
              };
              if (Data_Boolean.otherwise) {
                  return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                      return Control_Bind.bind(dictMonad.Bind1())(replicateM(dictMonad)(n - 1 | 0)(m))(function (v1) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.cons(v)(v1));
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 155, column 1 - line 155, column 62: " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  var repeat = function (x) {
      return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
          return Data_List_Lazy_Types.cons(x)(xs);
      });
  };
  var replicate = function (i) {
      return function (xs) {
          return take(i)(repeat(xs));
      };
  };
  var range = function (start) {
      return function (end) {
          if (start > end) {
              var g = function (x) {
                  if (x >= end) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1 | 0));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 142, column 13 - line 143, column 38: " + [ x.constructor.name ]);
              };
              return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(g)(start);
          };
          if (Data_Boolean.otherwise) {
              var f = function (x) {
                  if (x <= end) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 147, column 5 - line 148, column 30: " + [ x.constructor.name ]);
              };
              return Data_Unfoldable.unfoldr(Data_List_Lazy_Types.unfoldableList)(f)(start);
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 139, column 1 - line 139, column 32: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $$null = function ($197) {
      return Data_Maybe.isNothing(uncons($197));
  };
  var mapMaybe = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  var v1 = f(v.value0);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v1.value0, mapMaybe(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 439, column 5 - line 441, column 39: " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 437, column 3 - line 437, column 15: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($198) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($198)));
      };
  };
  var length = Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(function (l) {
      return function (v) {
          return l + 1 | 0;
      };
  })(0);
  var last = (function () {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if ($$null(v.value1)) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($199) {
          return go(Data_List_Lazy_Types.step($199));
      };
  })();
  var iterate = function (f) {
      return function (x) {
          return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
              return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
          });
      };
  };
  var insertAt = function (v) {
      return function (x) {
          return function (xs) {
              if (v === 0) {
                  return Data_List_Lazy_Types.cons(x)(xs);
              };
              var go = function (v1) {
                  if (v1 instanceof Data_List_Lazy_Types.Nil) {
                      return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Cons) {
                      return new Data_List_Lazy_Types.Cons(v1.value0, insertAt(v - 1 | 0)(x)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 319, column 3 - line 319, column 22: " + [ v1.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
          };
      };
  };
  var init = (function () {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Cons) {
              if ($$null(v.value1)) {
                  return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
              };
          };
          return Data_Maybe.Nothing.value;
      };
      return function ($200) {
          return go(Data_List_Lazy_Types.step($200));
      };
  })();
  var index = function (xs) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons && v1 === 0) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      $tco_var_v = Data_List_Lazy_Types.step(v.value1);
                      $copy_v1 = v1 - 1 | 0;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 278, column 3 - line 278, column 21: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Lazy_Types.step(xs));
  };
  var head = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.head;
      })(uncons(xs));
  };
  var transpose = function (xs) {
      var v = uncons(xs);
      if (v instanceof Data_Maybe.Nothing) {
          return xs;
      };
      if (v instanceof Data_Maybe.Just) {
          var v1 = uncons(v.value0.head);
          if (v1 instanceof Data_Maybe.Nothing) {
              return transpose(v.value0.tail);
          };
          if (v1 instanceof Data_Maybe.Just) {
              return Data_List_Lazy_Types.cons(Data_List_Lazy_Types.cons(v1.value0.head)(mapMaybe(head)(v.value0.tail)))(transpose(Data_List_Lazy_Types.cons(v1.value0.tail)(mapMaybe(tail)(v.value0.tail))));
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 674, column 7 - line 678, column 72: " + [ v1.constructor.name ]);
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 670, column 3 - line 678, column 72: " + [ v.constructor.name ]);
  };
  var groupBy = function (eq) {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Nil) {
              return Data_List_Lazy_Types.Nil.value;
          };
          if (v instanceof Data_List_Lazy_Types.Cons) {
              var v1 = span(eq(v.value0))(v.value1);
              return new Data_List_Lazy_Types.Cons(Data_Lazy.defer(function (v2) {
                  return new Data_NonEmpty.NonEmpty(v.value0, v1.init);
              }), groupBy(eq)(v1.rest));
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 538, column 3 - line 538, column 15: " + [ v.constructor.name ]);
      };
      return function ($201) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($201)));
      };
  };
  var group = function (dictEq) {
      return groupBy(Data_Eq.eq(dictEq));
  };
  var fromStep = function ($202) {
      return Data_List_Lazy_Types.List(Control_Applicative.pure(Data_Lazy.applicativeLazy)($202));
  };
  var insertBy = function (cmp) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      return new Data_List_Lazy_Types.Cons(x, Data_List_Lazy_Types.nil);
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      var v1 = cmp(x)(v.value0);
                      if (v1 instanceof Data_Ordering.GT) {
                          return new Data_List_Lazy_Types.Cons(v.value0, insertBy(cmp)(x)(v.value1));
                      };
                      return new Data_List_Lazy_Types.Cons(x, fromStep(v));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 214, column 3 - line 214, column 22: " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return function (xs) {
                  var v = uncons(xs);
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(a);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(a)(v.value0.head))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(v.value0.tail);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 687, column 5 - line 690, column 52: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function (n) {
          return function (list) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function (v) {
                  var $157 = fn(v.head);
                  if ($157) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
                  };
                  return go(n + 1 | 0)(v.tail);
              });
          };
      };
      return go(0);
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
              return (length(xs) - 1 | 0) - v | 0;
          })(findIndex(fn)(reverse(xs)));
      };
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return function (list) {
              var v = uncons(list);
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Lazy_Types.nil);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(dictMonad.Bind1())(p(v.value0.head))(function (v1) {
                      return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(p)(v.value0.tail))(function (v2) {
                          return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                              if (v1) {
                                  return Data_List_Lazy_Types.cons(v.value0.head)(v2);
                              };
                              return v2;
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 422, column 5 - line 427, column 48: " + [ v.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if (p(v.value0)) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 407, column 3 - line 407, column 15: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($203) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($203)));
      };
  };
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return filter(function (x) {
                  return Data_Foldable.any(Data_List_Lazy_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(eq(x))(ys);
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var nubBy = function (eq) {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Nil) {
              return Data_List_Lazy_Types.Nil.value;
          };
          if (v instanceof Data_List_Lazy_Types.Cons) {
              return new Data_List_Lazy_Types.Cons(v.value0, nubBy(eq)(filter(function (y) {
                  return !eq(v.value0)(y);
              })(v.value1)));
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 561, column 3 - line 561, column 15: " + [ v.constructor.name ]);
      };
      return function ($204) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($204)));
      };
  };
  var nub = function (dictEq) {
      return nubBy(Data_Eq.eq(dictEq));
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Cons && p(v.value0)) {
                  $copy_v = Data_List_Lazy_Types.step(v.value1);
                  return;
              };
              $tco_done = true;
              return fromStep(v);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($205) {
          return go(Data_List_Lazy_Types.step($205));
      };
  };
  var drop = function (n) {
      var go = function ($copy_v) {
          return function ($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                  if (v === 0) {
                      $tco_done = true;
                      return v1;
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Nil) {
                      $tco_done = true;
                      return Data_List_Lazy_Types.Nil.value;
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Cons) {
                      $tco_var_v = v - 1 | 0;
                      $copy_v1 = Data_List_Lazy_Types.step(v1.value1);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 486, column 3 - line 486, column 15: " + [ v.constructor.name, v1.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
              };
              return $tco_result;
          };
      };
      return function ($206) {
          return Data_List_Lazy_Types.List(Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)($206)));
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start | 0)(drop(start)(xs));
          };
      };
  };
  var deleteBy = function (eq) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Data_List_Lazy_Types.Nil) {
                      return Data_List_Lazy_Types.Nil.value;
                  };
                  if (v instanceof Data_List_Lazy_Types.Cons) {
                      if (eq(x)(v.value0)) {
                          return Data_List_Lazy_Types.step(v.value1);
                      };
                      if (Data_Boolean.otherwise) {
                          return new Data_List_Lazy_Types.Cons(v.value0, deleteBy(eq)(x)(v.value1));
                      };
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 590, column 3 - line 590, column 15: " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var deleteAt = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_List_Lazy_Types.Nil) {
                      return Data_List_Lazy_Types.Nil.value;
                  };
                  if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                      return Data_List_Lazy_Types.step(v1.value1);
                  };
                  if (v1 instanceof Data_List_Lazy_Types.Cons) {
                      return new Data_List_Lazy_Types.Cons(v1.value0, deleteAt(v - 1 | 0)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 332, column 3 - line 332, column 17: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(Data_List_Lazy_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var cycle = function (xs) {
      return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (ys) {
          return Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(xs)(ys);
      });
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindList));
  var concat = function (v) {
      return Control_Bind.bind(Data_List_Lazy_Types.bindList)(v)(Control_Category.id(Control_Category.categoryFn));
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  var alterAt = function (n) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v === 0 && v1 instanceof Data_List_Lazy_Types.Cons) {
                          var v2 = f(v1.value0);
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Data_List_Lazy_Types.step(v1.value1);
                          };
                          if (v2 instanceof Data_Maybe.Just) {
                              return new Data_List_Lazy_Types.Cons(v2.value0, v1.value1);
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy line 373, column 22 - line 375, column 26: " + [ v2.constructor.name ]);
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(v1.value0, alterAt(v - 1 | 0)(f)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 372, column 3 - line 372, column 17: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs));
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($207) {
              return Data_Maybe.Just.create(f($207));
          });
      };
  };
  exports["alterAt"] = alterAt;
  exports["catMaybes"] = catMaybes;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["cycle"] = cycle;
  exports["delete"] = $$delete;
  exports["deleteAt"] = deleteAt;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["filter"] = filter;
  exports["filterM"] = filterM;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["foldM"] = foldM;
  exports["fromFoldable"] = fromFoldable;
  exports["group"] = group;
  exports["groupBy"] = groupBy;
  exports["head"] = head;
  exports["index"] = index;
  exports["init"] = init;
  exports["insert"] = insert;
  exports["insertAt"] = insertAt;
  exports["insertBy"] = insertBy;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["iterate"] = iterate;
  exports["last"] = last;
  exports["length"] = length;
  exports["mapMaybe"] = mapMaybe;
  exports["modifyAt"] = modifyAt;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["null"] = $$null;
  exports["range"] = range;
  exports["repeat"] = repeat;
  exports["replicate"] = replicate;
  exports["replicateM"] = replicateM;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
  exports["slice"] = slice;
  exports["snoc"] = snoc;
  exports["span"] = span;
  exports["tail"] = tail;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["toUnfoldable"] = toUnfoldable;
  exports["transpose"] = transpose;
  exports["uncons"] = uncons;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["unzip"] = unzip;
  exports["updateAt"] = updateAt;
  exports["zip"] = zip;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var uncons = function (v) {
      var v1 = Data_Lazy.force(v);
      return {
          head: v1.value0, 
          tail: v1.value1
      };
  };
  var toList = function (v) {
      var v1 = Data_Lazy.force(v);
      return Data_List_Lazy_Types.cons(v1.value0)(v1.value1);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($52) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
                  return new Data_Tuple.Tuple(rec.head, rec.tail);
              })(Data_List_Lazy.uncons(xs));
          })(toList($52));
      };
  };
  var tail = function (v) {
      var v1 = Data_Lazy.force(v);
      return v1.value1;
  };
  var singleton = Control_Applicative.pure(Data_List_Lazy_Types.applicativeNonEmptyList);
  var length = function (v) {
      var v1 = Data_Lazy.force(v);
      return 1 + Data_List_Lazy.length(v1.value1) | 0;
  };
  var last = function (v) {
      var v1 = Data_Lazy.force(v);
      return Data_Maybe.fromMaybe(v1.value0)(Data_List_Lazy.last(v1.value1));
  };
  var init = function (v) {
      var v1 = Data_Lazy.force(v);
      return Data_Maybe.maybe(Data_List_Lazy_Types.nil)(function (v2) {
          return Data_List_Lazy_Types.cons(v1.value0)(v2);
      })(Data_List_Lazy.init(v1.value1));
  };
  var head = function (v) {
      var v1 = Data_Lazy.force(v);
      return v1.value0;
  };
  var fromList = function (l) {
      var v = Data_List_Lazy_Types.step(l);
      if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_Maybe.Just(Data_Lazy.defer(function (v1) {
              return new Data_NonEmpty.NonEmpty(v.value0, v.value1);
          }));
      };
      throw new Error("Failed pattern match at Data.List.Lazy.NonEmpty line 38, column 3 - line 40, column 61: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return function ($53) {
          return fromList(Data_List_Lazy.fromFoldable(dictFoldable)($53));
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Lazy_Types.bindNonEmptyList));
  var appendFoldable = function (dictFoldable) {
      return function (nel) {
          return function (ys) {
              return Data_Lazy.defer(function (v) {
                  return new Data_NonEmpty.NonEmpty(head(nel), Data_Semigroup.append(Data_List_Lazy_Types.semigroupList)(tail(nel))(Data_List_Lazy.fromFoldable(dictFoldable)(ys)));
              });
          };
      };
  };
  exports["appendFoldable"] = appendFoldable;
  exports["concatMap"] = concatMap;
  exports["fromFoldable"] = fromFoldable;
  exports["fromList"] = fromList;
  exports["head"] = head;
  exports["init"] = init;
  exports["length"] = length;
  exports["singleton"] = singleton;
  exports["tail"] = tail;
  exports["toList"] = toList;
  exports["toUnfoldable"] = toUnfoldable;
  exports["uncons"] = uncons;
})(PS["Data.List.Lazy.NonEmpty"] = PS["Data.List.Lazy.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];        
  var tail = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar5) {
                  return $dollar5;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_List_Types.Cons) {
                  return v.value1;
              };
              throw new Error("Failed pattern match at Data.List.Partial line 15, column 1 - line 15, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var last = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar9) {
                  return $dollar9;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  return v.value0;
              };
              if (v instanceof Data_List_Types.Cons) {
                  return last(dictPartial)(v.value1);
              };
              throw new Error("Failed pattern match at Data.List.Partial line 21, column 1 - line 21, column 41: " + [ v.constructor.name ]);
          })());
      };
  };
  var init = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar13) {
                  return $dollar13;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v instanceof Data_List_Types.Cons) {
                  return new Data_List_Types.Cons(v.value0, init(dictPartial)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Partial line 28, column 1 - line 28, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var head = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar17) {
                  return $dollar17;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_List_Types.Cons) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.List.Partial line 9, column 1 - line 9, column 41: " + [ v.constructor.name ]);
          })());
      };
  };
  exports["head"] = head;
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
})(PS["Data.List.Partial"] = PS["Data.List.Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var ZipList = function (x) {
      return x;
  };
  var traversableZipList = Data_List_Lazy_Types.traversableList;
  var showZipList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(ZipList " + (Data_Show.show(Data_List_Lazy_Types.showList(dictShow))(v) + ")");
      });
  };
  var semigroupZipList = Data_List_Lazy_Types.semigroupList;
  var ordZipList = function (dictOrd) {
      return Data_List_Lazy_Types.ordList(dictOrd);
  };
  var newtypeZipList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ZipList);
  var monoidZipList = Data_List_Lazy_Types.monoidList;
  var functorZipList = Data_List_Lazy_Types.functorList;
  var foldableZipList = Data_List_Lazy_Types.foldableList;
  var eqZipList = function (dictEq) {
      return Data_List_Lazy_Types.eqList(dictEq);
  };
  var applyZipList = new Control_Apply.Apply(function () {
      return functorZipList;
  }, function (v) {
      return function (v1) {
          return Data_List_Lazy.zipWith(Data_Function.apply)(v)(v1);
      };
  });
  var zipListIsNotBind = function (dictFail) {
      return new Control_Bind.Bind(function () {
          return applyZipList;
      }, Partial_Unsafe.unsafeCrashWith("bind: unreachable"));
  };
  var applicativeZipList = new Control_Applicative.Applicative(function () {
      return applyZipList;
  }, function ($13) {
      return ZipList(Data_List_Lazy.repeat($13));
  });
  var altZipList = new Control_Alt.Alt(function () {
      return functorZipList;
  }, Data_Semigroup.append(semigroupZipList));
  var plusZipList = new Control_Plus.Plus(function () {
      return altZipList;
  }, Data_Monoid.mempty(monoidZipList));
  var alternativeZipList = new Control_Alternative.Alternative(function () {
      return applicativeZipList;
  }, function () {
      return plusZipList;
  });
  exports["ZipList"] = ZipList;
  exports["showZipList"] = showZipList;
  exports["newtypeZipList"] = newtypeZipList;
  exports["eqZipList"] = eqZipList;
  exports["ordZipList"] = ordZipList;
  exports["semigroupZipList"] = semigroupZipList;
  exports["monoidZipList"] = monoidZipList;
  exports["foldableZipList"] = foldableZipList;
  exports["traversableZipList"] = traversableZipList;
  exports["functorZipList"] = functorZipList;
  exports["applyZipList"] = applyZipList;
  exports["applicativeZipList"] = applicativeZipList;
  exports["altZipList"] = altZipList;
  exports["plusZipList"] = plusZipList;
  exports["alternativeZipList"] = alternativeZipList;
  exports["zipListIsNotBind"] = zipListIsNotBind;
})(PS["Data.List.ZipList"] = PS["Data.List.ZipList"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_MediaType = PS["Data.MediaType"];        
  var textXML = "text/xml";
  var textPlain = "text/plain";
  var textHTML = "text/html";
  var textCSV = "text/csv";
  var multipartFormData = "multipart/form-data";
  var imagePNG = "image/png";
  var imageJPEG = "image/jpeg";
  var imageGIF = "image/gif";
  var applicationXML = "application/xml";
  var applicationOctetStream = "application/octet-stream";
  var applicationJavascript = "application/javascript";
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";
  exports["applicationFormURLEncoded"] = applicationFormURLEncoded;
  exports["applicationJSON"] = applicationJSON;
  exports["applicationJavascript"] = applicationJavascript;
  exports["applicationOctetStream"] = applicationOctetStream;
  exports["applicationXML"] = applicationXML;
  exports["imageGIF"] = imageGIF;
  exports["imageJPEG"] = imageJPEG;
  exports["imagePNG"] = imagePNG;
  exports["multipartFormData"] = multipartFormData;
  exports["textCSV"] = textCSV;
  exports["textHTML"] = textHTML;
  exports["textPlain"] = textPlain;
  exports["textXML"] = textXML;
})(PS["Data.MediaType.Common"] = PS["Data.MediaType.Common"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Alternate = function (x) {
      return x;
  };
  var showAlternate = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Alternate " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupAlternate = function (dictAlt) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Alt.alt(dictAlt)(v)(v1);
          };
      });
  };
  var plusAlternate = function (dictPlus) {
      return dictPlus;
  };
  var ordAlternate = function (dictOrd) {
      return dictOrd;
  };
  var newtypeAlternate = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Alternate);
  var monoidAlternate = function (dictPlus) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAlternate(dictPlus.Alt0());
      }, Control_Plus.empty(dictPlus));
  };
  var monadAlternate = function (dictMonad) {
      return dictMonad;
  };
  var invariantAlternate = function (dictInvariant) {
      return dictInvariant;
  };
  var functorAlternate = function (dictFunctor) {
      return dictFunctor;
  };
  var extendAlternate = function (dictExtend) {
      return dictExtend;
  };
  var eqAlternate = function (dictEq) {
      return dictEq;
  };
  var comonadAlternate = function (dictComonad) {
      return dictComonad;
  };
  var boundedAlternate = function (dictBounded) {
      return dictBounded;
  };
  var bindAlternate = function (dictBind) {
      return dictBind;
  };
  var applyAlternate = function (dictApply) {
      return dictApply;
  };
  var applicativeAlternate = function (dictApplicative) {
      return dictApplicative;
  };
  var alternativeAlternate = function (dictAlternative) {
      return dictAlternative;
  };
  var altAlternate = function (dictAlt) {
      return dictAlt;
  };
  exports["Alternate"] = Alternate;
  exports["newtypeAlternate"] = newtypeAlternate;
  exports["eqAlternate"] = eqAlternate;
  exports["ordAlternate"] = ordAlternate;
  exports["boundedAlternate"] = boundedAlternate;
  exports["functorAlternate"] = functorAlternate;
  exports["invariantAlternate"] = invariantAlternate;
  exports["applyAlternate"] = applyAlternate;
  exports["applicativeAlternate"] = applicativeAlternate;
  exports["altAlternate"] = altAlternate;
  exports["plusAlternate"] = plusAlternate;
  exports["alternativeAlternate"] = alternativeAlternate;
  exports["bindAlternate"] = bindAlternate;
  exports["monadAlternate"] = monadAlternate;
  exports["extendAlternate"] = extendAlternate;
  exports["comonadAlternate"] = comonadAlternate;
  exports["showAlternate"] = showAlternate;
  exports["semigroupAlternate"] = semigroupAlternate;
  exports["monoidAlternate"] = monoidAlternate;
})(PS["Data.Monoid.Alternate"] = PS["Data.Monoid.Alternate"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var CaseInsensitiveString = function (x) {
      return x;
  };
  var showCaseInsensitiveString = new Data_Show.Show(function (v) {
      return "(CaseInsensitiveString " + (v + ")");
  });
  var newtypeCaseInsensitiveString = new Data_Newtype.Newtype(function (n) {
      return n;
  }, CaseInsensitiveString);
  var eqCaseInsensitiveString = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_String.toLower(v) === Data_String.toLower(v1);
      };
  });
  var ordCaseInsensitiveString = new Data_Ord.Ord(function () {
      return eqCaseInsensitiveString;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordString)(Data_String.toLower(v))(Data_String.toLower(v1));
      };
  });
  exports["CaseInsensitiveString"] = CaseInsensitiveString;
  exports["eqCaseInsensitiveString"] = eqCaseInsensitiveString;
  exports["ordCaseInsensitiveString"] = ordCaseInsensitiveString;
  exports["showCaseInsensitiveString"] = showCaseInsensitiveString;
  exports["newtypeCaseInsensitiveString"] = newtypeCaseInsensitiveString;
})(PS["Data.String.CaseInsensitive"] = PS["Data.String.CaseInsensitive"] || {});
(function(exports) {
    "use strict";

  exports["showRegex'"] = function (r) {
    return "" + r;
  };

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.source = function (r) {
    return r.source;
  };

  exports["flags'"] = function (r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };

  exports["replace'"] = function (r) {
    return function (f) {
      return function (s2) {
        return s2.replace(r, function (match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  };

  exports._search = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var result = s.search(r);
          return result === -1 ? nothing : just(result);
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var unicode = new RegexFlags({
      global: false, 
      ignoreCase: false, 
      multiline: false, 
      sticky: false, 
      unicode: true
  });
  var sticky = new RegexFlags({
      global: false, 
      ignoreCase: false, 
      multiline: false, 
      sticky: true, 
      unicode: false
  });
  var showRegexFlags = new Data_Show.Show(function (v) {
      var usedFlags = Data_Semigroup.append(Data_Semigroup.semigroupArray)([  ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.global))("global"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.ignoreCase))("ignoreCase"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.multiline))("multiline"))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.sticky))("sticky"))(Data_Functor.voidLeft(Data_Functor.functorArray)(Control_MonadZero.guard(Control_MonadZero.monadZeroArray)(v.value0.unicode))("unicode"))))));
      var $6 = Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(usedFlags)([  ]);
      if ($6) {
          return "noFlags";
      };
      return "(" + (Data_String.joinWith(" <> ")(usedFlags) + ")");
  });
  var semigroupRegexFlags = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new RegexFlags({
              global: v.value0.global || v1.value0.global, 
              ignoreCase: v.value0.ignoreCase || v1.value0.ignoreCase, 
              multiline: v.value0.multiline || v1.value0.multiline, 
              sticky: v.value0.sticky || v1.value0.sticky, 
              unicode: v.value0.unicode || v1.value0.unicode
          });
      };
  });
  var noFlags = new RegexFlags({
      global: false, 
      ignoreCase: false, 
      multiline: false, 
      sticky: false, 
      unicode: false
  });
  var multiline = new RegexFlags({
      global: false, 
      ignoreCase: false, 
      multiline: true, 
      sticky: false, 
      unicode: false
  });
  var monoidRegexFlags = new Data_Monoid.Monoid(function () {
      return semigroupRegexFlags;
  }, noFlags);
  var ignoreCase = new RegexFlags({
      global: false, 
      ignoreCase: true, 
      multiline: false, 
      sticky: false, 
      unicode: false
  });
  var global = new RegexFlags({
      global: true, 
      ignoreCase: false, 
      multiline: false, 
      sticky: false, 
      unicode: false
  });
  var eqRegexFlags = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0.global === v1.value0.global && (v.value0.ignoreCase === v1.value0.ignoreCase && (v.value0.multiline === v1.value0.multiline && (v.value0.sticky === v1.value0.sticky && v.value0.unicode === v1.value0.unicode)));
      };
  });
  exports["RegexFlags"] = RegexFlags;
  exports["global"] = global;
  exports["ignoreCase"] = ignoreCase;
  exports["multiline"] = multiline;
  exports["noFlags"] = noFlags;
  exports["sticky"] = sticky;
  exports["unicode"] = unicode;
  exports["semigroupRegexFlags"] = semigroupRegexFlags;
  exports["monoidRegexFlags"] = monoidRegexFlags;
  exports["eqRegexFlags"] = eqRegexFlags;
  exports["showRegexFlags"] = showRegexFlags;
})(PS["Data.String.Regex.Flags"] = PS["Data.String.Regex.Flags"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Prelude = PS["Prelude"];        
  var showRegex = new Data_Show.Show($foreign["showRegex'"]);
  var search = $foreign._search(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return new Data_String_Regex_Flags.RegexFlags({
          global: Data_String.contains("g")(s), 
          ignoreCase: Data_String.contains("i")(s), 
          multiline: Data_String.contains("m")(s), 
          sticky: Data_String.contains("y")(s), 
          unicode: Data_String.contains("u")(s)
      });
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var flags = function ($8) {
      return Data_String_Regex_Flags.RegexFlags.create($foreign["flags'"]($8));
  };
  exports["flags"] = flags;
  exports["match"] = match;
  exports["parseFlags"] = parseFlags;
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
  exports["search"] = search;
  exports["showRegex"] = showRegex;
  exports["replace"] = $foreign.replace;
  exports["replace'"] = $foreign["replace'"];
  exports["source"] = $foreign.source;
  exports["split"] = $foreign.split;
  exports["test"] = $foreign.test;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = PS["Partial.Unsafe"];        
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.fromRight()(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS["Data.String.Regex.Unsafe"] = PS["Data.String.Regex.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var uncurry9 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry8 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry7 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry6 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry5 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0);
      };
  };
  var uncurry4 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0);
      };
  };
  var uncurry3 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0);
      };
  };
  var uncurry2 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0);
      };
  };
  var uncurry10 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry1 = function (f) {
      return function (v) {
          return f(v.value0);
      };
  };
  var tuple9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, Data_Unit.unit)))))))));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, Data_Unit.unit))))))));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, Data_Unit.unit)))))));
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, Data_Unit.unit))))));
                      };
                  };
              };
          };
      };
  };
  var tuple5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, Data_Unit.unit)))));
                  };
              };
          };
      };
  };
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
              };
          };
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
          };
      };
  };
  var tuple2 = function (a) {
      return function (b) {
          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, Data_Unit.unit));
      };
  };
  var tuple10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, Data_Unit.unit))))))))));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple1 = function (a) {
      return new Data_Tuple.Tuple(a, Data_Unit.unit);
  };
  var over9 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1)))))))));
      };
  };
  var over8 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1))))))));
      };
  };
  var over7 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1)))))));
      };
  };
  var over6 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1))))));
      };
  };
  var over5 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1)))));
      };
  };
  var over4 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value0), v.value1.value1.value1.value1))));
      };
  };
  var over3 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value0), v.value1.value1.value1)));
      };
  };
  var over2 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(o(v.value1.value0), v.value1.value1));
      };
  };
  var over10 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1))))))))));
      };
  };
  var over1 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(o(v.value0), v.value1);
      };
  };
  var get9 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get8 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get7 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value0;
  };
  var get6 = function (v) {
      return v.value1.value1.value1.value1.value1.value0;
  };
  var get5 = function (v) {
      return v.value1.value1.value1.value1.value0;
  };
  var get4 = function (v) {
      return v.value1.value1.value1.value0;
  };
  var get3 = function (v) {
      return v.value1.value1.value0;
  };
  var get2 = function (v) {
      return v.value1.value0;
  };
  var get10 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get1 = function (v) {
      return v.value0;
  };
  var curry9 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return function (i) {
                                              return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, z))))))))));
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry8 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, z)))))))));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry7 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, z))))))));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry6 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, z)))))));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry5 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, z))))));
                          };
                      };
                  };
              };
          };
      };
  };
  var curry4 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, z)))));
                      };
                  };
              };
          };
      };
  };
  var curry3 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, z))));
                  };
              };
          };
      };
  };
  var curry2 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, z)));
              };
          };
      };
  };
  var curry10 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return function (i) {
                                              return function (j) {
                                                  return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, z)))))))))));
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry1 = function (z) {
      return function (f) {
          return function (a) {
              return f(new Data_Tuple.Tuple(a, z));
          };
      };
  };
  exports["curry1"] = curry1;
  exports["curry10"] = curry10;
  exports["curry2"] = curry2;
  exports["curry3"] = curry3;
  exports["curry4"] = curry4;
  exports["curry5"] = curry5;
  exports["curry6"] = curry6;
  exports["curry7"] = curry7;
  exports["curry8"] = curry8;
  exports["curry9"] = curry9;
  exports["get1"] = get1;
  exports["get10"] = get10;
  exports["get2"] = get2;
  exports["get3"] = get3;
  exports["get4"] = get4;
  exports["get5"] = get5;
  exports["get6"] = get6;
  exports["get7"] = get7;
  exports["get8"] = get8;
  exports["get9"] = get9;
  exports["over1"] = over1;
  exports["over10"] = over10;
  exports["over2"] = over2;
  exports["over3"] = over3;
  exports["over4"] = over4;
  exports["over5"] = over5;
  exports["over6"] = over6;
  exports["over7"] = over7;
  exports["over8"] = over8;
  exports["over9"] = over9;
  exports["tuple1"] = tuple1;
  exports["tuple10"] = tuple10;
  exports["tuple2"] = tuple2;
  exports["tuple3"] = tuple3;
  exports["tuple4"] = tuple4;
  exports["tuple5"] = tuple5;
  exports["tuple6"] = tuple6;
  exports["tuple7"] = tuple7;
  exports["tuple8"] = tuple8;
  exports["tuple9"] = tuple9;
  exports["uncurry1"] = uncurry1;
  exports["uncurry10"] = uncurry10;
  exports["uncurry2"] = uncurry2;
  exports["uncurry3"] = uncurry3;
  exports["uncurry4"] = uncurry4;
  exports["uncurry5"] = uncurry5;
  exports["uncurry6"] = uncurry6;
  exports["uncurry7"] = uncurry7;
  exports["uncurry8"] = uncurry8;
  exports["uncurry9"] = uncurry9;
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
    "use strict";

  var gpu = new GPU( )

  exports.makeK0 = function (opts) {
    return function (body) {
      return gpu.createKernel (new Function( body), opts)
    }
  }

  exports.makeK1 = function (opts) {
    return function (body) {
      return function (arg1) {
        return function (par1) {
          return gpu.createKernel (new Function( arg1, body), opts)(par1)
        }
      }
    }
  }

  exports.makeK2 = function (opts) {
    return function (body) {
      return function (arg1) {
        return function (arg2) { 
          return function (par1) {
            return function (par2) {
              return gpu.createKernel (new Function( arg1, arg2, body), opts)(par1, par2)
            }
          }
        }
      }
    }
  }

  exports.makeK3 = function (opts) {
    return function (body) {
      return function (arg1) {
        return function (arg2) {
          return function (arg3) {
            var kernel = gpu.createKernel (new Function( arg1, arg2, arg3, body), opts ) 
            return function (par1) {
              return function (par2) {
                return function (par3) {
                  var result = kernel (par1, par2, par3)
                  console.log (result)
                  return result
                }
              }
            }
          }
        }
      }
    }
  }

  exports.makeK4 = function (opts) {
    return function (body) {
      return function (arg1) { 
        return function (arg2) {
          return function (arg3) {
            return function (arg4) {
              return function (par1) {
                return function (par2) {
                  return function (par3) {
                    return function (par4) {
                      return gpu.createKernel (new Function( arg1, arg2, arg3, arg4, body), opts)(par1, par2, par3, par4)
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  exports.makeK5 = function (opts) {
    return function (body) {
      return function (arg1) { 
        return function (arg2) {
          return function (arg3) {
            return function (arg4) {
              return function (arg5) {
                return function (par1) {
                  return function (par2) {
                    return function (par3) {
                      return function (par4) {
                        return function (par5) {
                          return gpu.createKernel (new Function( arg1, arg2, arg3, arg4, arg5, body), opts) (par1, par2, par3, par4, par5)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
})(PS["GPU"] = PS["GPU"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Num = (function () {
      function Num(value0) {
          this.value0 = value0;
      };
      Num.create = function (value0) {
          return new Num(value0);
      };
      return Num;
  })();
  var Call = (function () {
      function Call(value0) {
          this.value0 = value0;
      };
      Call.create = function (value0) {
          return new Call(value0);
      };
      return Call;
  })();
  var Read = (function () {
      function Read(value0) {
          this.value0 = value0;
      };
      Read.create = function (value0) {
          return new Read(value0);
      };
      return Read;
  })();
  var Apply1 = (function () {
      function Apply1(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Apply1.create = function (value0) {
          return function (value1) {
              return new Apply1(value0, value1);
          };
      };
      return Apply1;
  })();
  var Apply2 = (function () {
      function Apply2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Apply2.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Apply2(value0, value1, value2);
              };
          };
      };
      return Apply2;
  })();
  var Apply3 = (function () {
      function Apply3(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Apply3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Apply3(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Apply3;
  })();
  var Index1 = (function () {
      function Index1(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Index1.create = function (value0) {
          return function (value1) {
              return new Index1(value0, value1);
          };
      };
      return Index1;
  })();
  var Index2 = (function () {
      function Index2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Index2.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Index2(value0, value1, value2);
              };
          };
      };
      return Index2;
  })();
  var Index3 = (function () {
      function Index3(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Index3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Index3(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Index3;
  })();
  var ThreadX = (function () {
      function ThreadX() {

      };
      ThreadX.value = new ThreadX();
      return ThreadX;
  })();
  var ThreadY = (function () {
      function ThreadY() {

      };
      ThreadY.value = new ThreadY();
      return ThreadY;
  })();
  var ThreadZ = (function () {
      function ThreadZ() {

      };
      ThreadZ.value = new ThreadZ();
      return ThreadZ;
  })();
  var DimensionsX = (function () {
      function DimensionsX() {

      };
      DimensionsX.value = new DimensionsX();
      return DimensionsX;
  })();
  var DimensionsY = (function () {
      function DimensionsY() {

      };
      DimensionsY.value = new DimensionsY();
      return DimensionsY;
  })();
  var DimensionsZ = (function () {
      function DimensionsZ() {

      };
      DimensionsZ.value = new DimensionsZ();
      return DimensionsZ;
  })();
  var Add = (function () {
      function Add(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Add.create = function (value0) {
          return function (value1) {
              return new Add(value0, value1);
          };
      };
      return Add;
  })();
  var Sub = (function () {
      function Sub(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Sub.create = function (value0) {
          return function (value1) {
              return new Sub(value0, value1);
          };
      };
      return Sub;
  })();
  var Mul = (function () {
      function Mul(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Mul.create = function (value0) {
          return function (value1) {
              return new Mul(value0, value1);
          };
      };
      return Mul;
  })();
  var Div = (function () {
      function Div(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Div.create = function (value0) {
          return function (value1) {
              return new Div(value0, value1);
          };
      };
      return Div;
  })();
  var Mod = (function () {
      function Mod(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Mod.create = function (value0) {
          return function (value1) {
              return new Mod(value0, value1);
          };
      };
      return Mod;
  })();
  var Gt = (function () {
      function Gt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Gt.create = function (value0) {
          return function (value1) {
              return new Gt(value0, value1);
          };
      };
      return Gt;
  })();
  var Ge = (function () {
      function Ge(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ge.create = function (value0) {
          return function (value1) {
              return new Ge(value0, value1);
          };
      };
      return Ge;
  })();
  var Lt = (function () {
      function Lt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lt.create = function (value0) {
          return function (value1) {
              return new Lt(value0, value1);
          };
      };
      return Lt;
  })();
  var Le = (function () {
      function Le(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Le.create = function (value0) {
          return function (value1) {
              return new Le(value0, value1);
          };
      };
      return Le;
  })();
  var Eq = (function () {
      function Eq(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Eq.create = function (value0) {
          return function (value1) {
              return new Eq(value0, value1);
          };
      };
      return Eq;
  })();
  var Ne = (function () {
      function Ne(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ne.create = function (value0) {
          return function (value1) {
              return new Ne(value0, value1);
          };
      };
      return Ne;
  })();
  var And = (function () {
      function And(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      And.create = function (value0) {
          return function (value1) {
              return new And(value0, value1);
          };
      };
      return And;
  })();
  var Or = (function () {
      function Or(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Or.create = function (value0) {
          return function (value1) {
              return new Or(value0, value1);
          };
      };
      return Or;
  })();
  var Not = (function () {
      function Not(value0) {
          this.value0 = value0;
      };
      Not.create = function (value0) {
          return new Not(value0);
      };
      return Not;
  })();
  var True = (function () {
      function True() {

      };
      True.value = new True();
      return True;
  })();
  var False = (function () {
      function False() {

      };
      False.value = new False();
      return False;
  })();
  var S = (function () {
      function S(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      S.create = function (value0) {
          return function (value1) {
              return new S(value0, value1);
          };
      };
      return S;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var Break = (function () {
      function Break() {

      };
      Break.value = new Break();
      return Break;
  })();
  var Var = (function () {
      function Var(value0) {
          this.value0 = value0;
      };
      Var.create = function (value0) {
          return new Var(value0);
      };
      return Var;
  })();
  var $$Set = (function () {
      function $$Set(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      $$Set.create = function (value0) {
          return function (value1) {
              return new $$Set(value0, value1);
          };
      };
      return $$Set;
  })();
  var Vset = (function () {
      function Vset(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Vset.create = function (value0) {
          return function (value1) {
              return new Vset(value0, value1);
          };
      };
      return Vset;
  })();
  var Assign = (function () {
      function Assign(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Assign.create = function (value0) {
          return function (value1) {
              return new Assign(value0, value1);
          };
      };
      return Assign;
  })();
  var For = (function () {
      function For(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      For.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new For(value0, value1, value2, value3);
                  };
              };
          };
      };
      return For;
  })();
  var IF = (function () {
      function IF(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      IF.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new IF(value0, value1, value2);
              };
          };
      };
      return IF;
  })();
  var IF$prime = (function () {
      function IF$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      IF$prime.create = function (value0) {
          return function (value1) {
              return new IF$prime(value0, value1);
          };
      };
      return IF$prime;
  })();
  var While = (function () {
      function While(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      While.create = function (value0) {
          return function (value1) {
              return new While(value0, value1);
          };
      };
      return While;
  })();
  var $$Function = (function () {
      function $$Function(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Function.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Function(value0, value1, value2);
              };
          };
      };
      return $$Function;
  })();
  var vset = Vset.create;
  var $$var = Var.create;
  var sqrt = function (exp) {
      return new Apply1("Math.sqrt", exp);
  };
  var sqr = function (exp) {
      return new Apply2("Math.pow", exp, new Num(2.0));
  };
  var showExpr = new Data_Show.Show(function (v) {
      if (v instanceof Num) {
          return Data_Show.show(Data_Show.showNumber)(v.value0);
      };
      if (v instanceof Read) {
          return v.value0;
      };
      if (v instanceof Call) {
          return v.value0 + "()";
      };
      if (v instanceof Apply1) {
          return v.value0 + ("(" + (Data_Show.show(showExpr)(v.value1) + ")"));
      };
      if (v instanceof Apply2) {
          return v.value0 + ("(" + (Data_Show.show(showExpr)(v.value1) + (", " + (Data_Show.show(showExpr)(v.value2) + ")"))));
      };
      if (v instanceof Apply3) {
          return v.value0 + ("(" + (Data_Show.show(showExpr)(v.value1) + (", " + (Data_Show.show(showExpr)(v.value2) + (", " + (Data_Show.show(showExpr)(v.value3) + ")"))))));
      };
      if (v instanceof Index1) {
          return v.value0 + ("[" + (Data_Show.show(showExpr)(v.value1) + "]"));
      };
      if (v instanceof Index2) {
          return v.value0 + ("[" + (Data_Show.show(showExpr)(v.value1) + ("][" + (Data_Show.show(showExpr)(v.value2) + "]"))));
      };
      if (v instanceof Index3) {
          return v.value0 + ("[" + (Data_Show.show(showExpr)(v.value1) + ("][" + (Data_Show.show(showExpr)(v.value2) + ("][" + (Data_Show.show(showExpr)(v.value3) + "]"))))));
      };
      if (v instanceof ThreadX) {
          return "this.thread.x";
      };
      if (v instanceof ThreadY) {
          return "this.thread.y";
      };
      if (v instanceof ThreadZ) {
          return "this.thread.z";
      };
      if (v instanceof DimensionsX) {
          return "this.dimensions.x";
      };
      if (v instanceof DimensionsY) {
          return "this.dimensions.y";
      };
      if (v instanceof DimensionsZ) {
          return "this.dimensions.z";
      };
      if (v instanceof Add) {
          return Data_Show.show(showExpr)(v.value0) + (" + " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Sub) {
          return Data_Show.show(showExpr)(v.value0) + (" - " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Mul) {
          return Data_Show.show(showExpr)(v.value0) + (" * " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Div) {
          return Data_Show.show(showExpr)(v.value0) + (" / " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Mod) {
          return Data_Show.show(showExpr)(v.value0) + (" % " + Data_Show.show(showExpr)(v.value1));
      };
      throw new Error("Failed pattern match at GPU.DSL line 120, column 10 - line 141, column 41: " + [ v.constructor.name ]);
  });
  var showCond = new Data_Show.Show(function (v) {
      if (v instanceof Gt) {
          return Data_Show.show(showExpr)(v.value0) + (" > " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Ge) {
          return Data_Show.show(showExpr)(v.value0) + (" >= " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Lt) {
          return Data_Show.show(showExpr)(v.value0) + (" < " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Le) {
          return Data_Show.show(showExpr)(v.value0) + (" <= " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Eq) {
          return Data_Show.show(showExpr)(v.value0) + (" == " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Ne) {
          return Data_Show.show(showExpr)(v.value0) + (" != " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof And) {
          return Data_Show.show(showCond)(v.value0) + (" && " + Data_Show.show(showCond)(v.value1));
      };
      if (v instanceof Or) {
          return Data_Show.show(showCond)(v.value0) + (" || " + Data_Show.show(showCond)(v.value1));
      };
      if (v instanceof Not) {
          return "!(" + (Data_Show.show(showCond)(v.value0) + ")");
      };
      if (v instanceof True) {
          return "true";
      };
      if (v instanceof False) {
          return "false";
      };
      throw new Error("Failed pattern match at GPU.DSL line 84, column 10 - line 97, column 1: " + [ v.constructor.name ]);
  });
  var showStm = new Data_Show.Show(function (v) {
      if (v instanceof Var) {
          return "var " + v.value0;
      };
      if (v instanceof $$Set) {
          return v.value0 + (" = " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Vset) {
          return "var " + (v.value0 + (" = " + Data_Show.show(showExpr)(v.value1)));
      };
      if (v instanceof Assign) {
          return v.value0 + (" = " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof For) {
          return "for (var " + (v.value0 + (" = " + (Data_Show.show(Data_Show.showInt)(v.value1) + ("; " + (v.value0 + ("<= " + (Data_Show.show(Data_Show.showInt)(v.value2) + ("; " + (v.value0 + ("++) " + Data_Show.show(showBlock)(v.value3)))))))))));
      };
      if (v instanceof IF) {
          return "if (" + (Data_Show.show(showCond)(v.value0) + (") " + (Data_Show.show(showBlock)(v.value1) + (" else " + Data_Show.show(showBlock)(v.value2)))));
      };
      if (v instanceof IF$prime) {
          return "if (" + (Data_Show.show(showCond)(v.value0) + (") " + Data_Show.show(showBlock)(v.value1)));
      };
      if (v instanceof While) {
          return "while (" + (Data_Show.show(showCond)(v.value0) + (") " + Data_Show.show(showBlock)(v.value1)));
      };
      if (v instanceof $$Function && v.value1.length === 0) {
          return "function " + (v.value0 + (" () " + Data_Show.show(showBlock)(v.value2)));
      };
      if (v instanceof $$Function) {
          return "function " + (v.value0 + (" (" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(v.value1) + (") " + Data_Show.show(showBlock)(v.value2)))));
      };
      throw new Error("Failed pattern match at GPU.DSL line 107, column 10 - line 117, column 104: " + [ v.constructor.name ]);
  });
  var showBlock = new Data_Show.Show(function (block) {
      var go = function (v) {
          if (v instanceof S) {
              return Data_Show.show(showStm)(v.value0) + ("; " + go(v.value1));
          };
          if (v instanceof Return) {
              return "return " + (Data_Show.show(showExpr)(v.value0) + ";");
          };
          if (v instanceof End) {
              return "";
          };
          if (v instanceof Break) {
              return "break;";
          };
          throw new Error("Failed pattern match at GPU.DSL line 100, column 12 - line 106, column 1: " + [ v.constructor.name ]);
      };
      return "{ " + (go(block) + " }");
  });
  var set = Assign.create;
  var $$return = Return.create;
  var read = Read.create;
  var i = read("i");
  var $$function = $$Function.create;
  var exprSemiRing = new Data_Semiring.Semiring(Add.create, Mul.create, new Num(1.0), new Num(0.0));
  var exprRing = new Data_Ring.Ring(function () {
      return exprSemiRing;
  }, Sub.create);
  var exprCommRing = new Data_CommutativeRing.CommutativeRing(function () {
      return exprRing;
  });
  var exprEuclRing = new Data_EuclideanRing.EuclideanRing(function () {
      return exprCommRing;
  }, function (v) {
      return 1;
  }, Div.create, Mod.create);
  var end = End.value;
  var condHeyting = new Data_HeytingAlgebra.HeytingAlgebra(And.create, Or.create, False.value, function (p) {
      return function (q) {
          return Data_HeytingAlgebra.disj(condHeyting)(Data_HeytingAlgebra.not(condHeyting)(p))(q);
      };
  }, Not.create, True.value);
  var condBool = new Data_BooleanAlgebra.BooleanAlgebra(function () {
      return condHeyting;
  });
  var call = Call.create;
  var $$break = Break.value;
  var at3 = Index3.create;
  var at2 = Index2.create;
  var at = Index1.create;
  exports["S"] = S;
  exports["Return"] = Return;
  exports["End"] = End;
  exports["Break"] = Break;
  exports["Gt"] = Gt;
  exports["Ge"] = Ge;
  exports["Lt"] = Lt;
  exports["Le"] = Le;
  exports["Eq"] = Eq;
  exports["Ne"] = Ne;
  exports["And"] = And;
  exports["Or"] = Or;
  exports["Not"] = Not;
  exports["True"] = True;
  exports["False"] = False;
  exports["Num"] = Num;
  exports["Call"] = Call;
  exports["Read"] = Read;
  exports["Apply1"] = Apply1;
  exports["Apply2"] = Apply2;
  exports["Apply3"] = Apply3;
  exports["Index1"] = Index1;
  exports["Index2"] = Index2;
  exports["Index3"] = Index3;
  exports["ThreadX"] = ThreadX;
  exports["ThreadY"] = ThreadY;
  exports["ThreadZ"] = ThreadZ;
  exports["DimensionsX"] = DimensionsX;
  exports["DimensionsY"] = DimensionsY;
  exports["DimensionsZ"] = DimensionsZ;
  exports["Add"] = Add;
  exports["Sub"] = Sub;
  exports["Mul"] = Mul;
  exports["Div"] = Div;
  exports["Mod"] = Mod;
  exports["Var"] = Var;
  exports["Set"] = $$Set;
  exports["Vset"] = Vset;
  exports["Assign"] = Assign;
  exports["For"] = For;
  exports["IF"] = IF;
  exports["IF'"] = IF$prime;
  exports["While"] = While;
  exports["Function"] = $$Function;
  exports["at"] = at;
  exports["at2"] = at2;
  exports["at3"] = at3;
  exports["break"] = $$break;
  exports["call"] = call;
  exports["end"] = end;
  exports["function"] = $$function;
  exports["i"] = i;
  exports["read"] = read;
  exports["return"] = $$return;
  exports["set"] = set;
  exports["sqr"] = sqr;
  exports["sqrt"] = sqrt;
  exports["var"] = $$var;
  exports["vset"] = vset;
  exports["exprSemiRing"] = exprSemiRing;
  exports["exprRing"] = exprRing;
  exports["exprCommRing"] = exprCommRing;
  exports["exprEuclRing"] = exprEuclRing;
  exports["condHeyting"] = condHeyting;
  exports["condBool"] = condBool;
  exports["showCond"] = showCond;
  exports["showBlock"] = showBlock;
  exports["showStm"] = showStm;
  exports["showExpr"] = showExpr;
})(PS["GPU.DSL"] = PS["GPU.DSL"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["GPU"];
  var GPU_DSL = PS["GPU.DSL"];
  exports["makeK0"] = $foreign.makeK0;
  exports["makeK1"] = $foreign.makeK1;
  exports["makeK2"] = $foreign.makeK2;
  exports["makeK3"] = $foreign.makeK3;
  exports["makeK4"] = $foreign.makeK4;
  exports["makeK5"] = $foreign.makeK5;
})(PS["GPU"] = PS["GPU"] || {});
(function(exports) {
  /* globals exports, JSON */
  "use strict";

  // module Global.Unsafe

  exports.unsafeStringify = function (x) {
    return JSON.stringify(x);
  };

  exports.unsafeToFixed = function (digits) {
    return function (n) {
      return n.toFixed(digits);
    };
  };

  exports.unsafeToExponential = function (digits) {
    return function (n) {
      return n.toExponential(digits);
    };
  };

  exports.unsafeToPrecision  = function (digits) {
    return function (n) {
      return n.toPrecision(digits);
    };
  };
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Global.Unsafe"];
  exports["unsafeStringify"] = $foreign.unsafeStringify;
  exports["unsafeToExponential"] = $foreign.unsafeToExponential;
  exports["unsafeToFixed"] = $foreign.unsafeToFixed;
  exports["unsafeToPrecision"] = $foreign.unsafeToPrecision;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.clearSvg = function () {
    return function () {
      var node = document.getElementById ("mySVG")
      while (node.firstChild) {
        node.removeChild (node.firdsChild)
      }
    }
  }

  var svgNS = "http://www.w3.org/2000/svg";

  exports.putCircle = function (body) {
    return function () {
      var myCircle = document.createElementNS(svgNS,"circle");
      myCircle.setAttributeNS(null,"cx",body.q [0]);
      myCircle.setAttributeNS(null,"cy",body.q [1]);
      myCircle.setAttributeNS(null,"r",6);
      myCircle.setAttributeNS(null,"fill","black");
      myCircle.setAttributeNS(null,"stroke","none");

      document.getElementById("mySVG").appendChild(myCircle);
    }
  }
})(PS["NBody"] = PS["NBody"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };


  exports.applySig = function(fun) {
    return function(sig) {
      var out = make(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };

  exports.merge = function(sig1) {
    return function(sig2) {
      var out = make(sig1.get());
      sig2.subscribe(out.set);
      sig1.subscribe(out.set);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.sampleOn = function(sig1) {
    return function(sig2) {
      var out = make(sig2.get());
      sig1.subscribe(function() {
        out.set(sig2.get());
      });
      return out;
    };
  };

  exports.dropRepeats = function(eq) {
    return function(sig) {
      var val = sig.get();
      var out = make(val);
      sig.subscribe(function(newval) {
        if (!eq["eq"](val)(newval)) {
          val = newval;
          out.set(val);
        }
      });
      return out;
    };
  };

  exports["dropRepeats'"] = function(sig) {
    var val = sig.get();
    var out = make(val);
    sig.subscribe(function(newval) {
      if (val !== newval) {
        val = newval;
        out.set(val);
      }
    });
    return out;
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };

  exports.unwrap = function(sig) {
    return function() {
      var out = make(sig.get()());
      sig.subscribe(function(val) { out.set(val()); });
      return out;
    };
  };

  exports.filter = function(fn) {
    return function(seed) {
      return function(sig) {
        var out = make(fn(sig.get()) ? sig.get() : seed);
        sig.subscribe(function(val) { if (fn(val)) out.set(val); });
        return out;
      };
    };
  };

  exports.flattenArray = function(sig) {
    return function(seed) {
      var first = sig.get().slice();
      if (first.length > 0) {
        seed = first[0];
      } else {
        first = null;
      }
      var out = make(seed);
      var feed = function(items) { items.forEach(out.set); };
      setTimeout(function() { sig.subscribe(function(val) {
        if (first === null) {
          feed(val);
        } else {
          feed(first.slice(1));
          first = null;
        }
      }); }, 0);
      return out;
    };
  };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];        
  var squigglyMap = function (dictFunctor) {
      return Data_Functor.map(dictFunctor);
  };
  var squigglyApply = function (dictApply) {
      return Control_Apply.apply(dictApply);
  };
  var semigroupSignal = new Data_Semigroup.Semigroup($foreign.merge);
  var monoidSignal = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupSignal;
      }, $foreign.constant(Data_Monoid.mempty(dictMonoid)));
  };
  var mergeMany = function (dictFunctor) {
      return function (dictFoldable) {
          return function (sigs) {
              var mergeMaybe = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return v;
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return v1;
                      };
                      if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just($foreign.merge(v.value0)(v1.value0));
                      };
                      throw new Error("Failed pattern match at Signal line 53, column 9 - line 53, column 33: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(mergeMaybe)(Data_Maybe.Nothing.value)(Data_Functor.map(dictFunctor)(Data_Maybe.Just.create)(sigs));
          };
      };
  };
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var flippedMap = function (dictFunctor) {
      return Data_Function.flip(Data_Functor.map(dictFunctor));
  };
  var flatten = function (dictFunctor) {
      return function (dictFoldable) {
          return function (sig) {
              return $foreign.flattenArray(flippedMap(functorSignal)(sig)(function ($14) {
                  return Data_Foldable.fold(dictFoldable)(Data_Monoid.monoidArray)(Data_Functor.map(dictFunctor)(function (i) {
                      return [ i ];
                  })($14));
              }));
          };
      };
  };
  var filterMap = function (f) {
      return function (def) {
          return function (sig) {
              return Data_Functor.map(functorSignal)(Data_Maybe.fromMaybe(def))($foreign.filter(Data_Maybe.isJust)(new Data_Maybe.Just(def))(Data_Functor.map(functorSignal)(f)(sig)));
          };
      };
  };
  var applySignal = new Control_Apply.Apply(function () {
      return functorSignal;
  }, $foreign.applySig);
  var map2 = function (f) {
      return function (a) {
          return function (b) {
              return squigglyApply(applySignal)(squigglyMap(functorSignal)(f)(a))(b);
          };
      };
  };
  var map3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return squigglyApply(applySignal)(squigglyApply(applySignal)(squigglyMap(functorSignal)(f)(a))(b))(c);
              };
          };
      };
  };
  var map4 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return squigglyApply(applySignal)(squigglyApply(applySignal)(squigglyApply(applySignal)(squigglyMap(functorSignal)(f)(a))(b))(c))(d);
                  };
              };
          };
      };
  };
  var map5 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return squigglyApply(applySignal)(squigglyApply(applySignal)(squigglyApply(applySignal)(squigglyApply(applySignal)(squigglyMap(functorSignal)(f)(a))(b))(c))(d))(e);
                      };
                  };
              };
          };
      };
  };
  var applicativeSignal = new Control_Applicative.Applicative(function () {
      return applySignal;
  }, $foreign.constant);
  exports["filterMap"] = filterMap;
  exports["flatten"] = flatten;
  exports["flippedMap"] = flippedMap;
  exports["map2"] = map2;
  exports["map3"] = map3;
  exports["map4"] = map4;
  exports["map5"] = map5;
  exports["mergeMany"] = mergeMany;
  exports["squigglyApply"] = squigglyApply;
  exports["squigglyMap"] = squigglyMap;
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["applicativeSignal"] = applicativeSignal;
  exports["semigroupSignal"] = semigroupSignal;
  exports["monoidSignal"] = monoidSignal;
  exports["constant"] = $foreign.constant;
  exports["dropRepeats"] = $foreign.dropRepeats;
  exports["dropRepeats'"] = $foreign["dropRepeats'"];
  exports["filter"] = $foreign.filter;
  exports["flattenArray"] = $foreign.flattenArray;
  exports["foldp"] = $foreign.foldp;
  exports["merge"] = $foreign.merge;
  exports["runSignal"] = $foreign.runSignal;
  exports["sampleOn"] = $foreign.sampleOn;
  exports["unwrap"] = $foreign.unwrap;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };

  exports.delayP = function delayP(constant) {
    return function(t) {
      return function(sig) {
        var out = constant(sig.get());
        var first = true;
        sig.subscribe(function(val) {
          if (first) {
            first = false;
          } else {
            setTimeout(function() {
              out.set(val);
            }, t);
          }
        });
        return out;
      }
    };
  };

  exports.sinceP = function sinceP(constant) {
    return function(t) {
      return function(sig) {
        var out = constant(false);
        var first = true;
        var timer = undefined;
        var tick = function() {
          out.set(false);
          timer = undefined;
        };
        sig.subscribe(function() {
          if (first) {
            first = false;
            return;
          }
          if (timer === undefined) {
            out.set(true);
            timer = setTimeout(tick, t);
          } else {
            clearTimeout(timer);
            timer = setTimeout(tick, t);
          }
        });
        return out;
      }
    };
  };
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];        
  var since = $foreign.sinceP(Signal.constant);
  var second = 1000.0;
  var millisecond = 1.0;
  var every = $foreign.everyP(Signal.constant);
  var delay = $foreign.delayP(Signal.constant);
  var debounce = function (t) {
      return function (s) {
          var whenEqual = function (value) {
              return function (input) {
                  return Signal.filter(Data_Eq.eq(Data_Eq.eqBoolean)(value))(value)(input);
              };
          };
          var whenChangeTo = function (value) {
              return function (input) {
                  return whenEqual(value)(Signal.dropRepeats(Data_Eq.eqBoolean)(input));
              };
          };
          var leading = whenChangeTo(false)(since(t)(s));
          return Signal.sampleOn(leading)(s);
      };
  };
  exports["debounce"] = debounce;
  exports["delay"] = delay;
  exports["every"] = every;
  exports["millisecond"] = millisecond;
  exports["second"] = second;
  exports["since"] = since;
  exports["now"] = $foreign.now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["NBody"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var GPU = PS["GPU"];
  var GPU_DSL = PS["GPU.DSL"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];        
  var ssys = 10;
  var redraw = function (sys) {
      return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)($foreign.putCircle)(sys);
  };
  var randomSystem = Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(Data_Array.replicate(ssys)(function __do() {
      var v = Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(Data_Array.replicate(2)(Control_Monad_Eff_Random.randomRange(0.0)(600.0)))();
      var v2 = Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(Data_Array.replicate(2)(Control_Monad_Eff_Random.randomRange(0.0)(600.0)))();
      var v3 = Control_Monad_Eff_Random.randomRange(1.0)(100000.0)();
      return {
          m: v3, 
          v: v, 
          q: v2
      };
  }));
  var main = function __do() {
      var v = randomSystem();
      return Control_Monad_Eff_Console.logShow(Data_Show.showInt)(Data_Array.length(v))();
  };
  var dt = 0.1;
  var kernel = (function () {
      var opts = {
          output: [ ssys, 2, 2 ], 
          mode: "gpu"
      };
      var body = new GPU_DSL.S(GPU_DSL.vset("f1")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(GPU_DSL.vset("f2")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(GPU_DSL["var"]("d1"), new GPU_DSL.S(GPU_DSL["var"]("d2"), new GPU_DSL.S(GPU_DSL["var"]("r"), new GPU_DSL.S(GPU_DSL.vset("pf")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.ThreadY.value, Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(new GPU_DSL.For("body", 0, ssys, new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.read("body"), GPU_DSL.ThreadX.value), GPU_DSL["break"], new GPU_DSL.S(GPU_DSL.set("d1")(Data_Ring.sub(GPU_DSL.exprRing)(GPU_DSL.at2("positions")(GPU_DSL.read("body"))(Data_Semiring.zero(GPU_DSL.exprSemiRing)))(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.zero(GPU_DSL.exprSemiRing)))), new GPU_DSL.S(GPU_DSL.set("d2")(Data_Ring.sub(GPU_DSL.exprRing)(GPU_DSL.at2("positions")(GPU_DSL.read("body"))(Data_Semiring.one(GPU_DSL.exprSemiRing)))(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.one(GPU_DSL.exprSemiRing)))), new GPU_DSL.S(GPU_DSL.set("r")(GPU_DSL.sqrt(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.sqr(GPU_DSL.read("d1")))(GPU_DSL.sqr(GPU_DSL.read("d2"))))), new GPU_DSL.S(GPU_DSL.set("d1")(Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("d1"))(GPU_DSL.read("r"))), new GPU_DSL.S(GPU_DSL.set("d2")(Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("d2"))(GPU_DSL.read("r"))), new GPU_DSL.S(GPU_DSL.set("pf")(Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(Data_Semiring.mul(GPU_DSL.exprSemiRing)(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at("masses")(GPU_DSL.read("body")))(GPU_DSL.at("masses")(GPU_DSL.ThreadX.value)))(new GPU_DSL.Num(6.674e-11)))(GPU_DSL.sqr(GPU_DSL.read("r")))), new GPU_DSL.S(GPU_DSL.set("f1")(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.read("f1"))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.read("d1"))(GPU_DSL.read("pf")))), new GPU_DSL.S(GPU_DSL.set("f2")(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.read("f2"))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.read("d2"))(GPU_DSL.read("pf")))), GPU_DSL.end))))))))), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.ThreadZ.value, Data_Semiring.zero(GPU_DSL.exprSemiRing)), GPU_DSL["return"](Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("f1"))(GPU_DSL.at("masses")(GPU_DSL.ThreadX.value))), GPU_DSL["return"](Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("f2"))(GPU_DSL.at("masses")(GPU_DSL.ThreadX.value)))), GPU_DSL.end))), GPU_DSL.end), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.ThreadZ.value, Data_Semiring.zero(GPU_DSL.exprSemiRing)), GPU_DSL["return"](Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.zero(GPU_DSL.exprSemiRing)))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at2("velocities")(GPU_DSL.ThreadX.value)(Data_Semiring.zero(GPU_DSL.exprSemiRing)))(new GPU_DSL.Num(dt)))), GPU_DSL["return"](Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.one(GPU_DSL.exprSemiRing)))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at2("velocities")(GPU_DSL.ThreadX.value)(Data_Semiring.one(GPU_DSL.exprSemiRing)))(new GPU_DSL.Num(dt))))), GPU_DSL.end)), GPU_DSL.end)))))));
      return GPU.makeK3(opts)(Data_Show.show(GPU_DSL.showBlock)(body))("masses")("velocities")("positions");
  })();
  var step = function (sys) {
      var velocities = Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return v.v;
      })(sys);
      var positions = Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return v.q;
      })(sys);
      var masses = Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return v.m;
      })(sys);
      var out = kernel(masses)(velocities)(positions);
      var goback = function (v) {
          return function (v1) {
              if (v1.length === 2) {
                  return {
                      m: v, 
                      v: v1[0], 
                      q: v1[1]
                  };
              };
              return {
                  m: 0.0, 
                  v: [ 0.0, 0.0 ], 
                  q: [ 0.0, 0.0 ]
              };
          };
      };
      return Data_Array.zipWith(goback)(masses)(out);
  };
  exports["dt"] = dt;
  exports["kernel"] = kernel;
  exports["main"] = main;
  exports["randomSystem"] = randomSystem;
  exports["redraw"] = redraw;
  exports["ssys"] = ssys;
  exports["step"] = step;
  exports["clearSvg"] = $foreign.clearSvg;
  exports["putCircle"] = $foreign.putCircle;
})(PS["NBody"] = PS["NBody"] || {});
(function(exports) {// module Signal.Channel

  exports.channelP =
    function channelP(constant) {
      return function(v) {
        return function() {
          return constant(v);
        };
      };
    };

  exports.sendP =
    function sendP(chan) {
      return function(v) {
        return function() {
          chan.set(v);
        };
      };
    };

  exports.subscribe =
    function subscribe(chan) {
      return chan;
    };
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Signal.Channel"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];        
  var send = $foreign.sendP;
  var channel = $foreign.channelP(Signal.constant);
  exports["channel"] = channel;
  exports["send"] = send;
  exports["subscribe"] = $foreign.subscribe;
})(PS["Signal.Channel"] = PS["Signal.Channel"] || {});
(function(exports) {// module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.mouseButtonP =
    function mouseButtonP(constant) {
      return function(button) {
        return function() {
          var out = constant(false);
          window.addEventListener("mousedown", function(e) {
            if (e.button === button) out.set(true);
          });
          window.addEventListener("mouseup", function(e) {
            if (e.button === button) out.set(false);
          });
          return out;
        };
      };
    };

  exports.touchP =
    function touchP(constant) {
      var out = constant([]);
      function report(e) {
        var touches = [], i, l = e.touches.length;
        for (i = 0; i < l; i++) touches.push(e.touches.item(i));
        out.set(touches);
      }
      window.addEventListener("touchstart", report);
      window.addEventListener("touchend", report);
      window.addEventListener("touchmove", report);
      window.addEventListener("touchcancel", report);
      return function() {
        return out;
      };
    };

  exports.mousePosP =
    function mousePosP(constant) {
      var out = constant({x:0,y:0});
      window.addEventListener('mousemove', function(e) {
        if (e.pageX !== undefined && e.pageY !== undefined) {
          out.set({x: e.pageX, y: e.pageY});
        } else if (e.clientX !== undefined && e.clientY !== undefined) {
          out.set({
            x: e.clientX + document.body.scrollLeft +
               document.documentElement.scrollLeft,
            y: e.clientY + document.body.scrollTop +
               document.documentElement.scrollTop
          });
        } else {
          throw new Error('Mouse event has no coordinates I recognise!');
        }
      });
      return function() {
        return out;
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };

  exports.windowDimensionsP = function windowDimensionsP(constant) {
    var out = constant({ w: window.innerWidth, h: window.innerHeight });
    window.addEventListener("resize", function() {
      out.set({ w: window.innerWidth, h: window.innerHeight });
    });
    return function() {
      return out;
    }
  }
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];        
  var windowDimensions = $foreign.windowDimensionsP(Signal.constant);
  var touch = $foreign.touchP(Signal.constant);
  var tap = function __do() {
      var v = touch();
      return Signal.flippedMap(Signal.functorSignal)(v)(function (t) {
          if (t.length === 0) {
              return false;
          };
          return true;
      });
  };
  var mousePos = $foreign.mousePosP(Signal.constant);
  var mouseButton = $foreign.mouseButtonP(Signal.constant);
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["animationFrame"] = animationFrame;
  exports["keyPressed"] = keyPressed;
  exports["mouseButton"] = mouseButton;
  exports["mousePos"] = mousePos;
  exports["tap"] = tap;
  exports["touch"] = touch;
  exports["windowDimensions"] = windowDimensions;
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var GPU = PS["GPU"];
  var GPU_DSL = PS["GPU.DSL"];
  var Prelude = PS["Prelude"];        
  var def = {
      output: [ 1 ]
  };
  var identity = function (dictShow) {
      var body = Data_Show.show(GPU_DSL.showBlock)(GPU_DSL["return"](GPU_DSL.read("x")));
      return GPU.makeK1(def)(body)("x");
  };
  var matMult = function (n) {
      return function (m) {
          var i = GPU_DSL.read("i");
          var d2 = Data_Array.length(n);
          var d1 = (function () {
              var v = Data_Array.index(m)(0);
              if (v instanceof Data_Maybe.Just) {
                  return Data_Array.length(v.value0);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return 0;
              };
              throw new Error("Failed pattern match at Test line 47, column 10 - line 51, column 5: " + [ v.constructor.name ]);
          })();
          var opts = (function () {
              var $5 = {};
              for (var $6 in def) {
                  if ({}.hasOwnProperty.call(def, $6)) {
                      $5[$6] = def[$6];
                  };
              };
              $5.output = [ d1, d2 ];
              return $5;
          })();
          var body = new GPU_DSL.S(GPU_DSL["var"]("sum"), new GPU_DSL.S(GPU_DSL.set("sum")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(new GPU_DSL.For("i", 0, d1 - 1 | 0, new GPU_DSL.S(GPU_DSL.set("sum")(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.read("sum"))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at2("A")(GPU_DSL.ThreadY.value)(i))(GPU_DSL.at2("B")(i)(GPU_DSL.ThreadX.value)))), GPU_DSL.end)), GPU_DSL["return"](GPU_DSL.read("sum")))));
          return GPU.makeK2(opts)(Data_Show.show(GPU_DSL.showBlock)(body))("A")("B")(n)(m);
      };
  };
  var testMultMatrix = (function () {
      var b = [ [ 0, 1, 3 ], [ 1, 1, 3 ], [ 1, 1, 3 ] ];
      var a = [ [ 1, 1, 3 ], [ 0, 1, 3 ], [ 12, 12, 12 ] ];
      return Data_Show.show(Data_Show.showArray(Data_Show.showArray(Data_Show.showInt)))(matMult(a)(b));
  })();
  var testIf = (function () {
      var body = new GPU_DSL.S(GPU_DSL["var"]("res"), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Gt(GPU_DSL.read("a"), new GPU_DSL.Num(23.0)), new GPU_DSL.S(GPU_DSL.set("res")(GPU_DSL.read("a")), GPU_DSL.end), new GPU_DSL.S(GPU_DSL.set("res")(GPU_DSL.read("b")), GPU_DSL.end)), GPU_DSL["return"](GPU_DSL.read("res"))));
      return GPU.makeK2(def)(Data_Show.show(GPU_DSL.showBlock)(body))("a")("b");
  })();
  exports["def"] = def;
  exports["identity"] = identity;
  exports["matMult"] = matMult;
  exports["testIf"] = testIf;
  exports["testMultMatrix"] = testMultMatrix;
})(PS["Test"] = PS["Test"] || {});
(function(exports) {
    "use strict";

  exports["assert'"] = function (message) {
    return function (success) {
      return function () {
        if (!success) throw new Error(message);
        return {};
      };
    };
  };

  exports.checkThrows = function (fn) {
    return function () {
      try {
        fn();
        return false;
      } catch (e) {
        if (e instanceof Error) return true;
        var err = new Error("Threw something other than an Error");
        err.something = e;
        throw err;
      }
    };
  };
})(PS["Test.Assert"] = PS["Test.Assert"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Test.Assert"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];        
  var assertThrows$prime = function (msg) {
      return function (fn) {
          return Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)($foreign["assert'"](msg))($foreign.checkThrows(fn));
      };
  };
  var assertThrows = assertThrows$prime("Assertion failed: An error should have been thrown");
  var assert = $foreign["assert'"]("Assertion failed");
  exports["assert"] = assert;
  exports["assertThrows"] = assertThrows;
  exports["assertThrows'"] = assertThrows$prime;
  exports["assert'"] = $foreign["assert'"];
})(PS["Test.Assert"] = PS["Test.Assert"] || {});