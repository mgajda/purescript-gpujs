// Generated by psc-bundle 0.11.6
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["apply"] = apply;
  exports["applyFlipped"] = applyFlipped;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 12, column 1 - line 12, column 37: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];        
  var showUnit = new Data_Show.Show(function (v) {
      return "unit";
  });
  exports["showUnit"] = showUnit;
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  var flap = function (dictFunctor) {
      return function (ff) {
          return function (x) {
              return map(dictFunctor)(function (f) {
                  return f(x);
              })(ff);
          };
      };
  };
  exports["Functor"] = Functor;
  exports["flap"] = flap;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Show = PS["Data.Show"];        
  var Void = function (x) {
      return x;
  };
  var absurd = function (a) {
      var spin = function ($copy_v) {
          var $tco_result;
          function $tco_loop(v) {
              $copy_v = v;
              return;
          };
          while (!false) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return spin(a);
  };
  var showVoid = new Data_Show.Show(absurd);
  exports["absurd"] = absurd;
  exports["showVoid"] = showVoid;
})(PS["Data.Void"] = PS["Data.Void"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };
  var semigroupVoid = new Semigroup(function (v) {
      return Data_Void.absurd;
  });
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupVoid"] = semigroupVoid;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Data_Functor.functorArray;
  }, Data_Semigroup.append(Data_Semigroup.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
  exports["altArray"] = altArray;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };
  var applyFn = new Apply(function () {
      return Data_Functor.functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  var lift3 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                  };
              };
          };
      };
  };
  var lift4 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                      };
                  };
              };
          };
      };
  };
  var lift5 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["lift3"] = lift3;
  exports["lift4"] = lift4;
  exports["lift5"] = lift5;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 62, column 1 - line 62, column 65: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeFn = new Applicative(function () {
      return Control_Apply.applyFn;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeFn"] = applicativeFn;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  var alternativeArray = new Alternative(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Plus.plusArray;
  });
  exports["Alternative"] = Alternative;
  exports["alternativeArray"] = alternativeArray;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Function = PS["Data.Function"];        
  var Biapply = function (Bifunctor0, biapply) {
      this.Bifunctor0 = Bifunctor0;
      this.biapply = biapply;
  };
  var biapply = function (dict) {
      return dict.biapply;
  };
  var biapplyFirst = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.id(Control_Category.categoryFn))))(a))(b);
          };
      };
  };
  var biapplySecond = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(Data_Function["const"])(Data_Function["const"]))(a))(b);
          };
      };
  };
  var bilift2 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b);
                  };
              };
          };
      };
  };
  var bilift3 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return function (c) {
                          return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply.Bifunctor0())(f)(g))(a))(b))(c);
                      };
                  };
              };
          };
      };
  };
  exports["Biapply"] = Biapply;
  exports["biapply"] = biapply;
  exports["biapplyFirst"] = biapplyFirst;
  exports["biapplySecond"] = biapplySecond;
  exports["bilift2"] = bilift2;
  exports["bilift3"] = bilift3;
})(PS["Control.Biapply"] = PS["Control.Biapply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Biapply = PS["Control.Biapply"];        
  var Biapplicative = function (Biapply0, bipure) {
      this.Biapply0 = Biapply0;
      this.bipure = bipure;
  };
  var bipure = function (dict) {
      return dict.bipure;
  };
  exports["Biapplicative"] = Biapplicative;
  exports["bipure"] = bipure;
})(PS["Control.Biapplicative"] = PS["Control.Biapplicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };
  var bindFn = new Bind(function () {
      return Control_Apply.applyFn;
  }, function (m) {
      return function (f) {
          return function (x) {
              return f(m(x))(x);
          };
      };
  });
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var ifM = function (dictBind) {
      return function (cond) {
          return function (t) {
              return function (f) {
                  return bind(dictBind)(cond)(function (cond$prime) {
                      if (cond$prime) {
                          return t;
                      };
                      return f;
                  });
              };
          };
      };
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["Discard"] = Discard;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discard"] = discard;
  exports["ifM"] = ifM;
  exports["join"] = join;
  exports["bindFn"] = bindFn;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Extend = function (Functor0, extend) {
      this.Functor0 = Functor0;
      this.extend = extend;
  };
  var extendFn = function (dictSemigroup) {
      return new Extend(function () {
          return Data_Functor.functorFn;
      }, function (f) {
          return function (g) {
              return function (w) {
                  return f(function (w$prime) {
                      return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                  });
              };
          };
      });
  };
  var extend = function (dict) {
      return dict.extend;
  };
  var extendFlipped = function (dictExtend) {
      return function (w) {
          return function (f) {
              return extend(dictExtend)(f)(w);
          };
      };
  };
  var duplicate = function (dictExtend) {
      return extend(dictExtend)(Control_Category.id(Control_Category.categoryFn));
  };
  var composeCoKleisliFlipped = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return f(extend(dictExtend)(g)(w));
              };
          };
      };
  };
  var composeCoKleisli = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return g(extend(dictExtend)(f)(w));
              };
          };
      };
  };
  exports["Extend"] = Extend;
  exports["composeCoKleisli"] = composeCoKleisli;
  exports["composeCoKleisliFlipped"] = composeCoKleisliFlipped;
  exports["duplicate"] = duplicate;
  exports["extend"] = extend;
  exports["extendFlipped"] = extendFlipped;
  exports["extendFn"] = extendFn;
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor = PS["Data.Functor"];        
  var Comonad = function (Extend0, extract) {
      this.Extend0 = Extend0;
      this.extract = extract;
  };
  var extract = function (dict) {
      return dict.extract;
  };
  exports["Comonad"] = Comonad;
  exports["extract"] = extract;
})(PS["Control.Comonad"] = PS["Control.Comonad"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Unit = PS["Data.Unit"];        
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["defer"] = defer;
  exports["fix"] = fix;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var whenM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                  return Control_Applicative.when(dictMonad.Applicative0())(v)(m);
              });
          };
      };
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(v)(m);
              });
          };
      };
  };
  var monadFn = new Monad(function () {
      return Control_Applicative.applicativeFn;
  }, function () {
      return Control_Bind.bindFn;
  });
  var monadArray = new Monad(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Bind.bindArray;
  });
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(v));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
  exports["liftM1"] = liftM1;
  exports["unlessM"] = unlessM;
  exports["whenM"] = whenM;
  exports["monadFn"] = monadFn;
  exports["monadArray"] = monadArray;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.untilE = function (f) {
    return function () {
      while (!f());
      return {};
    };
  };

  exports.whileE = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
        return {};
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["forE"] = $foreign.forE;
  exports["foreachE"] = $foreign.foreachE;
  exports["runPure"] = $foreign.runPure;
  exports["untilE"] = $foreign.untilE;
  exports["whileE"] = $foreign.whileE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
  exports["monadEffEff"] = monadEffEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.warn = function (s) {
    return function () {
      console.warn(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };

  exports.info = function (s) {
    return function () {
      console.info(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];        
  var warnShow = function (dictShow) {
      return function (a) {
          return $foreign.warn(Data_Show.show(dictShow)(a));
      };
  };
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  var infoShow = function (dictShow) {
      return function (a) {
          return $foreign.info(Data_Show.show(dictShow)(a));
      };
  };
  var errorShow = function (dictShow) {
      return function (a) {
          return $foreign.error(Data_Show.show(dictShow)(a));
      };
  };
  exports["errorShow"] = errorShow;
  exports["infoShow"] = infoShow;
  exports["logShow"] = logShow;
  exports["warnShow"] = warnShow;
  exports["error"] = $foreign.error;
  exports["info"] = $foreign.info;
  exports["log"] = $foreign.log;
  exports["warn"] = $foreign.warn;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.stackImpl = function (just) {
    return function (nothing) {
      return function (e) {
        return e.stack ? just(e.stack) : nothing;
      };
    };
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.refIneq = function (r1) {
    return function (r2) {
      return r1 !== r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Eq1 = function (eq1) {
      this.eq1 = eq1;
  };
  var eqVoid = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq1 = function (dict) {
      return dict.eq1;
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var eq1Array = new Eq1(function (dictEq) {
      return eq(eqArray(dictEq));
  });
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  var notEq1 = function (dictEq1) {
      return function (dictEq) {
          return function (x) {
              return function (y) {
                  return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
              };
          };
      };
  };
  exports["Eq"] = Eq;
  exports["Eq1"] = Eq1;
  exports["eq"] = eq;
  exports["eq1"] = eq1;
  exports["notEq"] = notEq;
  exports["notEq1"] = notEq1;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqVoid"] = eqVoid;
  exports["eqArray"] = eqArray;
  exports["eq1Array"] = eq1Array;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var underF2 = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($50) {
                              return function ($51) {
                                  return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(Data_Function.on(f)(Data_Functor.map(dictFunctor)(wrap(dictNewtype)))($50)($51));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var underF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($52) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($52)));
                          };
                      };
                  };
              };
          };
      };
  };
  var under2 = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($53) {
                      return function ($54) {
                          return unwrap(dictNewtype1)(Data_Function.on(f)(wrap(dictNewtype))($53)($54));
                      };
                  };
              };
          };
      };
  };
  var under = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($55) {
                      return unwrap(dictNewtype1)(f(wrap(dictNewtype)($55)));
                  };
              };
          };
      };
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap(dictNewtype);
      };
  };
  var traverse = function (dictFunctor) {
      return function (dictNewtype) {
          return function (v) {
              return function (f) {
                  return function ($56) {
                      return Data_Functor.map(dictFunctor)(wrap(dictNewtype))(f(unwrap(dictNewtype)($56)));
                  };
              };
          };
      };
  };
  var overF2 = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($57) {
                              return function ($58) {
                                  return Data_Functor.map(dictFunctor1)(wrap(dictNewtype1))(Data_Function.on(f)(Data_Functor.map(dictFunctor)(unwrap(dictNewtype)))($57)($58));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var overF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($59) {
                              return Data_Functor.map(dictFunctor1)(wrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(unwrap(dictNewtype))($59)));
                          };
                      };
                  };
              };
          };
      };
  };
  var over2 = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($60) {
                      return function ($61) {
                          return wrap(dictNewtype1)(Data_Function.on(f)(unwrap(dictNewtype))($60)($61));
                      };
                  };
              };
          };
      };
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($62) {
                      return wrap(dictNewtype1)(f(unwrap(dictNewtype)($62)));
                  };
              };
          };
      };
  };
  var op = function (dictNewtype) {
      return un(dictNewtype);
  };
  var collect = function (dictFunctor) {
      return function (dictNewtype) {
          return function (v) {
              return function (f) {
                  return function ($63) {
                      return wrap(dictNewtype)(f(Data_Functor.map(dictFunctor)(unwrap(dictNewtype))($63)));
                  };
              };
          };
      };
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  var ala = function (dictFunctor) {
      return function (dictNewtype) {
          return function (dictNewtype1) {
              return function (v) {
                  return function (f) {
                      return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["ala"] = ala;
  exports["alaF"] = alaF;
  exports["collect"] = collect;
  exports["op"] = op;
  exports["over"] = over;
  exports["over2"] = over2;
  exports["overF"] = overF;
  exports["overF2"] = overF2;
  exports["traverse"] = traverse;
  exports["un"] = un;
  exports["under"] = under;
  exports["under2"] = under2;
  exports["underF"] = underF;
  exports["underF2"] = underF2;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
    "use strict";

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var showOrdering = new Data_Show.Show(function (v) {
      if (v instanceof LT) {
          return "LT";
      };
      if (v instanceof GT) {
          return "GT";
      };
      if (v instanceof EQ) {
          return "EQ";
      };
      throw new Error("Failed pattern match at Data.Ordering line 26, column 1 - line 26, column 39: " + [ v.constructor.name ]);
  });
  var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          if (v instanceof EQ) {
              return v1;
          };
          throw new Error("Failed pattern match at Data.Ordering line 21, column 1 - line 21, column 49: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var invert = function (v) {
      if (v instanceof GT) {
          return LT.value;
      };
      if (v instanceof EQ) {
          return EQ.value;
      };
      if (v instanceof LT) {
          return GT.value;
      };
      throw new Error("Failed pattern match at Data.Ordering line 33, column 1 - line 33, column 31: " + [ v.constructor.name ]);
  };
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["invert"] = invert;
  exports["eqOrdering"] = eqOrdering;
  exports["semigroupOrdering"] = semigroupOrdering;
  exports["showOrdering"] = showOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringUnit = new Semiring(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, Data_Unit.unit, Data_Unit.unit);
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  var semiringFn = function (dictSemiring) {
      return new Semiring(function (f) {
          return function (g) {
              return function (x) {
                  return add(dictSemiring)(f(x))(g(x));
              };
          };
      }, function (f) {
          return function (g) {
              return function (x) {
                  return mul(dictSemiring)(f(x))(g(x));
              };
          };
      }, function (v) {
          return one(dictSemiring);
      }, function (v) {
          return zero(dictSemiring);
      });
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringFn"] = semiringFn;
  exports["semiringUnit"] = semiringUnit;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var ringUnit = new Ring(function () {
      return Data_Semiring.semiringUnit;
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var ringFn = function (dictRing) {
      return new Ring(function () {
          return Data_Semiring.semiringFn(dictRing.Semiring0());
      }, function (f) {
          return function (g) {
              return function (x) {
                  return sub(dictRing)(f(x))(g(x));
              };
          };
      });
  };
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
  exports["ringUnit"] = ringUnit;
  exports["ringFn"] = ringFn;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };
  var Ord1 = function (Eq10, compare1) {
      this.Eq10 = Eq10;
      this.compare1 = compare1;
  };
  var ordVoid = new Ord(function () {
      return Data_Eq.eqVoid;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordUnit = new Ord(function () {
      return Data_Eq.eqUnit;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordOrdering = new Ord(function () {
      return Data_Ordering.eqOrdering;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          throw new Error("Failed pattern match at Data.Ord line 68, column 1 - line 68, column 37: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordBoolean = new Ord(function () {
      return Data_Eq.eqBoolean;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare1 = function (dict) {
      return dict.compare1;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return Data_Function.on(compare(dictOrd))(f);
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $33 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($33) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 114, column 3 - line 117, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return Data_Eq.eqArray(dictOrd.Eq0());
      }, (function () {
          var toDelta = function (x) {
              return function (y) {
                  var v = compare(dictOrd)(x)(y);
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Ord line 61, column 7 - line 66, column 1: " + [ v.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
              };
          };
      })());
  };
  var ord1Array = new Ord1(function () {
      return Data_Eq.eq1Array;
  }, function (dictOrd) {
      return compare(ordArray(dictOrd));
  });
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  if (lessThan(dictOrd)(x)(low)) {
                      return false;
                  };
                  if (greaterThan(dictOrd)(x)(hi)) {
                      return false;
                  };
                  return true;
              };
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $42 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($42) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["Ord1"] = Ord1;
  exports["abs"] = abs;
  exports["between"] = between;
  exports["clamp"] = clamp;
  exports["compare"] = compare;
  exports["compare1"] = compare1;
  exports["comparing"] = comparing;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["lessThan"] = lessThan;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["max"] = max;
  exports["min"] = min;
  exports["signum"] = signum;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordUnit"] = ordUnit;
  exports["ordVoid"] = ordVoid;
  exports["ordArray"] = ordArray;
  exports["ordOrdering"] = ordOrdering;
  exports["ord1Array"] = ord1Array;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Clown = function (x) {
      return x;
  };
  var showClown = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Clown " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordClown = function (dictOrd) {
      return dictOrd;
  };
  var newtypeClown = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Clown);
  var functorClown = new Data_Functor.Functor(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var eqClown = function (dictEq) {
      return dictEq;
  };
  var bifunctorClown = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (v) {
              return function (v1) {
                  return Data_Functor.map(dictFunctor)(f)(v1);
              };
          };
      });
  };
  var biapplyClown = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorClown(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(dictApply)(v)(v1);
          };
      });
  };
  var biapplicativeClown = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyClown(dictApplicative.Apply0());
      }, function (a) {
          return function (v) {
              return Control_Applicative.pure(dictApplicative)(a);
          };
      });
  };
  exports["Clown"] = Clown;
  exports["newtypeClown"] = newtypeClown;
  exports["eqClown"] = eqClown;
  exports["ordClown"] = ordClown;
  exports["showClown"] = showClown;
  exports["functorClown"] = functorClown;
  exports["bifunctorClown"] = bifunctorClown;
  exports["biapplyClown"] = biapplyClown;
  exports["biapplicativeClown"] = biapplicativeClown;
})(PS["Data.Bifunctor.Clown"] = PS["Data.Bifunctor.Clown"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Flip = function (x) {
      return x;
  };
  var showFlip = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Flip " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordFlip = function (dictOrd) {
      return dictOrd;
  };
  var newtypeFlip = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Flip);
  var functorFlip = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.lmap(dictBifunctor)(f)(v);
          };
      });
  };
  var eqFlip = function (dictEq) {
      return dictEq;
  };
  var bifunctorFlip = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Bifunctor.bimap(dictBifunctor)(g)(f)(v);
              };
          };
      });
  };
  var biapplyFlip = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorFlip(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeFlip = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyFlip(dictBiapplicative.Biapply0());
      }, function (a) {
          return function (b) {
              return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
          };
      });
  };
  exports["Flip"] = Flip;
  exports["newtypeFlip"] = newtypeFlip;
  exports["eqFlip"] = eqFlip;
  exports["ordFlip"] = ordFlip;
  exports["showFlip"] = showFlip;
  exports["functorFlip"] = functorFlip;
  exports["bifunctorFlip"] = bifunctorFlip;
  exports["biapplyFlip"] = biapplyFlip;
  exports["biapplicativeFlip"] = biapplicativeFlip;
})(PS["Data.Bifunctor.Flip"] = PS["Data.Bifunctor.Flip"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Joker = function (x) {
      return x;
  };
  var showJoker = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Joker " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordJoker = function (dictOrd) {
      return dictOrd;
  };
  var newtypeJoker = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Joker);
  var functorJoker = function (dictFunctor) {
      return new Data_Functor.Functor(function (g) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(g)(v);
          };
      });
  };
  var eqJoker = function (dictEq) {
      return dictEq;
  };
  var bifunctorJoker = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (v) {
          return function (g) {
              return function (v1) {
                  return Data_Functor.map(dictFunctor)(g)(v1);
              };
          };
      });
  };
  var biapplyJoker = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorJoker(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(dictApply)(v)(v1);
          };
      });
  };
  var biapplicativeJoker = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyJoker(dictApplicative.Apply0());
      }, function (v) {
          return function (b) {
              return Control_Applicative.pure(dictApplicative)(b);
          };
      });
  };
  exports["Joker"] = Joker;
  exports["newtypeJoker"] = newtypeJoker;
  exports["eqJoker"] = eqJoker;
  exports["ordJoker"] = ordJoker;
  exports["showJoker"] = showJoker;
  exports["functorJoker"] = functorJoker;
  exports["bifunctorJoker"] = bifunctorJoker;
  exports["biapplyJoker"] = biapplyJoker;
  exports["biapplicativeJoker"] = biapplicativeJoker;
})(PS["Data.Bifunctor.Joker"] = PS["Data.Bifunctor.Joker"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, Data_Unit.unit, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return Data_Unit.unit;
  }, Data_Unit.unit);
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraUnit"] = heytingAlgebraUnit;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var showProduct = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var eqProduct = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordProduct = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqProduct(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  var bifunctorProduct = function (dictBifunctor) {
      return function (dictBifunctor1) {
          return new Data_Bifunctor.Bifunctor(function (f) {
              return function (g) {
                  return function (v) {
                      return new Product(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                  };
              };
          });
      };
  };
  var biapplyProduct = function (dictBiapply) {
      return function (dictBiapply1) {
          return new Control_Biapply.Biapply(function () {
              return bifunctorProduct(dictBiapply.Bifunctor0())(dictBiapply1.Bifunctor0());
          }, function (v) {
              return function (v1) {
                  return new Product(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var biapplicativeProduct = function (dictBiapplicative) {
      return function (dictBiapplicative1) {
          return new Control_Biapplicative.Biapplicative(function () {
              return biapplyProduct(dictBiapplicative.Biapply0())(dictBiapplicative1.Biapply0());
          }, function (a) {
              return function (b) {
                  return new Product(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
              };
          });
      };
  };
  exports["Product"] = Product;
  exports["eqProduct"] = eqProduct;
  exports["ordProduct"] = ordProduct;
  exports["showProduct"] = showProduct;
  exports["bifunctorProduct"] = bifunctorProduct;
  exports["biapplyProduct"] = biapplyProduct;
  exports["biapplicativeProduct"] = biapplicativeProduct;
})(PS["Data.Bifunctor.Product"] = PS["Data.Bifunctor.Product"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Wrap = function (x) {
      return x;
  };
  var showWrap = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Wrap " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordWrap = function (dictOrd) {
      return dictOrd;
  };
  var newtypeWrap = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Wrap);
  var functorWrap = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.rmap(dictBifunctor)(f)(v);
          };
      });
  };
  var eqWrap = function (dictEq) {
      return dictEq;
  };
  var bifunctorWrap = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function (v) {
                  return Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v);
              };
          };
      });
  };
  var biapplyWrap = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorWrap(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeWrap = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyWrap(dictBiapplicative.Biapply0());
      }, function (a) {
          return function (b) {
              return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
          };
      });
  };
  exports["Wrap"] = Wrap;
  exports["newtypeWrap"] = newtypeWrap;
  exports["eqWrap"] = eqWrap;
  exports["ordWrap"] = ordWrap;
  exports["showWrap"] = showWrap;
  exports["functorWrap"] = functorWrap;
  exports["bifunctorWrap"] = bifunctorWrap;
  exports["biapplyWrap"] = biapplyWrap;
  exports["biapplicativeWrap"] = biapplicativeWrap;
})(PS["Data.Bifunctor.Wrap"] = PS["Data.Bifunctor.Wrap"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadZero = function (Alternative1, Monad0) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
  };
  var monadZeroArray = new MonadZero(function () {
      return Control_Alternative.alternativeArray;
  }, function () {
      return Control_Monad.monadArray;
  });
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
          };
          throw new Error("Failed pattern match at Control.MonadZero line 54, column 1 - line 54, column 52: " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
  exports["monadZeroArray"] = monadZeroArray;
})(PS["Control.MonadZero"] = PS["Control.MonadZero"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };
  var boundedUnit = new Bounded(function () {
      return Data_Ord.ordUnit;
  }, Data_Unit.unit, Data_Unit.unit);
  var boundedOrdering = new Bounded(function () {
      return Data_Ord.ordOrdering;
  }, Data_Ordering.LT.value, Data_Ordering.GT.value);
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var boundedBoolean = new Bounded(function () {
      return Data_Ord.ordBoolean;
  }, false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
  exports["boundedOrdering"] = boundedOrdering;
  exports["boundedUnit"] = boundedUnit;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Functor = PS["Data.Functor"];        
  var Invariant = function (imap) {
      this.imap = imap;
  };
  var imapF = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(f);
          };
      };
  };
  var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
  var invariantFn = new Invariant(imapF(Data_Functor.functorFn));
  var imap = function (dict) {
      return dict.imap;
  };
  exports["Invariant"] = Invariant;
  exports["imap"] = imap;
  exports["imapF"] = imapF;
  exports["invariantFn"] = invariantFn;
  exports["invariantArray"] = invariantArray;
})(PS["Data.Functor.Invariant"] = PS["Data.Functor.Invariant"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var BooleanAlgebra = function (HeytingAlgebra0) {
      this.HeytingAlgebra0 = HeytingAlgebra0;
  };
  var booleanAlgebraUnit = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraUnit;
  });
  var booleanAlgebraFn = function (dictBooleanAlgebra) {
      return new BooleanAlgebra(function () {
          return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());
      });
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraBoolean;
  });
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["booleanAlgebraUnit"] = booleanAlgebraUnit;
  exports["booleanAlgebraFn"] = booleanAlgebraFn;
})(PS["Data.BooleanAlgebra"] = PS["Data.BooleanAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  };
  var commutativeRingUnit = new CommutativeRing(function () {
      return Data_Ring.ringUnit;
  });
  var commutativeRingNumber = new CommutativeRing(function () {
      return Data_Ring.ringNumber;
  });
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  var commutativeRingFn = function (dictCommutativeRing) {
      return new CommutativeRing(function () {
          return Data_Ring.ringFn(dictCommutativeRing.Ring0());
      });
  };
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
  exports["commutativeRingNumber"] = commutativeRingNumber;
  exports["commutativeRingUnit"] = commutativeRingUnit;
  exports["commutativeRingFn"] = commutativeRingFn;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];        
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var euclideanRingNumber = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingNumber;
  }, function (v) {
      return 1;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var lcm = function (dictEq) {
      return function (dictEuclideanRing) {
          return function (a) {
              return function (b) {
                  var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                  if ($8) {
                      return Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
                  };
                  return div(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
              };
          };
      };
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["gcd"] = gcd;
  exports["lcm"] = lcm;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
  exports["euclideanRingNumber"] = euclideanRingNumber;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, Data_Function["const"](mempty(dictMonoid)));
  };
  var power = function (dictMonoid) {
      return function (x) {
          var go = function (p) {
              if (p <= 0) {
                  return mempty(dictMonoid);
              };
              if (p === 1) {
                  return x;
              };
              if (p % 2 === 0) {
                  var x$prime = go(p / 2 | 0);
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
              };
              if (Data_Boolean.otherwise) {
                  var x$prime = go(p / 2 | 0);
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
              };
              throw new Error("Failed pattern match at Data.Monoid line 48, column 3 - line 48, column 17: " + [ p.constructor.name ]);
          };
          return go;
      };
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["power"] = power;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 207, column 1 - line 207, column 47: " + [ v.constructor.name ]);
      });
  };
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe line 176, column 1 - line 176, column 62: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Data_Unit.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 232, column 1 - line 232, column 62: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
  var fromMaybe$prime = function (a) {
      return maybe$prime(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar34) {
                  return $dollar34;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 270, column 1 - line 270, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var extendMaybe = new Control_Extend.Extend(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Nothing) {
              return Nothing.value;
          };
          return new Just(v(v1));
      };
  });
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMaybe(dictOrd.Eq0());
      }, function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Nothing) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Nothing) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 196, column 8 - line 196, column 51: " + [ x.constructor.name, y.constructor.name ]);
          };
      });
  };
  var eq1Maybe = new Data_Eq.Eq1(function (dictEq) {
      return Data_Eq.eq(eqMaybe(dictEq));
  });
  var ord1Maybe = new Data_Ord.Ord1(function () {
      return eq1Maybe;
  }, function (dictOrd) {
      return Data_Ord.compare(ordMaybe(dictOrd));
  });
  var boundedMaybe = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordMaybe(dictBounded.Ord0());
      }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 68, column 1 - line 68, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromJust"] = fromJust;
  exports["fromMaybe"] = fromMaybe;
  exports["fromMaybe'"] = fromMaybe$prime;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["maybe"] = maybe;
  exports["maybe'"] = maybe$prime;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["extendMaybe"] = extendMaybe;
  exports["invariantMaybe"] = invariantMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["eq1Maybe"] = eq1Maybe;
  exports["ordMaybe"] = ordMaybe;
  exports["ord1Maybe"] = ord1Maybe;
  exports["boundedMaybe"] = boundedMaybe;
  exports["showMaybe"] = showMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var First = function (x) {
      return x;
  };
  var showFirst = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });
  var ordFirst = function (dictOrd) {
      return Data_Maybe.ordMaybe(dictOrd);
  };
  var ord1First = Data_Maybe.ord1Maybe;
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  var monadFirst = Data_Maybe.monadMaybe;
  var invariantFirst = Data_Maybe.invariantMaybe;
  var functorFirst = Data_Maybe.functorMaybe;
  var extendFirst = Data_Maybe.extendMaybe;
  var eqFirst = function (dictEq) {
      return Data_Maybe.eqMaybe(dictEq);
  };
  var eq1First = Data_Maybe.eq1Maybe;
  var boundedFirst = function (dictBounded) {
      return Data_Maybe.boundedMaybe(dictBounded);
  };
  var bindFirst = Data_Maybe.bindMaybe;
  var applyFirst = Data_Maybe.applyMaybe;
  var applicativeFirst = Data_Maybe.applicativeMaybe;
  exports["First"] = First;
  exports["newtypeFirst"] = newtypeFirst;
  exports["eqFirst"] = eqFirst;
  exports["eq1First"] = eq1First;
  exports["ordFirst"] = ordFirst;
  exports["ord1First"] = ord1First;
  exports["boundedFirst"] = boundedFirst;
  exports["functorFirst"] = functorFirst;
  exports["invariantFirst"] = invariantFirst;
  exports["applyFirst"] = applyFirst;
  exports["applicativeFirst"] = applicativeFirst;
  exports["bindFirst"] = bindFirst;
  exports["monadFirst"] = monadFirst;
  exports["extendFirst"] = extendFirst;
  exports["showFirst"] = showFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Last = function (x) {
      return x;
  };
  var showLast = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
              return v1;
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return v;
          };
          throw new Error("Failed pattern match at Data.Maybe.Last line 53, column 1 - line 53, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordLast = function (dictOrd) {
      return Data_Maybe.ordMaybe(dictOrd);
  };
  var ord1Last = Data_Maybe.ord1Maybe;
  var newtypeLast = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Last);
  var monoidLast = new Data_Monoid.Monoid(function () {
      return semigroupLast;
  }, Data_Maybe.Nothing.value);
  var monadLast = Data_Maybe.monadMaybe;
  var invariantLast = Data_Maybe.invariantMaybe;
  var functorLast = Data_Maybe.functorMaybe;
  var extendLast = Data_Maybe.extendMaybe;
  var eqLast = function (dictEq) {
      return Data_Maybe.eqMaybe(dictEq);
  };
  var eq1Last = Data_Maybe.eq1Maybe;
  var boundedLast = function (dictBounded) {
      return Data_Maybe.boundedMaybe(dictBounded);
  };
  var bindLast = Data_Maybe.bindMaybe;
  var applyLast = Data_Maybe.applyMaybe;
  var applicativeLast = Data_Maybe.applicativeMaybe;
  exports["Last"] = Last;
  exports["newtypeLast"] = newtypeLast;
  exports["eqLast"] = eqLast;
  exports["eq1Last"] = eq1Last;
  exports["ordLast"] = ordLast;
  exports["ord1Last"] = ord1Last;
  exports["boundedLast"] = boundedLast;
  exports["functorLast"] = functorLast;
  exports["invariantLast"] = invariantLast;
  exports["applyLast"] = applyLast;
  exports["applicativeLast"] = applicativeLast;
  exports["bindLast"] = bindLast;
  exports["monadLast"] = monadLast;
  exports["extendLast"] = extendLast;
  exports["showLast"] = showLast;
  exports["semigroupLast"] = semigroupLast;
  exports["monoidLast"] = monoidLast;
})(PS["Data.Maybe.Last"] = PS["Data.Maybe.Last"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Additive = function (x) {
      return x;
  };
  var showAdditive = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupAdditive = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.add(dictSemiring)(v)(v1);
          };
      });
  };
  var ordAdditive = function (dictOrd) {
      return dictOrd;
  };
  var newtypeAdditive = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Additive);
  var monoidAdditive = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAdditive(dictSemiring);
      }, Data_Semiring.zero(dictSemiring));
  };
  var invariantAdditive = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorAdditive = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendAdditive = new Control_Extend.Extend(function () {
      return functorAdditive;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqAdditive = function (dictEq) {
      return dictEq;
  };
  var comonadAdditive = new Control_Comonad.Comonad(function () {
      return extendAdditive;
  }, Data_Newtype.unwrap(newtypeAdditive));
  var boundedAdditive = function (dictBounded) {
      return dictBounded;
  };
  var applyAdditive = new Control_Apply.Apply(function () {
      return functorAdditive;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindAdditive = new Control_Bind.Bind(function () {
      return applyAdditive;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeAdditive = new Control_Applicative.Applicative(function () {
      return applyAdditive;
  }, Additive);
  var monadAdditive = new Control_Monad.Monad(function () {
      return applicativeAdditive;
  }, function () {
      return bindAdditive;
  });
  exports["Additive"] = Additive;
  exports["newtypeAdditive"] = newtypeAdditive;
  exports["eqAdditive"] = eqAdditive;
  exports["ordAdditive"] = ordAdditive;
  exports["boundedAdditive"] = boundedAdditive;
  exports["functorAdditive"] = functorAdditive;
  exports["invariantAdditive"] = invariantAdditive;
  exports["applyAdditive"] = applyAdditive;
  exports["applicativeAdditive"] = applicativeAdditive;
  exports["bindAdditive"] = bindAdditive;
  exports["monadAdditive"] = monadAdditive;
  exports["extendAdditive"] = extendAdditive;
  exports["comonadAdditive"] = comonadAdditive;
  exports["showAdditive"] = showAdditive;
  exports["semigroupAdditive"] = semigroupAdditive;
  exports["monoidAdditive"] = monoidAdditive;
})(PS["Data.Monoid.Additive"] = PS["Data.Monoid.Additive"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Conj = function (x) {
      return x;
  };
  var showConj = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringConj = function (dictHeytingAlgebra) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var ordConj = function (dictOrd) {
      return dictOrd;
  };
  var newtypeConj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Conj);
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var invariantConj = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorConj = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendConj = new Control_Extend.Extend(function () {
      return functorConj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqConj = function (dictEq) {
      return dictEq;
  };
  var comonadConj = new Control_Comonad.Comonad(function () {
      return extendConj;
  }, Data_Newtype.unwrap(newtypeConj));
  var boundedConj = function (dictBounded) {
      return dictBounded;
  };
  var applyConj = new Control_Apply.Apply(function () {
      return functorConj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindConj = new Control_Bind.Bind(function () {
      return applyConj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeConj = new Control_Applicative.Applicative(function () {
      return applyConj;
  }, Conj);
  var monadConj = new Control_Monad.Monad(function () {
      return applicativeConj;
  }, function () {
      return bindConj;
  });
  exports["Conj"] = Conj;
  exports["newtypeConj"] = newtypeConj;
  exports["eqConj"] = eqConj;
  exports["ordConj"] = ordConj;
  exports["boundedConj"] = boundedConj;
  exports["functorConj"] = functorConj;
  exports["invariantConj"] = invariantConj;
  exports["applyConj"] = applyConj;
  exports["applicativeConj"] = applicativeConj;
  exports["bindConj"] = bindConj;
  exports["monadConj"] = monadConj;
  exports["extendConj"] = extendConj;
  exports["comonadConj"] = comonadConj;
  exports["showConj"] = showConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
  exports["semiringConj"] = semiringConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Disj = function (x) {
      return x;
  };
  var showDisj = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringDisj = function (dictHeytingAlgebra) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var ordDisj = function (dictOrd) {
      return dictOrd;
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  var invariantDisj = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorDisj = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDisj = new Control_Extend.Extend(function () {
      return functorDisj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDisj = function (dictEq) {
      return dictEq;
  };
  var comonadDisj = new Control_Comonad.Comonad(function () {
      return extendDisj;
  }, Data_Newtype.unwrap(newtypeDisj));
  var boundedDisj = function (dictBounded) {
      return dictBounded;
  };
  var applyDisj = new Control_Apply.Apply(function () {
      return functorDisj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDisj = new Control_Bind.Bind(function () {
      return applyDisj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDisj = new Control_Applicative.Applicative(function () {
      return applyDisj;
  }, Disj);
  var monadDisj = new Control_Monad.Monad(function () {
      return applicativeDisj;
  }, function () {
      return bindDisj;
  });
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["eqDisj"] = eqDisj;
  exports["ordDisj"] = ordDisj;
  exports["boundedDisj"] = boundedDisj;
  exports["functorDisj"] = functorDisj;
  exports["invariantDisj"] = invariantDisj;
  exports["applyDisj"] = applyDisj;
  exports["applicativeDisj"] = applicativeDisj;
  exports["bindDisj"] = bindDisj;
  exports["monadDisj"] = monadDisj;
  exports["extendDisj"] = extendDisj;
  exports["comonadDisj"] = comonadDisj;
  exports["showDisj"] = showDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
  exports["semiringDisj"] = semiringDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Dual = function (x) {
      return x;
  };
  var showDual = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupDual = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v1)(v);
          };
      });
  };
  var ordDual = function (dictOrd) {
      return dictOrd;
  };
  var newtypeDual = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Dual);
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid.Semigroup0());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var invariantDual = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorDual = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDual = new Control_Extend.Extend(function () {
      return functorDual;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDual = function (dictEq) {
      return dictEq;
  };
  var comonadDual = new Control_Comonad.Comonad(function () {
      return extendDual;
  }, Data_Newtype.unwrap(newtypeDual));
  var boundedDual = function (dictBounded) {
      return dictBounded;
  };
  var applyDual = new Control_Apply.Apply(function () {
      return functorDual;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDual = new Control_Bind.Bind(function () {
      return applyDual;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDual = new Control_Applicative.Applicative(function () {
      return applyDual;
  }, Dual);
  var monadDual = new Control_Monad.Monad(function () {
      return applicativeDual;
  }, function () {
      return bindDual;
  });
  exports["Dual"] = Dual;
  exports["newtypeDual"] = newtypeDual;
  exports["eqDual"] = eqDual;
  exports["ordDual"] = ordDual;
  exports["boundedDual"] = boundedDual;
  exports["functorDual"] = functorDual;
  exports["invariantDual"] = invariantDual;
  exports["applyDual"] = applyDual;
  exports["applicativeDual"] = applicativeDual;
  exports["bindDual"] = bindDual;
  exports["monadDual"] = monadDual;
  exports["extendDual"] = extendDual;
  exports["comonadDual"] = comonadDual;
  exports["showDual"] = showDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];        
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function ($11) {
              return v(v1($11));
          };
      };
  });
  var newtypeEndo = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Endo);
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Control_Category.id(Control_Category.categoryFn));
  var invariantEndo = new Data_Functor_Invariant.Invariant(function (ab) {
      return function (ba) {
          return function (v) {
              return function ($12) {
                  return ab(v(ba($12)));
              };
          };
      };
  });
  exports["Endo"] = Endo;
  exports["newtypeEndo"] = newtypeEndo;
  exports["invariantEndo"] = invariantEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Multiplicative = function (x) {
      return x;
  };
  var showMultiplicative = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupMultiplicative = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.mul(dictSemiring)(v)(v1);
          };
      });
  };
  var ordMultiplicative = function (dictOrd) {
      return dictOrd;
  };
  var newtypeMultiplicative = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Multiplicative);
  var monoidMultiplicative = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMultiplicative(dictSemiring);
      }, Data_Semiring.one(dictSemiring));
  };
  var invariantMultiplicative = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorMultiplicative = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendMultiplicative = new Control_Extend.Extend(function () {
      return functorMultiplicative;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqMultiplicative = function (dictEq) {
      return dictEq;
  };
  var comonadMultiplicative = new Control_Comonad.Comonad(function () {
      return extendMultiplicative;
  }, Data_Newtype.unwrap(newtypeMultiplicative));
  var boundedMultiplicative = function (dictBounded) {
      return dictBounded;
  };
  var applyMultiplicative = new Control_Apply.Apply(function () {
      return functorMultiplicative;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindMultiplicative = new Control_Bind.Bind(function () {
      return applyMultiplicative;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
      return applyMultiplicative;
  }, Multiplicative);
  var monadMultiplicative = new Control_Monad.Monad(function () {
      return applicativeMultiplicative;
  }, function () {
      return bindMultiplicative;
  });
  exports["Multiplicative"] = Multiplicative;
  exports["newtypeMultiplicative"] = newtypeMultiplicative;
  exports["eqMultiplicative"] = eqMultiplicative;
  exports["ordMultiplicative"] = ordMultiplicative;
  exports["boundedMultiplicative"] = boundedMultiplicative;
  exports["functorMultiplicative"] = functorMultiplicative;
  exports["invariantMultiplicative"] = invariantMultiplicative;
  exports["applyMultiplicative"] = applyMultiplicative;
  exports["applicativeMultiplicative"] = applicativeMultiplicative;
  exports["bindMultiplicative"] = bindMultiplicative;
  exports["monadMultiplicative"] = monadMultiplicative;
  exports["extendMultiplicative"] = extendMultiplicative;
  exports["comonadMultiplicative"] = comonadMultiplicative;
  exports["showMultiplicative"] = showMultiplicative;
  exports["semigroupMultiplicative"] = semigroupMultiplicative;
  exports["monoidMultiplicative"] = monoidMultiplicative;
})(PS["Data.Monoid.Multiplicative"] = PS["Data.Monoid.Multiplicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var $$null = function (dictFoldable) {
      return foldr(dictFoldable)(function (v) {
          return function (v1) {
              return false;
          };
      })(true);
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($175) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($175));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var length = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(function (c) {
              return function (v) {
                  return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
              };
          })(Data_Semiring.zero(dictSemiring));
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $98 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($98) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 296, column 3 - line 296, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $102 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                          if ($102) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 309, column 3 - line 309, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var product = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  };
  var foldableMultiplicative = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 125, column 1 - line 125, column 41: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 125, column 1 - line 125, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 125, column 1 - line 125, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldableDual = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableDisj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableConj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableAdditive = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldl(dictFoldable)(function (acc) {
                  return function (x) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldableFirst = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldableLast = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(Data_Newtype.unwrap(Data_Monoid_Dual.newtypeDual)(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($176) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c)($176)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($177) {
                      return Data_Monoid_Endo.Endo(c($177));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var findMap = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return p(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($178) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($178));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($179) {
                  return !elem(dictFoldable)(dictEq)(x)($179);
              };
          };
      };
  };
  var or = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  var and = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["all"] = all;
  exports["and"] = and;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["findMap"] = findMap;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldlDefault"] = foldlDefault;
  exports["foldr"] = foldr;
  exports["foldrDefault"] = foldrDefault;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["length"] = length;
  exports["maximum"] = maximum;
  exports["maximumBy"] = maximumBy;
  exports["minimum"] = minimum;
  exports["minimumBy"] = minimumBy;
  exports["notElem"] = notElem;
  exports["null"] = $$null;
  exports["oneOf"] = oneOf;
  exports["or"] = or;
  exports["product"] = product;
  exports["sequence_"] = sequence_;
  exports["sum"] = sum;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableFirst"] = foldableFirst;
  exports["foldableLast"] = foldableLast;
  exports["foldableAdditive"] = foldableAdditive;
  exports["foldableDual"] = foldableDual;
  exports["foldableDisj"] = foldableDisj;
  exports["foldableConj"] = foldableConj;
  exports["foldableMultiplicative"] = foldableMultiplicative;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor_Clown = PS["Data.Bifunctor.Clown"];
  var Data_Bifunctor_Flip = PS["Data.Bifunctor.Flip"];
  var Data_Bifunctor_Joker = PS["Data.Bifunctor.Joker"];
  var Data_Bifunctor_Product = PS["Data.Bifunctor.Product"];
  var Data_Bifunctor_Wrap = PS["Data.Bifunctor.Wrap"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldr = function (dict) {
      return dict.bifoldr;
  };
  var bitraverse_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)(function ($97) {
                      return Control_Apply.applySecond(dictApplicative.Apply0())(f($97));
                  })(function ($98) {
                      return Control_Apply.applySecond(dictApplicative.Apply0())(g($98));
                  })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
              };
          };
      };
  };
  var bifor_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  var bisequence_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var bifoldl = function (dict) {
      return dict.bifoldl;
  };
  var bifoldableJoker = function (dictFoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (v) {
              return function (r) {
                  return function (v1) {
                      return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(r)(v1);
                  };
              };
          };
      }, function (v) {
          return function (r) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldl(dictFoldable)(r)(u)(v1);
                  };
              };
          };
      }, function (v) {
          return function (r) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldr(dictFoldable)(r)(u)(v1);
                  };
              };
          };
      });
  };
  var bifoldableClown = function (dictFoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (l) {
              return function (v) {
                  return function (v1) {
                      return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(l)(v1);
                  };
              };
          };
      }, function (l) {
          return function (v) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldl(dictFoldable)(l)(u)(v1);
                  };
              };
          };
      }, function (l) {
          return function (v) {
              return function (u) {
                  return function (v1) {
                      return Data_Foldable.foldr(dictFoldable)(l)(u)(v1);
                  };
              };
          };
      });
  };
  var bifoldMapDefaultR = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)(function ($99) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f($99));
                  })(function ($100) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(g($100));
                  })(Data_Monoid.mempty(dictMonoid));
              };
          };
      };
  };
  var bifoldMapDefaultL = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return bifoldl(dictBifoldable)(function (m) {
                      return function (a) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(f(a));
                      };
                  })(function (m) {
                      return function (b) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(m)(g(b));
                      };
                  })(Data_Monoid.mempty(dictMonoid));
              };
          };
      };
  };
  var bifoldMap = function (dict) {
      return dict.bifoldMap;
  };
  var bifoldableFlip = function (dictBifoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (r) {
              return function (l) {
                  return function (v) {
                      return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                  };
              };
          };
      }, function (r) {
          return function (l) {
              return function (u) {
                  return function (v) {
                      return bifoldl(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      }, function (r) {
          return function (l) {
              return function (u) {
                  return function (v) {
                      return bifoldr(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      });
  };
  var bifoldableWrap = function (dictBifoldable) {
      return new Bifoldable(function (dictMonoid) {
          return function (l) {
              return function (r) {
                  return function (v) {
                      return bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v);
                  };
              };
          };
      }, function (l) {
          return function (r) {
              return function (u) {
                  return function (v) {
                      return bifoldl(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      }, function (l) {
          return function (r) {
              return function (u) {
                  return function (v) {
                      return bifoldr(dictBifoldable)(l)(r)(u)(v);
                  };
              };
          };
      });
  };
  var bifoldlDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(Data_Newtype.unwrap(Data_Monoid_Dual.newtypeDual)(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($101) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(f)($101)));
                      })(function ($102) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(g)($102)));
                      })(p)))(z);
                  };
              };
          };
      };
  };
  var bifoldrDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Newtype.unwrap(Data_Monoid_Endo.newtypeEndo)(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo)(function ($103) {
                          return Data_Monoid_Endo.Endo(f($103));
                      })(function ($104) {
                          return Data_Monoid_Endo.Endo(g($104));
                      })(p))(z);
                  };
              };
          };
      };
  };
  var bifoldableProduct = function (dictBifoldable) {
      return function (dictBifoldable1) {
          return new Bifoldable(function (dictMonoid) {
              return function (l) {
                  return function (r) {
                      return function (v) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(bifoldMap(dictBifoldable)(dictMonoid)(l)(r)(v.value0))(bifoldMap(dictBifoldable1)(dictMonoid)(l)(r)(v.value1));
                      };
                  };
              };
          }, function (l) {
              return function (r) {
                  return function (u) {
                      return function (m) {
                          return bifoldlDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                      };
                  };
              };
          }, function (l) {
              return function (r) {
                  return function (u) {
                      return function (m) {
                          return bifoldrDefault(bifoldableProduct(dictBifoldable)(dictBifoldable1))(l)(r)(u)(m);
                      };
                  };
              };
          });
      };
  };
  var bifold = function (dictBifoldable) {
      return function (dictMonoid) {
          return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var biany = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($105) {
                      return Data_Newtype.unwrap(Data_Monoid_Disj.newtypeDisj)(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($106) {
                          return Data_Monoid_Disj.Disj(p($106));
                      })(function ($107) {
                          return Data_Monoid_Disj.Disj(q($107));
                      })($105));
                  };
              };
          };
      };
  };
  var biall = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($108) {
                      return Data_Newtype.unwrap(Data_Monoid_Conj.newtypeConj)(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra.HeytingAlgebra0()))(function ($109) {
                          return Data_Monoid_Conj.Conj(p($109));
                      })(function ($110) {
                          return Data_Monoid_Conj.Conj(q($110));
                      })($108));
                  };
              };
          };
      };
  };
  exports["Bifoldable"] = Bifoldable;
  exports["biall"] = biall;
  exports["biany"] = biany;
  exports["bifold"] = bifold;
  exports["bifoldMap"] = bifoldMap;
  exports["bifoldMapDefaultL"] = bifoldMapDefaultL;
  exports["bifoldMapDefaultR"] = bifoldMapDefaultR;
  exports["bifoldl"] = bifoldl;
  exports["bifoldlDefault"] = bifoldlDefault;
  exports["bifoldr"] = bifoldr;
  exports["bifoldrDefault"] = bifoldrDefault;
  exports["bifor_"] = bifor_;
  exports["bisequence_"] = bisequence_;
  exports["bitraverse_"] = bitraverse_;
  exports["bifoldableClown"] = bifoldableClown;
  exports["bifoldableJoker"] = bifoldableJoker;
  exports["bifoldableFlip"] = bifoldableFlip;
  exports["bifoldableProduct"] = bifoldableProduct;
  exports["bifoldableWrap"] = bifoldableWrap;
})(PS["Data.Bifoldable"] = PS["Data.Bifoldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Prelude = PS["Prelude"];        
  var StateL = function (x) {
      return x;
  };
  var StateR = function (x) {
      return x;
  };
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableMultiplicative = new Traversable(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function () {
      return Data_Monoid_Multiplicative.functorMultiplicative;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
      };
  });
  var traversableMaybe = new Traversable(function () {
      return Data_Foldable.foldableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable line 84, column 1 - line 84, column 47: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable line 84, column 1 - line 84, column 47: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableDual = new Traversable(function () {
      return Data_Foldable.foldableDual;
  }, function () {
      return Data_Monoid_Dual.functorDual;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Dual.Dual)(f(v));
          };
      };
  });
  var traversableDisj = new Traversable(function () {
      return Data_Foldable.foldableDisj;
  }, function () {
      return Data_Monoid_Disj.functorDisj;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Disj.Disj)(f(v));
          };
      };
  });
  var traversableConj = new Traversable(function () {
      return Data_Foldable.foldableConj;
  }, function () {
      return Data_Monoid_Conj.functorConj;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Conj.Conj)(f(v));
          };
      };
  });
  var traversableAdditive = new Traversable(function () {
      return Data_Foldable.foldableAdditive;
  }, function () {
      return Data_Monoid_Additive.functorAdditive;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Monoid_Additive.Additive)(f(v));
          };
      };
  });
  var stateR = function (v) {
      return v;
  };
  var stateL = function (v) {
      return v;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var traversableFirst = new Traversable(function () {
      return Data_Foldable.foldableFirst;
  }, function () {
      return Data_Maybe_First.functorFirst;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traversableLast = new Traversable(function () {
      return Data_Foldable.foldableLast;
  }, function () {
      return Data_Maybe_Last.functorLast;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traverseDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (ta) {
                  return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
              };
          };
      };
  };
  var functorStateR = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var v = stateR(k)(s);
              return {
                  accum: v.accum, 
                  value: f(v.value)
              };
          };
      };
  });
  var functorStateL = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var v = stateL(k)(s);
              return {
                  accum: v.accum, 
                  value: f(v.value)
              };
          };
      };
  });
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  var applyStateR = new Control_Apply.Apply(function () {
      return functorStateR;
  }, function (f) {
      return function (x) {
          return function (s) {
              var v = stateR(x)(s);
              var v1 = stateR(f)(v.accum);
              return {
                  accum: v1.accum, 
                  value: v1.value(v.value)
              };
          };
      };
  });
  var applyStateL = new Control_Apply.Apply(function () {
      return functorStateL;
  }, function (f) {
      return function (x) {
          return function (s) {
              var v = stateL(f)(s);
              var v1 = stateL(x)(v.accum);
              return {
                  accum: v1.accum, 
                  value: v.value(v1.value)
              };
          };
      };
  });
  var applicativeStateR = new Control_Applicative.Applicative(function () {
      return applyStateR;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumR = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateR(traverse(dictTraversable)(applicativeStateR)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanr = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumR(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(a)(b);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var applicativeStateL = new Control_Applicative.Applicative(function () {
      return applyStateL;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumL = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateL(traverse(dictTraversable)(applicativeStateL)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanl = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumL(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(b)(a);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["mapAccumL"] = mapAccumL;
  exports["mapAccumR"] = mapAccumR;
  exports["scanl"] = scanl;
  exports["scanr"] = scanr;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverse"] = traverse;
  exports["traverseDefault"] = traverseDefault;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableFirst"] = traversableFirst;
  exports["traversableLast"] = traversableLast;
  exports["traversableAdditive"] = traversableAdditive;
  exports["traversableDual"] = traversableDual;
  exports["traversableConj"] = traversableConj;
  exports["traversableDisj"] = traversableDisj;
  exports["traversableMultiplicative"] = traversableMultiplicative;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bifunctor_Clown = PS["Data.Bifunctor.Clown"];
  var Data_Bifunctor_Flip = PS["Data.Bifunctor.Flip"];
  var Data_Bifunctor_Joker = PS["Data.Bifunctor.Joker"];
  var Data_Bifunctor_Product = PS["Data.Bifunctor.Product"];
  var Data_Bifunctor_Wrap = PS["Data.Bifunctor.Wrap"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Bitraversable = function (Bifoldable1, Bifunctor0, bisequence, bitraverse) {
      this.Bifoldable1 = Bifoldable1;
      this.Bifunctor0 = Bifunctor0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var lfor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative))(t);
              };
          };
      };
  };
  var ltraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
          };
      };
  };
  var rfor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative))(f)(t);
              };
          };
      };
  };
  var rtraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return bitraverse(dictBitraversable)(dictApplicative)(Control_Applicative.pure(dictApplicative));
      };
  };
  var bitraversableJoker = function (dictTraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableJoker(dictTraversable.Foldable1());
      }, function () {
          return Data_Bifunctor_Joker.bifunctorJoker(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (v) {
              return function (r) {
                  return function (v1) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Joker.Joker)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(r)(v1));
                  };
              };
          };
      });
  };
  var bitraversableClown = function (dictTraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableClown(dictTraversable.Foldable1());
      }, function () {
          return Data_Bifunctor_Clown.bifunctorClown(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (l) {
              return function (v) {
                  return function (v1) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Clown.Clown)(Data_Traversable.traverse(dictTraversable)(dictApplicative)(l)(v1));
                  };
              };
          };
      });
  };
  var bisequenceDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  var bitraversableFlip = function (dictBitraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableFlip(dictBitraversable.Bifoldable1());
      }, function () {
          return Data_Bifunctor_Flip.bifunctorFlip(dictBitraversable.Bifunctor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bisequence(dictBitraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (r) {
              return function (l) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Flip.Flip)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                  };
              };
          };
      });
  };
  var bitraversableProduct = function (dictBitraversable) {
      return function (dictBitraversable1) {
          return new Bitraversable(function () {
              return Data_Bifoldable.bifoldableProduct(dictBitraversable.Bifoldable1())(dictBitraversable1.Bifoldable1());
          }, function () {
              return Data_Bifunctor_Product.bifunctorProduct(dictBitraversable.Bifunctor0())(dictBitraversable1.Bifunctor0());
          }, function (dictApplicative) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bisequence(dictBitraversable)(dictApplicative)(v.value0)))(bisequence(dictBitraversable1)(dictApplicative)(v.value1));
              };
          }, function (dictApplicative) {
              return function (l) {
                  return function (r) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Product.Product.create)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v.value0)))(bitraverse(dictBitraversable1)(dictApplicative)(l)(r)(v.value1));
                      };
                  };
              };
          });
      };
  };
  var bitraversableWrap = function (dictBitraversable) {
      return new Bitraversable(function () {
          return Data_Bifoldable.bifoldableWrap(dictBitraversable.Bifoldable1());
      }, function () {
          return Data_Bifunctor_Wrap.bifunctorWrap(dictBitraversable.Bifunctor0());
      }, function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bisequence(dictBitraversable)(dictApplicative)(v));
          };
      }, function (dictApplicative) {
          return function (l) {
              return function (r) {
                  return function (v) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Bifunctor_Wrap.Wrap)(bitraverse(dictBitraversable)(dictApplicative)(l)(r)(v));
                  };
              };
          };
      });
  };
  var bitraverseDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return function (t) {
                      return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable.Bifunctor0())(f)(g)(t));
                  };
              };
          };
      };
  };
  var bifor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  exports["Bitraversable"] = Bitraversable;
  exports["bifor"] = bifor;
  exports["bisequence"] = bisequence;
  exports["bisequenceDefault"] = bisequenceDefault;
  exports["bitraverse"] = bitraverse;
  exports["bitraverseDefault"] = bitraverseDefault;
  exports["lfor"] = lfor;
  exports["ltraverse"] = ltraverse;
  exports["rfor"] = rfor;
  exports["rtraverse"] = rtraverse;
  exports["bitraversableClown"] = bitraversableClown;
  exports["bitraversableJoker"] = bitraversableJoker;
  exports["bitraversableFlip"] = bitraversableFlip;
  exports["bitraversableProduct"] = bitraversableProduct;
  exports["bitraversableWrap"] = bitraversableWrap;
})(PS["Data.Bitraversable"] = PS["Data.Bitraversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Left) {
                  return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Right) {
                  return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Either line 160, column 1 - line 160, column 61: " + [ v.constructor.name ]);
          });
      };
  };
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));
  var fromRight = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar62) {
                  return $dollar62;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Right) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 252, column 1 - line 252, column 52: " + [ v.constructor.name ]);
          })());
      };
  };
  var fromLeft = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar66) {
                  return $dollar66;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Left) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 247, column 1 - line 247, column 51: " + [ v.constructor.name ]);
          })());
      };
  };
  var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Right) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 184, column 1 - line 184, column 47: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 184, column 1 - line 184, column 47: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Either line 184, column 1 - line 184, column 47: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableEither = new Data_Traversable.Traversable(function () {
      return foldableEither;
  }, function () {
      return functorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
          };
          if (v instanceof Right) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 200, column 1 - line 200, column 53: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
              };
              if (v1 instanceof Right) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 200, column 1 - line 200, column 53: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var extendEither = new Control_Extend.Extend(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          return new Right(v(v1));
      };
  });
  var eqEither = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  if (x instanceof Left && y instanceof Left) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  if (x instanceof Right && y instanceof Right) {
                      return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                  };
                  return false;
              };
          });
      };
  };
  var ordEither = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  if (x instanceof Left && y instanceof Left) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  if (x instanceof Left) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof Left) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof Right && y instanceof Right) {
                      return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 176, column 8 - line 176, column 64: " + [ x.constructor.name, y.constructor.name ]);
              };
          });
      };
  };
  var eq1Either = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqEither(dictEq)(dictEq1));
      });
  };
  var ord1Either = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Either(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
      });
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  var choose = function (dictAlt) {
      return function (a) {
          return function (b) {
              return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
          };
      };
  };
  var boundedEither = function (dictBounded) {
      return function (dictBounded1) {
          return new Data_Bounded.Bounded(function () {
              return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
          }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 43, column 1 - line 43, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(v2.value0);
                  };
                  if (v2 instanceof Right) {
                      return v1(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 192, column 1 - line 192, column 47: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(z)(v2.value0);
                  };
                  if (v2 instanceof Right) {
                      return v1(z)(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 192, column 1 - line 192, column 47: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(v2.value0)(z);
                  };
                  if (v2 instanceof Right) {
                      return v1(v2.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Either line 192, column 1 - line 192, column 47: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableEither;
  }, function () {
      return bifunctorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 206, column 1 - line 206, column 53: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Left.create)(v(v2.value0));
                  };
                  if (v2 instanceof Right) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Right.create)(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Either line 206, column 1 - line 206, column 53: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 79, column 1 - line 79, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var semigroupEither = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
          };
      });
  };
  var semiringEither = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semiring.add(dictSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semiring.mul(dictSemiring))(x))(y);
          };
      }, new Right(Data_Semiring.one(dictSemiring)), new Right(Data_Semiring.zero(dictSemiring)));
  };
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["choose"] = choose;
  exports["either"] = either;
  exports["fromLeft"] = fromLeft;
  exports["fromRight"] = fromRight;
  exports["isLeft"] = isLeft;
  exports["isRight"] = isRight;
  exports["functorEither"] = functorEither;
  exports["invariantEither"] = invariantEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
  exports["extendEither"] = extendEither;
  exports["showEither"] = showEither;
  exports["eqEither"] = eqEither;
  exports["eq1Either"] = eq1Either;
  exports["ordEither"] = ordEither;
  exports["ord1Either"] = ord1Either;
  exports["boundedEither"] = boundedEither;
  exports["foldableEither"] = foldableEither;
  exports["bifoldableEither"] = bifoldableEither;
  exports["traversableEither"] = traversableEither;
  exports["bitraversableEither"] = bitraversableEither;
  exports["semiringEither"] = semiringEither;
  exports["semigroupEither"] = semigroupEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var $$try = function (action) {
      return $foreign.catchException(function ($0) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Either.Left.create($0));
      })(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)(action));
  };
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["stack"] = stack;
  exports["throw"] = $$throw;
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["catchException"] = $foreign.catchException;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeCoerceEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };

  exports.pow = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return Math.pow(x,y) | 0;
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  // module Data.Int.Bits

  exports.and = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 & n2;
    };
  };

  exports.or = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 | n2;
    };
  };

  exports.xor = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };

  exports.shl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 << n2;
    };
  };

  exports.shr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >> n2;
    };
  };

  exports.zshr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >>> n2;
    };
  };

  exports.complement = function (n) {
    /* jshint bitwise: false */
    return ~n;
  };
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Int.Bits"];
  exports["and"] = $foreign.and;
  exports["complement"] = $foreign.complement;
  exports["or"] = $foreign.or;
  exports["shl"] = $foreign.shl;
  exports["shr"] = $foreign.shr;
  exports["xor"] = $foreign.xor;
  exports["zshr"] = $foreign.zshr;
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  /* globals exports */
  "use strict";

  // module Global

  exports.nan = NaN;

  exports.isNaN = isNaN;

  exports.infinity = Infinity;

  exports.isFinite = isFinite;

  exports.readInt = function (radix) {
    return function (n) {
      return parseInt(n, radix);
    };
  };

  exports.readFloat = parseFloat;

  exports.decodeURI = decodeURI;
  exports.encodeURI = encodeURI;
  exports.decodeURIComponent = decodeURIComponent;
  exports.encodeURIComponent = encodeURIComponent;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Global"];
  exports["decodeURI"] = $foreign["decodeURI"];
  exports["decodeURIComponent"] = $foreign["decodeURIComponent"];
  exports["encodeURI"] = $foreign["encodeURI"];
  exports["encodeURIComponent"] = $foreign["encodeURIComponent"];
  exports["infinity"] = $foreign.infinity;
  exports["isFinite"] = $foreign["isFinite"];
  exports["isNaN"] = $foreign["isNaN"];
  exports["nan"] = $foreign.nan;
  exports["readFloat"] = $foreign.readFloat;
  exports["readInt"] = $foreign.readInt;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.acos = Math.acos;

  exports.asin = Math.asin;

  exports.atan = Math.atan;

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };

  exports.ceil = Math.ceil;

  exports.cos = Math.cos;

  exports.exp = Math.exp;

  exports.floor = Math.floor;

  exports.trunc = Math.trunc || function (n) {
    return n < 0 ? Math.ceil(n) : Math.floor(n);
  };

  exports.log = Math.log;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;

  exports.tan = Math.tan;

  exports.e = Math.E;

  exports.ln2 = Math.LN2;

  exports.ln10 = Math.LN10;

  exports.log2e = Math.LOG2E;

  exports.log10e = Math.LOG10E;

  exports.pi = Math.PI;

  exports.sqrt1_2 = Math.SQRT1_2;

  exports.sqrt2 = Math.SQRT2;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["acos"] = $foreign.acos;
  exports["asin"] = $foreign.asin;
  exports["atan"] = $foreign.atan;
  exports["atan2"] = $foreign.atan2;
  exports["ceil"] = $foreign.ceil;
  exports["cos"] = $foreign.cos;
  exports["e"] = $foreign.e;
  exports["exp"] = $foreign.exp;
  exports["floor"] = $foreign.floor;
  exports["ln10"] = $foreign.ln10;
  exports["ln2"] = $foreign.ln2;
  exports["log"] = $foreign.log;
  exports["log10e"] = $foreign.log10e;
  exports["log2e"] = $foreign.log2e;
  exports["max"] = $foreign.max;
  exports["min"] = $foreign.min;
  exports["pi"] = $foreign.pi;
  exports["pow"] = $foreign.pow;
  exports["remainder"] = $foreign.remainder;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["sqrt1_2"] = $foreign.sqrt1_2;
  exports["sqrt2"] = $foreign.sqrt2;
  exports["tan"] = $foreign.tan;
  exports["trunc"] = $foreign.trunc;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];        
  var Radix = function (x) {
      return x;
  };
  var radix = function (n) {
      if (n >= 2 && n <= 36) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Int line 123, column 1 - line 123, column 28: " + [ n.constructor.name ]);
  };
  var odd = function (x) {
      return (x & 1) !== 0;
  };
  var octal = 8;
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 62, column 1 - line 62, column 29: " + [ x.constructor.name ]);
  };
  var round = function ($2) {
      return unsafeClamp($$Math.round($2));
  };
  var floor = function ($3) {
      return unsafeClamp($$Math.floor($3));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };
  var decimal = 10;
  var ceil = function ($4) {
      return unsafeClamp($$Math.ceil($4));
  };
  var binary = 2;
  var base36 = 36;
  exports["base36"] = base36;
  exports["binary"] = binary;
  exports["ceil"] = ceil;
  exports["decimal"] = decimal;
  exports["even"] = even;
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["hexadecimal"] = hexadecimal;
  exports["octal"] = octal;
  exports["odd"] = odd;
  exports["radix"] = radix;
  exports["round"] = round;
  exports["pow"] = $foreign.pow;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];        
  var randomRange = function (min) {
      return function (max) {
          return function __do() {
              var v = $foreign.random();
              return v * (max - min) + min;
          };
      };
  };
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  var randomBool = Data_Functor.map(Control_Monad_Eff.functorEff)(function (v) {
      return v < 0.5;
  })($foreign.random);
  exports["randomBool"] = randomBool;
  exports["randomInt"] = randomInt;
  exports["randomRange"] = randomRange;
  exports["random"] = $foreign.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  exports.mkEffFn1 = function mkEffFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.mkEffFn2 = function mkEffFn2(fn) {
    return function(a, b) {
      return fn(a)(b)();
    };
  };

  exports.mkEffFn3 = function mkEffFn3(fn) {
    return function(a, b, c) {
      return fn(a)(b)(c)();
    };
  };

  exports.mkEffFn4 = function mkEffFn4(fn) {
    return function(a, b, c, d) {
      return fn(a)(b)(c)(d)();
    };
  };

  exports.mkEffFn5 = function mkEffFn5(fn) {
    return function(a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e)();
    };
  };

  exports.mkEffFn6 = function mkEffFn6(fn) {
    return function(a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f)();
    };
  };

  exports.mkEffFn7 = function mkEffFn7(fn) {
    return function(a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g)();
    };
  };

  exports.mkEffFn8 = function mkEffFn8(fn) {
    return function(a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)();
    };
  };

  exports.mkEffFn9 = function mkEffFn9(fn) {
    return function(a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)();
    };
  };

  exports.mkEffFn10 = function mkEffFn10(fn) {
    return function(a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)();
    };
  };

  exports.runEffFn1 = function runEffFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn3 = function runEffFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };

  exports.runEffFn4 = function runEffFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };

  exports.runEffFn5 = function runEffFn5(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function() {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    };
  };

  exports.runEffFn6 = function runEffFn6(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function() {
                  return fn(a, b, c, d, e, f);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffFn7 = function runEffFn7(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function() {
                    return fn(a, b, c, d, e, f, g);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffFn8 = function runEffFn8(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function() {
                      return fn(a, b, c, d, e, f, g, h);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffFn9 = function runEffFn9(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function(i) {
                      return function() {
                        return fn(a, b, c, d, e, f, g, h, i);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runEffFn10 = function runEffFn10(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function(f) {
                return function(g) {
                  return function(h) {
                    return function(i) {
                      return function(j) {
                        return function() {
                          return fn(a, b, c, d, e, f, g, h, i, j);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["mkEffFn1"] = $foreign.mkEffFn1;
  exports["mkEffFn10"] = $foreign.mkEffFn10;
  exports["mkEffFn2"] = $foreign.mkEffFn2;
  exports["mkEffFn3"] = $foreign.mkEffFn3;
  exports["mkEffFn4"] = $foreign.mkEffFn4;
  exports["mkEffFn5"] = $foreign.mkEffFn5;
  exports["mkEffFn6"] = $foreign.mkEffFn6;
  exports["mkEffFn7"] = $foreign.mkEffFn7;
  exports["mkEffFn8"] = $foreign.mkEffFn8;
  exports["mkEffFn9"] = $foreign.mkEffFn9;
  exports["runEffFn1"] = $foreign.runEffFn1;
  exports["runEffFn10"] = $foreign.runEffFn10;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn3"] = $foreign.runEffFn3;
  exports["runEffFn4"] = $foreign.runEffFn4;
  exports["runEffFn5"] = $foreign.runEffFn5;
  exports["runEffFn6"] = $foreign.runEffFn6;
  exports["runEffFn7"] = $foreign.runEffFn7;
  exports["runEffFn8"] = $foreign.runEffFn8;
  exports["runEffFn9"] = $foreign.runEffFn9;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
    "use strict";

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        return ref.value = f(ref.value); // eslint-disable-line no-return-assign
      };
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };

  exports.runST = function (f) {
    return f;
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var pureST = function (st) {
      return Control_Monad_Eff.runPure($foreign.runST(st));
  };
  exports["pureST"] = pureST;
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["newSTRef"] = $foreign.newSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["runST"] = $foreign.runST;
  exports["writeSTRef"] = $foreign.writeSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Field = function (EuclideanRing0) {
      this.EuclideanRing0 = EuclideanRing0;
  };
  var fieldNumber = new Field(function () {
      return Data_EuclideanRing.euclideanRingNumber;
  });
  exports["Field"] = Field;
  exports["fieldNumber"] = fieldNumber;
})(PS["Data.Field"] = PS["Data.Field"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var showIdentity = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringIdentity = function (dictSemiring) {
      return dictSemiring;
  };
  var semigroupIdenity = function (dictSemigroup) {
      return dictSemigroup;
  };
  var ringIdentity = function (dictRing) {
      return dictRing;
  };
  var ordIdentity = function (dictOrd) {
      return dictOrd;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var monoidIdentity = function (dictMonoid) {
      return dictMonoid;
  };
  var lazyIdentity = function (dictLazy) {
      return dictLazy;
  };
  var heytingAlgebraIdentity = function (dictHeytingAlgebra) {
      return dictHeytingAlgebra;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
  var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var traversableIdentity = new Data_Traversable.Traversable(function () {
      return foldableIdentity;
  }, function () {
      return functorIdentity;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Identity)(f(v));
          };
      };
  });
  var fieldIdentity = function (dictField) {
      return dictField;
  };
  var extendIdentity = new Control_Extend.Extend(function () {
      return functorIdentity;
  }, function (f) {
      return function (m) {
          return f(m);
      };
  });
  var euclideanRingIdentity = function (dictEuclideanRing) {
      return dictEuclideanRing;
  };
  var eqIdentity = function (dictEq) {
      return dictEq;
  };
  var comonadIdentity = new Control_Comonad.Comonad(function () {
      return extendIdentity;
  }, function (v) {
      return v;
  });
  var commutativeRingIdentity = function (dictCommutativeRing) {
      return dictCommutativeRing;
  };
  var boundedIdentity = function (dictBounded) {
      return dictBounded;
  };
  var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
      return dictBooleanAlgebra;
  };
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  var altIdentity = new Control_Alt.Alt(function () {
      return functorIdentity;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["eqIdentity"] = eqIdentity;
  exports["ordIdentity"] = ordIdentity;
  exports["boundedIdentity"] = boundedIdentity;
  exports["heytingAlgebraIdentity"] = heytingAlgebraIdentity;
  exports["booleanAlgebraIdentity"] = booleanAlgebraIdentity;
  exports["semigroupIdenity"] = semigroupIdenity;
  exports["monoidIdentity"] = monoidIdentity;
  exports["semiringIdentity"] = semiringIdentity;
  exports["euclideanRingIdentity"] = euclideanRingIdentity;
  exports["ringIdentity"] = ringIdentity;
  exports["commutativeRingIdentity"] = commutativeRingIdentity;
  exports["fieldIdentity"] = fieldIdentity;
  exports["lazyIdentity"] = lazyIdentity;
  exports["showIdentity"] = showIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["invariantIdentity"] = invariantIdentity;
  exports["altIdentity"] = altIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
  exports["extendIdentity"] = extendIdentity;
  exports["comonadIdentity"] = comonadIdentity;
  exports["foldableIdentity"] = foldableIdentity;
  exports["traversableIdentity"] = traversableIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };

  exports.unsafePartialBecause = function (reason) {
    return function (f) {
      try {
        return exports.unsafePartial(f);
      } catch (err) {
        throw new Error("unsafePartial failed. The following " +
                        "assumption was incorrect: '" + reason + "'.");
      }
    };
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Partial"];       
  var crash = function (dictPartial) {
      return $foreign.crashWith(dictPartial)("Partial.crash: partial function");
  };
  exports["crash"] = crash;
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];        
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
  exports["unsafePartial"] = $foreign.unsafePartial;
  exports["unsafePartialBecause"] = $foreign.unsafePartialBecause;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecM2 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return tailRecM(dictMonadRec)(function (o) {
                      return f(o.a)(o.b);
                  })({
                      a: a, 
                      b: b
                  });
              };
          };
      };
  };
  var tailRecM3 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return tailRecM(dictMonadRec)(function (o) {
                          return f(o.a)(o.b)(o.c);
                      })({
                          a: a, 
                          b: b, 
                          c: c
                      });
                  };
              };
          };
      };
  };
  var tailRecEff = function (f) {
      return function (a) {
          var fromDone = function (v) {
              var __unused = function (dictPartial1) {
                  return function ($dollar16) {
                      return $dollar16;
                  };
              };
              return __unused()((function () {
                  if (v instanceof Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 130, column 28 - line 130, column 42: " + [ v.constructor.name ]);
              })());
          };
          var f$prime = function ($48) {
              return Control_Monad_Eff_Unsafe.unsafeCoerceEff(f($48));
          };
          return function __do() {
              var v = f$prime(a)();
              var v1 = {
                  value: v
              };
              (function () {
                  while (!(function __do() {
                      var v2 = v1.value;
                      if (v2 instanceof Loop) {
                          var v3 = f$prime(v2.value0)();
                          var v4 = v1.value = v3;
                          return false;
                      };
                      if (v2 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 119, column 5 - line 124, column 26: " + [ v2.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Control_Monad_Eff.functorEff)(fromDone)(Control_Monad_ST.readSTRef(v1))();
          };
      };
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 95, column 3 - line 95, column 25: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($49) {
          return go(f($49));
      };
  };
  var monadRecIdentity = new MonadRec(function () {
      return Data_Identity.monadIdentity;
  }, function (f) {
      var runIdentity = function (v) {
          return v;
      };
      return function ($50) {
          return Data_Identity.Identity(tailRec(function ($51) {
              return runIdentity(f($51));
          })($50));
      };
  });
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 108, column 7 - line 108, column 33: " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  var functorStep = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Loop) {
              return new Loop(v.value0);
          };
          if (v instanceof Done) {
              return new Done(f(v.value0));
          };
          throw new Error("Failed pattern match at Control.Monad.Rec.Class line 27, column 1 - line 27, column 41: " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(new Loop(u))(ma);
          })(Data_Unit.unit);
      };
  };
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 31, column 1 - line 31, column 41: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["forever"] = forever;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["tailRecM2"] = tailRecM2;
  exports["tailRecM3"] = tailRecM3;
  exports["functorStep"] = functorStep;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecIdentity"] = monadRecIdentity;
  exports["monadRecEff"] = monadRecEff;
  exports["monadRecEither"] = monadRecEither;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var MonadPlus = function (MonadZero0) {
      this.MonadZero0 = MonadZero0;
  };
  var monadPlusArray = new MonadPlus(function () {
      return Control_MonadZero.monadZeroArray;
  });
  exports["MonadPlus"] = MonadPlus;
  exports["monadPlusArray"] = monadPlusArray;
})(PS["Control.MonadPlus"] = PS["Control.MonadPlus"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ?
      replicate :
      replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    // jshint maxparams: 2
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.peekSTArrayImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.pokeSTArray = function (xs) {
    return function (i) {
      return function (a) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.spliceSTArray = function (xs) {
    return function (i) {
      return function (howMany) {
        return function (bs) {
          return function () {
            return xs.splice.apply(xs, [i, howMany].concat(bs));
          };
        };
      };
    };
  };

  exports.copyImpl = function (xs) {
    return function () {
      return xs.slice();
    };
  };

  exports.toAssocArray = function (xs) {
    return function () {
      var n = xs.length;
      var as = new Array(n);
      for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
      return as;
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var unsafeFreeze = function ($0) {
      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Unsafe_Coerce.unsafeCoerce($0));
  };
  var thaw = $foreign.copyImpl;
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  var peekSTArray = $foreign.peekSTArrayImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var freeze = $foreign.copyImpl;
  exports["freeze"] = freeze;
  exports["peekSTArray"] = peekSTArray;
  exports["pushSTArray"] = pushSTArray;
  exports["thaw"] = thaw;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["pokeSTArray"] = $foreign.pokeSTArray;
  exports["pushAllSTArray"] = $foreign.pushAllSTArray;
  exports["runSTArray"] = $foreign.runSTArray;
  exports["spliceSTArray"] = $foreign.spliceSTArray;
  exports["toAssocArray"] = $foreign.toAssocArray;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];        
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var v1 = Control_Monad_ST.readSTRef(v.value1)();
          return v.value0(v1);
      };
  };
  var next = function (v) {
      return function __do() {
          var v1 = Control_Monad_ST.readSTRef(v.value1)();
          var v2 = Control_Monad_ST.modifySTRef(v.value1)(function (v2) {
              return v2 + 1 | 0;
          })();
          return v.value0(v1);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var v = Control_Monad_ST.newSTRef(false)();
                  while (Data_Functor.map(Control_Monad_Eff.functorEff)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST.readSTRef(v))()) {
                      (function __do() {
                          var v1 = peek(iter)();
                          if (v1 instanceof Data_Maybe.Just && p(v1.value0)) {
                              var v2 = Data_Array_ST.pushSTArray(array)(v1.value0)();
                              return Data_Functor["void"](Control_Monad_Eff.functorEff)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v)(true))();
                      })();
                  };
                  return {};
              };
          };
      };
  };
  var pushAll = pushWhile(Data_Function["const"](true));
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Iterator.create(f))(Control_Monad_ST.newSTRef(0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var v = Control_Monad_ST.newSTRef(false)();
              while (Data_Functor.map(Control_Monad_Eff.functorEff)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST.readSTRef(v))()) {
                  (function __do() {
                      var v1 = next(iter)();
                      if (v1 instanceof Data_Maybe.Just) {
                          return f(v1.value0)();
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v)(true))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator line 39, column 5 - line 41, column 46: " + [ v1.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  var exhausted = function ($27) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Maybe.isNothing)(peek($27));
  };
  exports["exhausted"] = exhausted;
  exports["iterate"] = iterate;
  exports["iterator"] = iterator;
  exports["next"] = next;
  exports["peek"] = peek;
  exports["pushAll"] = pushAll;
  exports["pushWhile"] = pushWhile;
})(PS["Data.Array.ST.Iterator"] = PS["Data.Array.ST.Iterator"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var tail = function (v) {
      return v.value1;
  };
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var oneOf = function (dictAlternative) {
      return function (v) {
          return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
      };
  };
  var head = function (v) {
      return v.value0;
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return new NonEmpty(f(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
          };
      });
  };
  var fromNonEmpty = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var foldl1 = function (dictFoldable) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  var traversableNonEmpty = function (dictTraversable) {
      return new Data_Traversable.Traversable(function () {
          return foldableNonEmpty(dictTraversable.Foldable1());
      }, function () {
          return functorNonEmpty(dictTraversable.Functor0());
      }, function (dictApplicative) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
          };
      }, function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
              };
          };
      });
  };
  var foldMap1 = function (dictSemigroup) {
      return function (dictFoldable) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(function (s) {
                      return function (a1) {
                          return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                      };
                  })(f(v.value0))(v.value1);
              };
          };
      };
  };
  var fold1 = function (dictSemigroup) {
      return function (dictFoldable) {
          return foldMap1(dictSemigroup)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var eq1NonEmpty = function (dictEq1) {
      return new Data_Eq.Eq1(function (dictEq) {
          return function (v) {
              return function (v1) {
                  return Data_Eq.eq(dictEq)(v.value0)(v1.value0) && Data_Eq.eq1(dictEq1)(dictEq)(v.value1)(v1.value1);
              };
          };
      });
  };
  var eqNonEmpty = function (dictEq1) {
      return function (dictEq) {
          return new Data_Eq.Eq(Data_Eq.eq1(eq1NonEmpty(dictEq1))(dictEq));
      };
  };
  var ord1NonEmpty = function (dictOrd1) {
      return new Data_Ord.Ord1(function () {
          return eq1NonEmpty(dictOrd1.Eq10());
      }, function (dictOrd) {
          return function (v) {
              return function (v1) {
                  var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                  if (v2 instanceof Data_Ordering.EQ) {
                      return Data_Ord.compare1(dictOrd1)(dictOrd)(v.value1)(v1.value1);
                  };
                  return v2;
              };
          };
      });
  };
  var ordNonEmpty = function (dictOrd1) {
      return function (dictOrd) {
          return new Data_Ord.Ord(function () {
              return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
          }, Data_Ord.compare1(ord1NonEmpty(dictOrd1))(dictOrd));
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["fold1"] = fold1;
  exports["foldMap1"] = foldMap1;
  exports["foldl1"] = foldl1;
  exports["fromNonEmpty"] = fromNonEmpty;
  exports["head"] = head;
  exports["oneOf"] = oneOf;
  exports["singleton"] = singleton;
  exports["tail"] = tail;
  exports["showNonEmpty"] = showNonEmpty;
  exports["eqNonEmpty"] = eqNonEmpty;
  exports["eq1NonEmpty"] = eq1NonEmpty;
  exports["ordNonEmpty"] = ordNonEmpty;
  exports["ord1NonEmpty"] = ord1NonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
  exports["traversableNonEmpty"] = traversableNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var swap = function (v) {
      return new Tuple(v.value1, v.value0);
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var semiringTuple = function (dictSemiring) {
      return function (dictSemiring1) {
          return new Data_Semiring.Semiring(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
              };
          }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
      };
  };
  var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return new Tuple(v1.value0, v.value1);
      };
  });
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var ringTuple = function (dictRing) {
      return function (dictRing1) {
          return new Data_Ring.Ring(function () {
              return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function ($261) {
                  return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $143 = Data_Eq.eq(dictEq)(a)(v.value0);
                      if ($143) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      return Data_Maybe.Nothing.value;
                  })($261));
              };
          };
      };
  };
  var heytingAlgebraTuple = function (dictHeytingAlgebra) {
      return function (dictHeytingAlgebra1) {
          return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
          }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
      };
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });
  var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
  var fst = function (v) {
      return v.value0;
  };
  var lazyTuple = function (dictLazy) {
      return function (dictLazy1) {
          return new Control_Lazy.Lazy(function (f) {
              return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                  return fst(f(Data_Unit.unit));
              }), Control_Lazy.defer(dictLazy1)(function (v) {
                  return snd(f(Data_Unit.unit));
              }));
          });
      };
  };
  var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v.value1)(z);
          };
      };
  });
  var traversableTuple = new Data_Traversable.Traversable(function () {
      return foldableTuple;
  }, function () {
      return functorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var extendTuple = new Control_Extend.Extend(function () {
      return functorTuple;
  }, function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v));
      };
  });
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  if (v instanceof Data_Ordering.LT) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return Data_Ordering.GT.value;
                  };
                  return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
          });
      };
  };
  var eq1Tuple = function (dictEq) {
      return new Data_Eq.Eq1(function (dictEq1) {
          return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
      });
  };
  var ord1Tuple = function (dictOrd) {
      return new Data_Ord.Ord1(function () {
          return eq1Tuple(dictOrd.Eq0());
      }, function (dictOrd1) {
          return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
      });
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  var comonadTuple = new Control_Comonad.Comonad(function () {
      return extendTuple;
  }, snd);
  var commutativeRingTuple = function (dictCommutativeRing) {
      return function (dictCommutativeRing1) {
          return new Data_CommutativeRing.CommutativeRing(function () {
              return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
          });
      };
  };
  var boundedTuple = function (dictBounded) {
      return function (dictBounded1) {
          return new Data_Bounded.Bounded(function () {
              return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
          }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
      };
  };
  var booleanAlgebraTuple = function (dictBooleanAlgebra) {
      return function (dictBooleanAlgebra1) {
          return new Data_BooleanAlgebra.BooleanAlgebra(function () {
              return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
          });
      };
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return g(f(z)(v.value0))(v.value1);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return f(v.value0)(g(v.value1)(z));
              };
          };
      };
  });
  var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableTuple;
  }, function () {
      return bifunctorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Tuple.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  var biapplyTuple = new Control_Biapply.Biapply(function () {
      return bifunctorTuple;
  }, function (v) {
      return function (v1) {
          return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
      };
  });
  var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
      return biapplyTuple;
  }, Tuple.create);
  var applyTuple = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorTuple;
      }, function (v) {
          return function (v1) {
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
          };
      });
  };
  var bindTuple = function (dictSemigroup) {
      return new Control_Bind.Bind(function () {
          return applyTuple(dictSemigroup);
      }, function (v) {
          return function (f) {
              var v1 = f(v.value1);
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
          };
      });
  };
  var applicativeTuple = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyTuple(dictMonoid.Semigroup0());
      }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
  };
  var monadTuple = function (dictMonoid) {
      return new Control_Monad.Monad(function () {
          return applicativeTuple(dictMonoid);
      }, function () {
          return bindTuple(dictMonoid.Semigroup0());
      });
  };
  exports["Tuple"] = Tuple;
  exports["curry"] = curry;
  exports["fst"] = fst;
  exports["lookup"] = lookup;
  exports["snd"] = snd;
  exports["swap"] = swap;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["eq1Tuple"] = eq1Tuple;
  exports["ordTuple"] = ordTuple;
  exports["ord1Tuple"] = ord1Tuple;
  exports["boundedTuple"] = boundedTuple;
  exports["semigroupoidTuple"] = semigroupoidTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["monoidTuple"] = monoidTuple;
  exports["semiringTuple"] = semiringTuple;
  exports["ringTuple"] = ringTuple;
  exports["commutativeRingTuple"] = commutativeRingTuple;
  exports["heytingAlgebraTuple"] = heytingAlgebraTuple;
  exports["booleanAlgebraTuple"] = booleanAlgebraTuple;
  exports["functorTuple"] = functorTuple;
  exports["invariantTuple"] = invariantTuple;
  exports["bifunctorTuple"] = bifunctorTuple;
  exports["applyTuple"] = applyTuple;
  exports["biapplyTuple"] = biapplyTuple;
  exports["applicativeTuple"] = applicativeTuple;
  exports["biapplicativeTuple"] = biapplicativeTuple;
  exports["bindTuple"] = bindTuple;
  exports["monadTuple"] = monadTuple;
  exports["extendTuple"] = extendTuple;
  exports["comonadTuple"] = comonadTuple;
  exports["lazyTuple"] = lazyTuple;
  exports["foldableTuple"] = foldableTuple;
  exports["bifoldableTuple"] = bifoldableTuple;
  exports["traversableTuple"] = traversableTuple;
  exports["bitraversableTuple"] = bitraversableTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $8 = i <= 0;
                  if ($8) {
                      return Data_Maybe.Nothing.value;
                  };
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  var singleton = function (dictUnfoldable) {
      return replicate(dictUnfoldable)(1);
  };
  var none = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
  };
  var fromMaybe = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(function (b) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
      });
  };
  exports["Unfoldable"] = Unfoldable;
  exports["fromMaybe"] = fromMaybe;
  exports["none"] = none;
  exports["replicate"] = replicate;
  exports["replicateA"] = replicateA;
  exports["singleton"] = singleton;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unzip = $foreign["uncons'"](function (v) {
      return new Data_Tuple.Tuple([  ], [  ]);
  })(function (v) {
      return function (ts) {
          var v1 = unzip(ts);
          return new Data_Tuple.Tuple($foreign.cons(v.value0)(v1.value0), $foreign.cons(v.value1)(v1.value1));
      };
  });
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array line 135, column 3 - line 137, column 26: " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 462, column 15 - line 467, column 1: " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubBy = function (eq) {
      return function (xs) {
          var v = uncons(xs);
          if (v instanceof Data_Maybe.Just) {
              return $foreign.cons(v.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                  return !eq(v.value0.head)(y);
              })(v.value0.tail)));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          throw new Error("Failed pattern match at Data.Array line 570, column 3 - line 572, column 18: " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Data_Eq.eq(dictEq));
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };
  var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array line 247, column 1 - line 247, column 45: " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var unsnoc = function (xs) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return function (v1) {
              return {
                  init: v, 
                  last: v1
              };
          };
      })(init(xs)))(last(xs));
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var span = function (p) {
      return function (arr) {
          var go = function ($copy_i) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i) {
                  var v = index(arr)(i);
                  if (v instanceof Data_Maybe.Just) {
                      var $64 = p(v.value0);
                      if ($64) {
                          $copy_i = i + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return new Data_Maybe.Just(i);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Array line 528, column 5 - line 530, column 25: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_i);
              };
              return $tco_result;
          };
          var breakIndex = go(0);
          if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
              return {
                  init: [  ], 
                  rest: arr
              };
          };
          if (breakIndex instanceof Data_Maybe.Just) {
              return {
                  init: $foreign.slice(0)(breakIndex.value0)(arr), 
                  rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
              };
          };
          if (breakIndex instanceof Data_Maybe.Nothing) {
              return {
                  init: arr, 
                  rest: [  ]
              };
          };
          throw new Error("Failed pattern match at Data.Array line 515, column 3 - line 521, column 30: " + [ breakIndex.constructor.name ]);
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return Control_Monad_ST.pureST(function __do() {
              var v = Data_Array_ST.emptySTArray();
              var v1 = Data_Array_ST_Iterator.iterator(function (v1) {
                  return index(xs)(v1);
              })();
              Data_Array_ST_Iterator.iterate(v1)(function (x) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                      var v2 = Data_Array_ST.emptySTArray();
                      Data_Array_ST_Iterator.pushWhile(op(x))(v1)(v2)();
                      var v3 = Data_Array_ST.unsafeFreeze(v2)();
                      return Data_Array_ST.pushSTArray(v)(new Data_NonEmpty.NonEmpty(x, v3))();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(v)();
          });
      };
  };
  var group = function (dictEq) {
      return function (xs) {
          return groupBy(Data_Eq.eq(dictEq))(xs);
      };
  };
  var group$prime = function (dictOrd) {
      return function ($85) {
          return group(dictOrd.Eq0())(sort(dictOrd)($85));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldRecM = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (array) {
                  var go = function (res) {
                      return function (i) {
                          if (i >= $foreign.length(array)) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(res));
                          };
                          if (Data_Boolean.otherwise) {
                              return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(f(res)(unsafeIndex()(array)(i)))(function (v) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop({
                                      a: v, 
                                      b: i + 1 | 0
                                  }));
                              });
                          };
                          throw new Error("Failed pattern match at Data.Array line 671, column 3 - line 675, column 42: " + [ res.constructor.name, i.constructor.name ]);
                      };
                  };
                  return Control_Monad_Rec_Class.tailRecM2(dictMonadRec)(go)(a)(0);
              };
          };
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(a);
              })(function (b) {
                  return function (bs) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBy = function (cmp) {
      return function (x) {
          return function (ys) {
              var i = Data_Maybe.maybe(0)(function (v) {
                  return v + 1 | 0;
              })(findLastIndex(function (y) {
                  return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
              })(ys));
              return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return $foreign.filter(function (x) {
                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($86) {
          return Data_Maybe.maybe([  ])(singleton)(f($86));
      });
  };
  var filterA = function (dictApplicative) {
      return function (p) {
          return function ($87) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(mapMaybe(function (v) {
                  if (v.value1) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  return Data_Maybe.Nothing.value;
              }))(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictApplicative)(function (x) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(x))(p(x));
              })($87));
          };
      };
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  var alterAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  var v = f(x);
                  if (v instanceof Data_Maybe.Nothing) {
                      return deleteAt(i)(xs);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return updateAt(i)(v.value0)(xs);
                  };
                  throw new Error("Failed pattern match at Data.Array line 388, column 10 - line 390, column 32: " + [ v.constructor.name ]);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  exports["alterAt"] = alterAt;
  exports["catMaybes"] = catMaybes;
  exports["concatMap"] = concatMap;
  exports["delete"] = $$delete;
  exports["deleteAt"] = deleteAt;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["dropWhile"] = dropWhile;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["filterA"] = filterA;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["foldM"] = foldM;
  exports["foldRecM"] = foldRecM;
  exports["fromFoldable"] = fromFoldable;
  exports["group"] = group;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["head"] = head;
  exports["index"] = index;
  exports["init"] = init;
  exports["insert"] = insert;
  exports["insertAt"] = insertAt;
  exports["insertBy"] = insertBy;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["last"] = last;
  exports["many"] = many;
  exports["mapMaybe"] = mapMaybe;
  exports["mapWithIndex"] = mapWithIndex;
  exports["modifyAt"] = modifyAt;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["null"] = $$null;
  exports["singleton"] = singleton;
  exports["some"] = some;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["sortWith"] = sortWith;
  exports["span"] = span;
  exports["tail"] = tail;
  exports["takeWhile"] = takeWhile;
  exports["toUnfoldable"] = toUnfoldable;
  exports["uncons"] = uncons;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["unsafeIndex"] = unsafeIndex;
  exports["unsnoc"] = unsnoc;
  exports["unzip"] = unzip;
  exports["updateAt"] = updateAt;
  exports["zip"] = zip;
  exports["zipWithA"] = zipWithA;
  exports["concat"] = $foreign.concat;
  exports["cons"] = $foreign.cons;
  exports["drop"] = $foreign.drop;
  exports["filter"] = $foreign.filter;
  exports["length"] = $foreign.length;
  exports["partition"] = $foreign.partition;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["reverse"] = $foreign.reverse;
  exports["slice"] = $foreign.slice;
  exports["snoc"] = $foreign.snoc;
  exports["take"] = $foreign.take;
  exports["zipWith"] = $foreign.zipWith;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];        
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var last = function (dictPartial) {
      return function (xs) {
          return xs[Data_Array.length(xs) - 1 | 0];
      };
  };
  var init = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(0)(Data_Array.length(xs) - 1 | 0)(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Join = function (x) {
      return x;
  };
  var showJoin = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Join " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var ordJoin = function (dictOrd) {
      return dictOrd;
  };
  var newtypeJoin = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Join);
  var eqJoin = function (dictEq) {
      return dictEq;
  };
  var bifunctorJoin = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Bifunctor.bimap(dictBifunctor)(f)(f)(v);
          };
      });
  };
  var biapplyJoin = function (dictBiapply) {
      return new Control_Apply.Apply(function () {
          return bifunctorJoin(dictBiapply.Bifunctor0());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeJoin = function (dictBiapplicative) {
      return new Control_Applicative.Applicative(function () {
          return biapplyJoin(dictBiapplicative.Biapply0());
      }, function (a) {
          return Control_Biapplicative.bipure(dictBiapplicative)(a)(a);
      });
  };
  exports["Join"] = Join;
  exports["newtypeJoin"] = newtypeJoin;
  exports["eqJoin"] = eqJoin;
  exports["ordJoin"] = ordJoin;
  exports["showJoin"] = showJoin;
  exports["bifunctorJoin"] = bifunctorJoin;
  exports["biapplyJoin"] = biapplyJoin;
  exports["biapplicativeJoin"] = biapplicativeJoin;
})(PS["Data.Bifunctor.Join"] = PS["Data.Bifunctor.Join"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Void = PS["Data.Void"];        
  var in9 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))))))));
  };
  var in8 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))))));
  };
  var in7 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))))));
  };
  var in6 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))));
  };
  var in5 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)))));
  };
  var in4 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))));
  };
  var in3 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)));
  };
  var in2 = function (v) {
      return new Data_Either.Right(new Data_Either.Left(v));
  };
  var in10 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v))))))))));
  };
  var in1 = Data_Either.Left.create;
  var either9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (y) {
                                          if (y instanceof Data_Either.Left) {
                                              return a(y.value0);
                                          };
                                          if (y instanceof Data_Either.Right) {
                                              if (y.value0 instanceof Data_Either.Left) {
                                                  return b(y.value0.value0);
                                              };
                                              if (y.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                                      return c(y.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return d(y.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return e(y.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return f(y.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Either.Nested line 245, column 29 - line 247, column 40: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Either.Nested line 243, column 27 - line 247, column 40: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 241, column 25 - line 247, column 40: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested line 239, column 23 - line 247, column 40: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 237, column 21 - line 247, column 40: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 235, column 19 - line 247, column 40: " + [ y.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 233, column 17 - line 247, column 40: " + [ y.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 231, column 15 - line 247, column 40: " + [ y.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 229, column 31 - line 247, column 40: " + [ y.constructor.name ]);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (y) {
                                      if (y instanceof Data_Either.Left) {
                                          return a(y.value0);
                                      };
                                      if (y instanceof Data_Either.Right) {
                                          if (y.value0 instanceof Data_Either.Left) {
                                              return b(y.value0.value0);
                                          };
                                          if (y.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0 instanceof Data_Either.Left) {
                                                  return c(y.value0.value0.value0);
                                              };
                                              if (y.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return d(y.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return e(y.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return f(y.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 224, column 27 - line 226, column 38: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested line 222, column 25 - line 226, column 38: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 220, column 23 - line 226, column 38: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 218, column 21 - line 226, column 38: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 216, column 19 - line 226, column 38: " + [ y.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 214, column 17 - line 226, column 38: " + [ y.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 212, column 15 - line 226, column 38: " + [ y.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 210, column 29 - line 226, column 38: " + [ y.constructor.name ]);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (y) {
                                  if (y instanceof Data_Either.Left) {
                                      return a(y.value0);
                                  };
                                  if (y instanceof Data_Either.Right) {
                                      if (y.value0 instanceof Data_Either.Left) {
                                          return b(y.value0.value0);
                                      };
                                      if (y.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0 instanceof Data_Either.Left) {
                                              return c(y.value0.value0.value0);
                                          };
                                          if (y.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return d(y.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return e(y.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                          return f(y.value0.value0.value0.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 205, column 25 - line 207, column 36: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 203, column 23 - line 207, column 36: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 201, column 21 - line 207, column 36: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 199, column 19 - line 207, column 36: " + [ y.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 197, column 17 - line 207, column 36: " + [ y.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 195, column 15 - line 207, column 36: " + [ y.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 193, column 27 - line 207, column 36: " + [ y.constructor.name ]);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (y) {
                              if (y instanceof Data_Either.Left) {
                                  return a(y.value0);
                              };
                              if (y instanceof Data_Either.Right) {
                                  if (y.value0 instanceof Data_Either.Left) {
                                      return b(y.value0.value0);
                                  };
                                  if (y.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                          return c(y.value0.value0.value0);
                                      };
                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                              return d(y.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                  return e(y.value0.value0.value0.value0.value0);
                                              };
                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                  };
                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 188, column 23 - line 190, column 34: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 186, column 21 - line 190, column 34: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 184, column 19 - line 190, column 34: " + [ y.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 182, column 17 - line 190, column 34: " + [ y.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 180, column 15 - line 190, column 34: " + [ y.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested line 178, column 25 - line 190, column 34: " + [ y.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var either5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (y) {
                          if (y instanceof Data_Either.Left) {
                              return a(y.value0);
                          };
                          if (y instanceof Data_Either.Right) {
                              if (y.value0 instanceof Data_Either.Left) {
                                  return b(y.value0.value0);
                              };
                              if (y.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0 instanceof Data_Either.Left) {
                                      return c(y.value0.value0.value0);
                                  };
                                  if (y.value0.value0 instanceof Data_Either.Right) {
                                      if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                          return d(y.value0.value0.value0.value0);
                                      };
                                      if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                              return e(y.value0.value0.value0.value0.value0);
                                          };
                                          if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                              return Data_Void.absurd(y.value0.value0.value0.value0.value0);
                                          };
                                          throw new Error("Failed pattern match at Data.Either.Nested line 173, column 21 - line 175, column 32: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Data.Either.Nested line 171, column 19 - line 175, column 32: " + [ y.value0.value0.value0.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 169, column 17 - line 175, column 32: " + [ y.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested line 167, column 15 - line 175, column 32: " + [ y.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested line 165, column 23 - line 175, column 32: " + [ y.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var either4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (y) {
                      if (y instanceof Data_Either.Left) {
                          return a(y.value0);
                      };
                      if (y instanceof Data_Either.Right) {
                          if (y.value0 instanceof Data_Either.Left) {
                              return b(y.value0.value0);
                          };
                          if (y.value0 instanceof Data_Either.Right) {
                              if (y.value0.value0 instanceof Data_Either.Left) {
                                  return c(y.value0.value0.value0);
                              };
                              if (y.value0.value0 instanceof Data_Either.Right) {
                                  if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                      return d(y.value0.value0.value0.value0);
                                  };
                                  if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                      return Data_Void.absurd(y.value0.value0.value0.value0);
                                  };
                                  throw new Error("Failed pattern match at Data.Either.Nested line 160, column 19 - line 162, column 30: " + [ y.value0.value0.value0.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Data.Either.Nested line 158, column 17 - line 162, column 30: " + [ y.value0.value0.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested line 156, column 15 - line 162, column 30: " + [ y.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Either.Nested line 154, column 21 - line 162, column 30: " + [ y.constructor.name ]);
                  };
              };
          };
      };
  };
  var either3 = function (a) {
      return function (b) {
          return function (c) {
              return function (y) {
                  if (y instanceof Data_Either.Left) {
                      return a(y.value0);
                  };
                  if (y instanceof Data_Either.Right) {
                      if (y.value0 instanceof Data_Either.Left) {
                          return b(y.value0.value0);
                      };
                      if (y.value0 instanceof Data_Either.Right) {
                          if (y.value0.value0 instanceof Data_Either.Left) {
                              return c(y.value0.value0.value0);
                          };
                          if (y.value0.value0 instanceof Data_Either.Right) {
                              return Data_Void.absurd(y.value0.value0.value0);
                          };
                          throw new Error("Failed pattern match at Data.Either.Nested line 149, column 17 - line 151, column 28: " + [ y.value0.value0.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Either.Nested line 147, column 15 - line 151, column 28: " + [ y.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Either.Nested line 145, column 19 - line 151, column 28: " + [ y.constructor.name ]);
              };
          };
      };
  };
  var either2 = function (a) {
      return function (b) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return a(y.value0);
              };
              if (y instanceof Data_Either.Right) {
                  if (y.value0 instanceof Data_Either.Left) {
                      return b(y.value0.value0);
                  };
                  if (y.value0 instanceof Data_Either.Right) {
                      return Data_Void.absurd(y.value0.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either.Nested line 140, column 15 - line 142, column 26: " + [ y.value0.constructor.name ]);
              };
              throw new Error("Failed pattern match at Data.Either.Nested line 138, column 17 - line 142, column 26: " + [ y.constructor.name ]);
          };
      };
  };
  var either10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return function (y) {
                                              if (y instanceof Data_Either.Left) {
                                                  return a(y.value0);
                                              };
                                              if (y instanceof Data_Either.Right) {
                                                  if (y.value0 instanceof Data_Either.Left) {
                                                      return b(y.value0.value0);
                                                  };
                                                  if (y.value0 instanceof Data_Either.Right) {
                                                      if (y.value0.value0 instanceof Data_Either.Left) {
                                                          return c(y.value0.value0.value0);
                                                      };
                                                      if (y.value0.value0 instanceof Data_Either.Right) {
                                                          if (y.value0.value0.value0 instanceof Data_Either.Left) {
                                                              return d(y.value0.value0.value0.value0);
                                                          };
                                                          if (y.value0.value0.value0 instanceof Data_Either.Right) {
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                  return e(y.value0.value0.value0.value0.value0);
                                                              };
                                                              if (y.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                      return f(y.value0.value0.value0.value0.value0.value0);
                                                                  };
                                                                  if (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                          return g(y.value0.value0.value0.value0.value0.value0.value0);
                                                                      };
                                                                      if (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                              return h(y.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                          };
                                                                          if (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                  return i(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                              };
                                                                              if (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left) {
                                                                                      return j(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                                  };
                                                                                  if (y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right) {
                                                                                      return Data_Void.absurd(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
                                                                                  };
                                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 268, column 31 - line 270, column 41: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                              };
                                                                              throw new Error("Failed pattern match at Data.Either.Nested line 266, column 29 - line 270, column 41: " + [ y.value0.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                          };
                                                                          throw new Error("Failed pattern match at Data.Either.Nested line 264, column 27 - line 270, column 41: " + [ y.value0.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                      };
                                                                      throw new Error("Failed pattern match at Data.Either.Nested line 262, column 25 - line 270, column 41: " + [ y.value0.value0.value0.value0.value0.value0.constructor.name ]);
                                                                  };
                                                                  throw new Error("Failed pattern match at Data.Either.Nested line 260, column 23 - line 270, column 41: " + [ y.value0.value0.value0.value0.value0.constructor.name ]);
                                                              };
                                                              throw new Error("Failed pattern match at Data.Either.Nested line 258, column 21 - line 270, column 41: " + [ y.value0.value0.value0.value0.constructor.name ]);
                                                          };
                                                          throw new Error("Failed pattern match at Data.Either.Nested line 256, column 19 - line 270, column 41: " + [ y.value0.value0.value0.constructor.name ]);
                                                      };
                                                      throw new Error("Failed pattern match at Data.Either.Nested line 254, column 17 - line 270, column 41: " + [ y.value0.value0.constructor.name ]);
                                                  };
                                                  throw new Error("Failed pattern match at Data.Either.Nested line 252, column 15 - line 270, column 41: " + [ y.value0.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Data.Either.Nested line 250, column 34 - line 270, column 41: " + [ y.constructor.name ]);
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either1 = function (y) {
      if (y instanceof Data_Either.Left) {
          return y.value0;
      };
      if (y instanceof Data_Either.Right) {
          return Data_Void.absurd(y.value0);
      };
      throw new Error("Failed pattern match at Data.Either.Nested line 133, column 13 - line 135, column 24: " + [ y.constructor.name ]);
  };
  var at9 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at8 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at7 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left)))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at6 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))) {
                  return f(y.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at5 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0 instanceof Data_Either.Left)))) {
                  return f(y.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at4 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0 instanceof Data_Either.Left))) {
                  return f(y.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at3 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && y.value0.value0 instanceof Data_Either.Left)) {
                  return f(y.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at2 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && y.value0 instanceof Data_Either.Left) {
                  return f(y.value0.value0);
              };
              return b;
          };
      };
  };
  var at10 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && (y.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && (y.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Right && y.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Either.Left))))))))) {
                  return f(y.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at1 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return f(y.value0);
              };
              return b;
          };
      };
  };
  exports["at1"] = at1;
  exports["at10"] = at10;
  exports["at2"] = at2;
  exports["at3"] = at3;
  exports["at4"] = at4;
  exports["at5"] = at5;
  exports["at6"] = at6;
  exports["at7"] = at7;
  exports["at8"] = at8;
  exports["at9"] = at9;
  exports["either1"] = either1;
  exports["either10"] = either10;
  exports["either2"] = either2;
  exports["either3"] = either3;
  exports["either4"] = either4;
  exports["either5"] = either5;
  exports["either6"] = either6;
  exports["either7"] = either7;
  exports["either8"] = either8;
  exports["either9"] = either9;
  exports["in1"] = in1;
  exports["in10"] = in10;
  exports["in2"] = in2;
  exports["in3"] = in3;
  exports["in4"] = in4;
  exports["in5"] = in5;
  exports["in6"] = in6;
  exports["in7"] = in7;
  exports["in8"] = in8;
  exports["in9"] = in9;
})(PS["Data.Either.Nested"] = PS["Data.Either.Nested"] || {});
(function(exports) {
    "use strict";

  // module Data.Function.Uncurried

  exports.mkFn0 = function (fn) {
    return function () {
      return fn({});
    };
  };

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };

  exports.mkFn3 = function (fn) {
    /* jshint maxparams: 3 */
    return function (a, b, c) {
      return fn(a)(b)(c);
    };
  };

  exports.mkFn4 = function (fn) {
    /* jshint maxparams: 4 */
    return function (a, b, c, d) {
      return fn(a)(b)(c)(d);
    };
  };

  exports.mkFn5 = function (fn) {
    /* jshint maxparams: 5 */
    return function (a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e);
    };
  };

  exports.mkFn6 = function (fn) {
    /* jshint maxparams: 6 */
    return function (a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f);
    };
  };

  exports.mkFn7 = function (fn) {
    /* jshint maxparams: 7 */
    return function (a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g);
    };
  };

  exports.mkFn8 = function (fn) {
    /* jshint maxparams: 8 */
    return function (a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h);
    };
  };

  exports.mkFn9 = function (fn) {
    /* jshint maxparams: 9 */
    return function (a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
    };
  };

  exports.mkFn10 = function (fn) {
    /* jshint maxparams: 10 */
    return function (a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
    };
  };

  exports.runFn0 = function (fn) {
    return fn();
  };

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  exports.runFn5 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };

  exports.runFn6 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return fn(a, b, c, d, e, f);
              };
            };
          };
        };
      };
    };
  };

  exports.runFn7 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return fn(a, b, c, d, e, f, g);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn8 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return fn(a, b, c, d, e, f, g, h);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn9 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return fn(a, b, c, d, e, f, g, h, i);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn10 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return function (j) {
                        return fn(a, b, c, d, e, f, g, h, i, j);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];        
  var runFn1 = function (f) {
      return f;
  };
  var mkFn1 = function (f) {
      return f;
  };
  exports["mkFn1"] = mkFn1;
  exports["runFn1"] = runFn1;
  exports["mkFn0"] = $foreign.mkFn0;
  exports["mkFn10"] = $foreign.mkFn10;
  exports["mkFn2"] = $foreign.mkFn2;
  exports["mkFn3"] = $foreign.mkFn3;
  exports["mkFn4"] = $foreign.mkFn4;
  exports["mkFn5"] = $foreign.mkFn5;
  exports["mkFn6"] = $foreign.mkFn6;
  exports["mkFn7"] = $foreign.mkFn7;
  exports["mkFn8"] = $foreign.mkFn8;
  exports["mkFn9"] = $foreign.mkFn9;
  exports["runFn0"] = $foreign.runFn0;
  exports["runFn10"] = $foreign.runFn10;
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
  exports["runFn5"] = $foreign.runFn5;
  exports["runFn6"] = $foreign.runFn6;
  exports["runFn7"] = $foreign.runFn7;
  exports["runFn8"] = $foreign.runFn8;
  exports["runFn9"] = $foreign.runFn9;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Alternate = function (x) {
      return x;
  };
  var showAlternate = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Alternate " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupAlternate = function (dictAlt) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Alt.alt(dictAlt)(v)(v1);
          };
      });
  };
  var plusAlternate = function (dictPlus) {
      return dictPlus;
  };
  var ordAlternate = function (dictOrd) {
      return dictOrd;
  };
  var newtypeAlternate = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Alternate);
  var monoidAlternate = function (dictPlus) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAlternate(dictPlus.Alt0());
      }, Control_Plus.empty(dictPlus));
  };
  var monadAlternate = function (dictMonad) {
      return dictMonad;
  };
  var invariantAlternate = function (dictInvariant) {
      return dictInvariant;
  };
  var functorAlternate = function (dictFunctor) {
      return dictFunctor;
  };
  var extendAlternate = function (dictExtend) {
      return dictExtend;
  };
  var eqAlternate = function (dictEq) {
      return dictEq;
  };
  var comonadAlternate = function (dictComonad) {
      return dictComonad;
  };
  var boundedAlternate = function (dictBounded) {
      return dictBounded;
  };
  var bindAlternate = function (dictBind) {
      return dictBind;
  };
  var applyAlternate = function (dictApply) {
      return dictApply;
  };
  var applicativeAlternate = function (dictApplicative) {
      return dictApplicative;
  };
  var alternativeAlternate = function (dictAlternative) {
      return dictAlternative;
  };
  var altAlternate = function (dictAlt) {
      return dictAlt;
  };
  exports["Alternate"] = Alternate;
  exports["newtypeAlternate"] = newtypeAlternate;
  exports["eqAlternate"] = eqAlternate;
  exports["ordAlternate"] = ordAlternate;
  exports["boundedAlternate"] = boundedAlternate;
  exports["functorAlternate"] = functorAlternate;
  exports["invariantAlternate"] = invariantAlternate;
  exports["applyAlternate"] = applyAlternate;
  exports["applicativeAlternate"] = applicativeAlternate;
  exports["altAlternate"] = altAlternate;
  exports["plusAlternate"] = plusAlternate;
  exports["alternativeAlternate"] = alternativeAlternate;
  exports["bindAlternate"] = bindAlternate;
  exports["monadAlternate"] = monadAlternate;
  exports["extendAlternate"] = extendAlternate;
  exports["comonadAlternate"] = comonadAlternate;
  exports["showAlternate"] = showAlternate;
  exports["semigroupAlternate"] = semigroupAlternate;
  exports["monoidAlternate"] = monoidAlternate;
})(PS["Data.Monoid.Alternate"] = PS["Data.Monoid.Alternate"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var uncurry9 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry8 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry7 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry6 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry5 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0);
      };
  };
  var uncurry4 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0);
      };
  };
  var uncurry3 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0);
      };
  };
  var uncurry2 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1.value0);
      };
  };
  var uncurry10 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0);
      };
  };
  var uncurry1 = function (f) {
      return function (v) {
          return f(v.value0);
      };
  };
  var tuple9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, Data_Unit.unit)))))))));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, Data_Unit.unit))))))));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, Data_Unit.unit)))))));
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, Data_Unit.unit))))));
                      };
                  };
              };
          };
      };
  };
  var tuple5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, Data_Unit.unit)))));
                  };
              };
          };
      };
  };
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
              };
          };
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
          };
      };
  };
  var tuple2 = function (a) {
      return function (b) {
          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, Data_Unit.unit));
      };
  };
  var tuple10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, Data_Unit.unit))))))))));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple1 = function (a) {
      return new Data_Tuple.Tuple(a, Data_Unit.unit);
  };
  var over9 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1)))))))));
      };
  };
  var over8 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1))))))));
      };
  };
  var over7 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1)))))));
      };
  };
  var over6 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1))))));
      };
  };
  var over5 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1)))));
      };
  };
  var over4 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value0), v.value1.value1.value1.value1))));
      };
  };
  var over3 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value0), v.value1.value1.value1)));
      };
  };
  var over2 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(o(v.value1.value0), v.value1.value1));
      };
  };
  var over10 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1))))))))));
      };
  };
  var over1 = function (o) {
      return function (v) {
          return new Data_Tuple.Tuple(o(v.value0), v.value1);
      };
  };
  var get9 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get8 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get7 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value0;
  };
  var get6 = function (v) {
      return v.value1.value1.value1.value1.value1.value0;
  };
  var get5 = function (v) {
      return v.value1.value1.value1.value1.value0;
  };
  var get4 = function (v) {
      return v.value1.value1.value1.value0;
  };
  var get3 = function (v) {
      return v.value1.value1.value0;
  };
  var get2 = function (v) {
      return v.value1.value0;
  };
  var get10 = function (v) {
      return v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0;
  };
  var get1 = function (v) {
      return v.value0;
  };
  var curry9 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return function (i) {
                                              return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, z))))))))));
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry8 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, z)))))))));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry7 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, z))))))));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry6 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, z)))))));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry5 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, z))))));
                          };
                      };
                  };
              };
          };
      };
  };
  var curry4 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, z)))));
                      };
                  };
              };
          };
      };
  };
  var curry3 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, z))));
                  };
              };
          };
      };
  };
  var curry2 = function (z) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, z)));
              };
          };
      };
  };
  var curry10 = function (z) {
      return function (f$prime) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return function (f) {
                                  return function (g) {
                                      return function (h) {
                                          return function (i) {
                                              return function (j) {
                                                  return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, z)))))))))));
                                              };
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry1 = function (z) {
      return function (f) {
          return function (a) {
              return f(new Data_Tuple.Tuple(a, z));
          };
      };
  };
  exports["curry1"] = curry1;
  exports["curry10"] = curry10;
  exports["curry2"] = curry2;
  exports["curry3"] = curry3;
  exports["curry4"] = curry4;
  exports["curry5"] = curry5;
  exports["curry6"] = curry6;
  exports["curry7"] = curry7;
  exports["curry8"] = curry8;
  exports["curry9"] = curry9;
  exports["get1"] = get1;
  exports["get10"] = get10;
  exports["get2"] = get2;
  exports["get3"] = get3;
  exports["get4"] = get4;
  exports["get5"] = get5;
  exports["get6"] = get6;
  exports["get7"] = get7;
  exports["get8"] = get8;
  exports["get9"] = get9;
  exports["over1"] = over1;
  exports["over10"] = over10;
  exports["over2"] = over2;
  exports["over3"] = over3;
  exports["over4"] = over4;
  exports["over5"] = over5;
  exports["over6"] = over6;
  exports["over7"] = over7;
  exports["over8"] = over8;
  exports["over9"] = over9;
  exports["tuple1"] = tuple1;
  exports["tuple10"] = tuple10;
  exports["tuple2"] = tuple2;
  exports["tuple3"] = tuple3;
  exports["tuple4"] = tuple4;
  exports["tuple5"] = tuple5;
  exports["tuple6"] = tuple6;
  exports["tuple7"] = tuple7;
  exports["tuple8"] = tuple8;
  exports["tuple9"] = tuple9;
  exports["uncurry1"] = uncurry1;
  exports["uncurry10"] = uncurry10;
  exports["uncurry2"] = uncurry2;
  exports["uncurry3"] = uncurry3;
  exports["uncurry4"] = uncurry4;
  exports["uncurry5"] = uncurry5;
  exports["uncurry6"] = uncurry6;
  exports["uncurry7"] = uncurry7;
  exports["uncurry8"] = uncurry8;
  exports["uncurry9"] = uncurry9;
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
    "use strict";

  var gpu = new GPU( )

  exports.makeK0 = function (opts) {
    return function (body) {
      return gpu.createKernel (new Function( body), opts)
    }
  }

  exports.makeK1 = function (opts) {
    return function (body) {
      return function (arg1) {
        return function (par1) {
          return gpu.createKernel (new Function( arg1, body), opts)(par1)
        }
      }
    }
  }

  exports.makeK2 = function (opts) {
    return function (body) {
      return function (arg1) {
        return function (arg2) { 
          return function (par1) {
            return function (par2) {
              return gpu.createKernel (new Function( arg1, arg2, body), opts)(par1, par2)
            }
          }
        }
      }
    }
  }

  exports.makeK3 = function (opts) {
    return function (body) {
      return function (arg1) {
        return function (arg2) {
          return function (arg3) {
            return function (par1) {
              return function (par2) {
                return function (par3) {
                  return gpu.createKernel (new Function( arg1, arg2, arg3, body), { dimensions: [100,2,2]} ) (par1, par2, par3)
                }
              }
            }
          }
        }
      }
    }
  }

  exports.makeK4 = function (opts) {
    return function (body) {
      return function (arg1) { 
        return function (arg2) {
          return function (arg3) {
            return function (arg4) {
              return function (par1) {
                return function (par2) {
                  return function (par3) {
                    return function (par4) {
                      return gpu.createKernel (new Function( arg1, arg2, arg3, arg4, body), opts)(par1, par2, par3, par4)
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  exports.makeK5 = function (opts) {
    return function (body) {
      return function (arg1) { 
        return function (arg2) {
          return function (arg3) {
            return function (arg4) {
              return function (arg5) {
                return function (par1) {
                  return function (par2) {
                    return function (par3) {
                      return function (par4) {
                        return function (par5) {
                          return gpu.createKernel (new Function( arg1, arg2, arg3, arg4, arg5, body), opts) (par1, par2, par3, par4, par5)
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
})(PS["GPU"] = PS["GPU"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Num = (function () {
      function Num(value0) {
          this.value0 = value0;
      };
      Num.create = function (value0) {
          return new Num(value0);
      };
      return Num;
  })();
  var Call = (function () {
      function Call(value0) {
          this.value0 = value0;
      };
      Call.create = function (value0) {
          return new Call(value0);
      };
      return Call;
  })();
  var Read = (function () {
      function Read(value0) {
          this.value0 = value0;
      };
      Read.create = function (value0) {
          return new Read(value0);
      };
      return Read;
  })();
  var Apply1 = (function () {
      function Apply1(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Apply1.create = function (value0) {
          return function (value1) {
              return new Apply1(value0, value1);
          };
      };
      return Apply1;
  })();
  var Apply2 = (function () {
      function Apply2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Apply2.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Apply2(value0, value1, value2);
              };
          };
      };
      return Apply2;
  })();
  var Apply3 = (function () {
      function Apply3(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Apply3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Apply3(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Apply3;
  })();
  var Index1 = (function () {
      function Index1(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Index1.create = function (value0) {
          return function (value1) {
              return new Index1(value0, value1);
          };
      };
      return Index1;
  })();
  var Index2 = (function () {
      function Index2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Index2.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Index2(value0, value1, value2);
              };
          };
      };
      return Index2;
  })();
  var Index3 = (function () {
      function Index3(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Index3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Index3(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Index3;
  })();
  var ThreadX = (function () {
      function ThreadX() {

      };
      ThreadX.value = new ThreadX();
      return ThreadX;
  })();
  var ThreadY = (function () {
      function ThreadY() {

      };
      ThreadY.value = new ThreadY();
      return ThreadY;
  })();
  var ThreadZ = (function () {
      function ThreadZ() {

      };
      ThreadZ.value = new ThreadZ();
      return ThreadZ;
  })();
  var DimensionsX = (function () {
      function DimensionsX() {

      };
      DimensionsX.value = new DimensionsX();
      return DimensionsX;
  })();
  var DimensionsY = (function () {
      function DimensionsY() {

      };
      DimensionsY.value = new DimensionsY();
      return DimensionsY;
  })();
  var DimensionsZ = (function () {
      function DimensionsZ() {

      };
      DimensionsZ.value = new DimensionsZ();
      return DimensionsZ;
  })();
  var Add = (function () {
      function Add(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Add.create = function (value0) {
          return function (value1) {
              return new Add(value0, value1);
          };
      };
      return Add;
  })();
  var Sub = (function () {
      function Sub(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Sub.create = function (value0) {
          return function (value1) {
              return new Sub(value0, value1);
          };
      };
      return Sub;
  })();
  var Mul = (function () {
      function Mul(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Mul.create = function (value0) {
          return function (value1) {
              return new Mul(value0, value1);
          };
      };
      return Mul;
  })();
  var Div = (function () {
      function Div(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Div.create = function (value0) {
          return function (value1) {
              return new Div(value0, value1);
          };
      };
      return Div;
  })();
  var Mod = (function () {
      function Mod(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Mod.create = function (value0) {
          return function (value1) {
              return new Mod(value0, value1);
          };
      };
      return Mod;
  })();
  var Gt = (function () {
      function Gt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Gt.create = function (value0) {
          return function (value1) {
              return new Gt(value0, value1);
          };
      };
      return Gt;
  })();
  var Ge = (function () {
      function Ge(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ge.create = function (value0) {
          return function (value1) {
              return new Ge(value0, value1);
          };
      };
      return Ge;
  })();
  var Lt = (function () {
      function Lt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lt.create = function (value0) {
          return function (value1) {
              return new Lt(value0, value1);
          };
      };
      return Lt;
  })();
  var Le = (function () {
      function Le(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Le.create = function (value0) {
          return function (value1) {
              return new Le(value0, value1);
          };
      };
      return Le;
  })();
  var Eq = (function () {
      function Eq(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Eq.create = function (value0) {
          return function (value1) {
              return new Eq(value0, value1);
          };
      };
      return Eq;
  })();
  var Ne = (function () {
      function Ne(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ne.create = function (value0) {
          return function (value1) {
              return new Ne(value0, value1);
          };
      };
      return Ne;
  })();
  var And = (function () {
      function And(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      And.create = function (value0) {
          return function (value1) {
              return new And(value0, value1);
          };
      };
      return And;
  })();
  var Or = (function () {
      function Or(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Or.create = function (value0) {
          return function (value1) {
              return new Or(value0, value1);
          };
      };
      return Or;
  })();
  var Not = (function () {
      function Not(value0) {
          this.value0 = value0;
      };
      Not.create = function (value0) {
          return new Not(value0);
      };
      return Not;
  })();
  var True = (function () {
      function True() {

      };
      True.value = new True();
      return True;
  })();
  var False = (function () {
      function False() {

      };
      False.value = new False();
      return False;
  })();
  var S = (function () {
      function S(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      S.create = function (value0) {
          return function (value1) {
              return new S(value0, value1);
          };
      };
      return S;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var End = (function () {
      function End() {

      };
      End.value = new End();
      return End;
  })();
  var Break = (function () {
      function Break() {

      };
      Break.value = new Break();
      return Break;
  })();
  var Var = (function () {
      function Var(value0) {
          this.value0 = value0;
      };
      Var.create = function (value0) {
          return new Var(value0);
      };
      return Var;
  })();
  var $$Set = (function () {
      function $$Set(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      $$Set.create = function (value0) {
          return function (value1) {
              return new $$Set(value0, value1);
          };
      };
      return $$Set;
  })();
  var Vset = (function () {
      function Vset(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Vset.create = function (value0) {
          return function (value1) {
              return new Vset(value0, value1);
          };
      };
      return Vset;
  })();
  var Assign = (function () {
      function Assign(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Assign.create = function (value0) {
          return function (value1) {
              return new Assign(value0, value1);
          };
      };
      return Assign;
  })();
  var For = (function () {
      function For(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      For.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new For(value0, value1, value2, value3);
                  };
              };
          };
      };
      return For;
  })();
  var IF = (function () {
      function IF(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      IF.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new IF(value0, value1, value2);
              };
          };
      };
      return IF;
  })();
  var IF$prime = (function () {
      function IF$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      IF$prime.create = function (value0) {
          return function (value1) {
              return new IF$prime(value0, value1);
          };
      };
      return IF$prime;
  })();
  var While = (function () {
      function While(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      While.create = function (value0) {
          return function (value1) {
              return new While(value0, value1);
          };
      };
      return While;
  })();
  var $$Function = (function () {
      function $$Function(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Function.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Function(value0, value1, value2);
              };
          };
      };
      return $$Function;
  })();
  var vset = Vset.create;
  var $$var = Var.create;
  var sqrt = function (exp) {
      return new Apply1("Math.sqrt", exp);
  };
  var sqr = function (exp) {
      return new Apply2("Math.pow", exp, new Num(2.0));
  };
  var showExpr = new Data_Show.Show(function (v) {
      if (v instanceof Num) {
          return Data_Show.show(Data_Show.showNumber)(v.value0);
      };
      if (v instanceof Read) {
          return v.value0;
      };
      if (v instanceof Call) {
          return v.value0 + "()";
      };
      if (v instanceof Apply1) {
          return v.value0 + ("(" + (Data_Show.show(showExpr)(v.value1) + ")"));
      };
      if (v instanceof Apply2) {
          return v.value0 + ("(" + (Data_Show.show(showExpr)(v.value1) + (", " + (Data_Show.show(showExpr)(v.value2) + ")"))));
      };
      if (v instanceof Apply3) {
          return v.value0 + ("(" + (Data_Show.show(showExpr)(v.value1) + (", " + (Data_Show.show(showExpr)(v.value2) + (", " + (Data_Show.show(showExpr)(v.value3) + ")"))))));
      };
      if (v instanceof Index1) {
          return v.value0 + ("[" + (Data_Show.show(showExpr)(v.value1) + "]"));
      };
      if (v instanceof Index2) {
          return v.value0 + ("[" + (Data_Show.show(showExpr)(v.value1) + ("][" + (Data_Show.show(showExpr)(v.value2) + "]"))));
      };
      if (v instanceof Index3) {
          return v.value0 + ("[" + (Data_Show.show(showExpr)(v.value1) + ("][" + (Data_Show.show(showExpr)(v.value2) + ("][" + (Data_Show.show(showExpr)(v.value3) + "]"))))));
      };
      if (v instanceof ThreadX) {
          return "this.thread.x";
      };
      if (v instanceof ThreadY) {
          return "this.thread.y";
      };
      if (v instanceof ThreadZ) {
          return "this.thread.z";
      };
      if (v instanceof DimensionsX) {
          return "this.dimensions.x";
      };
      if (v instanceof DimensionsY) {
          return "this.dimensions.y";
      };
      if (v instanceof DimensionsZ) {
          return "this.dimensions.z";
      };
      if (v instanceof Add) {
          return Data_Show.show(showExpr)(v.value0) + (" + " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Sub) {
          return Data_Show.show(showExpr)(v.value0) + (" - " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Mul) {
          return Data_Show.show(showExpr)(v.value0) + (" * " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Div) {
          return Data_Show.show(showExpr)(v.value0) + (" / " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Mod) {
          return Data_Show.show(showExpr)(v.value0) + (" % " + Data_Show.show(showExpr)(v.value1));
      };
      throw new Error("Failed pattern match at GPU.DSL line 120, column 10 - line 141, column 41: " + [ v.constructor.name ]);
  });
  var showCond = new Data_Show.Show(function (v) {
      if (v instanceof Gt) {
          return Data_Show.show(showExpr)(v.value0) + (" > " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Ge) {
          return Data_Show.show(showExpr)(v.value0) + (" >= " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Lt) {
          return Data_Show.show(showExpr)(v.value0) + (" < " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Le) {
          return Data_Show.show(showExpr)(v.value0) + (" <= " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Eq) {
          return Data_Show.show(showExpr)(v.value0) + (" == " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Ne) {
          return Data_Show.show(showExpr)(v.value0) + (" != " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof And) {
          return Data_Show.show(showCond)(v.value0) + (" && " + Data_Show.show(showCond)(v.value1));
      };
      if (v instanceof Or) {
          return Data_Show.show(showCond)(v.value0) + (" || " + Data_Show.show(showCond)(v.value1));
      };
      if (v instanceof Not) {
          return "!(" + (Data_Show.show(showCond)(v.value0) + ")");
      };
      if (v instanceof True) {
          return "true";
      };
      if (v instanceof False) {
          return "false";
      };
      throw new Error("Failed pattern match at GPU.DSL line 84, column 10 - line 97, column 1: " + [ v.constructor.name ]);
  });
  var showStm = new Data_Show.Show(function (v) {
      if (v instanceof Var) {
          return "var " + v.value0;
      };
      if (v instanceof $$Set) {
          return v.value0 + (" = " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof Vset) {
          return "var " + (v.value0 + (" = " + Data_Show.show(showExpr)(v.value1)));
      };
      if (v instanceof Assign) {
          return v.value0 + (" = " + Data_Show.show(showExpr)(v.value1));
      };
      if (v instanceof For) {
          return "for (var " + (v.value0 + (" = " + (Data_Show.show(Data_Show.showInt)(v.value1) + ("; " + (v.value0 + ("<= " + (Data_Show.show(Data_Show.showInt)(v.value2) + ("; " + (v.value0 + ("++) " + Data_Show.show(showBlock)(v.value3)))))))))));
      };
      if (v instanceof IF) {
          return "if (" + (Data_Show.show(showCond)(v.value0) + (") " + (Data_Show.show(showBlock)(v.value1) + (" else " + Data_Show.show(showBlock)(v.value2)))));
      };
      if (v instanceof IF$prime) {
          return "if (" + (Data_Show.show(showCond)(v.value0) + (") " + Data_Show.show(showBlock)(v.value1)));
      };
      if (v instanceof While) {
          return "while (" + (Data_Show.show(showCond)(v.value0) + (") " + Data_Show.show(showBlock)(v.value1)));
      };
      if (v instanceof $$Function && v.value1.length === 0) {
          return "function " + (v.value0 + (" () " + Data_Show.show(showBlock)(v.value2)));
      };
      if (v instanceof $$Function) {
          return "function " + (v.value0 + (" (" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(v.value1) + (") " + Data_Show.show(showBlock)(v.value2)))));
      };
      throw new Error("Failed pattern match at GPU.DSL line 107, column 10 - line 117, column 104: " + [ v.constructor.name ]);
  });
  var showBlock = new Data_Show.Show(function (block) {
      var go = function (v) {
          if (v instanceof S) {
              return Data_Show.show(showStm)(v.value0) + ("; " + go(v.value1));
          };
          if (v instanceof Return) {
              return "return " + (Data_Show.show(showExpr)(v.value0) + ";");
          };
          if (v instanceof End) {
              return "";
          };
          if (v instanceof Break) {
              return "break;";
          };
          throw new Error("Failed pattern match at GPU.DSL line 100, column 12 - line 106, column 1: " + [ v.constructor.name ]);
      };
      return "{ " + (go(block) + " }");
  });
  var set = Assign.create;
  var $$return = Return.create;
  var read = Read.create;
  var i = read("i");
  var $$function = $$Function.create;
  var exprSemiRing = new Data_Semiring.Semiring(Add.create, Mul.create, new Num(1.0), new Num(0.0));
  var exprRing = new Data_Ring.Ring(function () {
      return exprSemiRing;
  }, Sub.create);
  var exprCommRing = new Data_CommutativeRing.CommutativeRing(function () {
      return exprRing;
  });
  var exprEuclRing = new Data_EuclideanRing.EuclideanRing(function () {
      return exprCommRing;
  }, function (v) {
      return 1;
  }, Div.create, Mod.create);
  var end = End.value;
  var condHeyting = new Data_HeytingAlgebra.HeytingAlgebra(And.create, Or.create, False.value, function (p) {
      return function (q) {
          return Data_HeytingAlgebra.disj(condHeyting)(Data_HeytingAlgebra.not(condHeyting)(p))(q);
      };
  }, Not.create, True.value);
  var condBool = new Data_BooleanAlgebra.BooleanAlgebra(function () {
      return condHeyting;
  });
  var call = Call.create;
  var $$break = Break.value;
  var at3 = Index3.create;
  var at2 = Index2.create;
  var at = Index1.create;
  exports["S"] = S;
  exports["Return"] = Return;
  exports["End"] = End;
  exports["Break"] = Break;
  exports["Gt"] = Gt;
  exports["Ge"] = Ge;
  exports["Lt"] = Lt;
  exports["Le"] = Le;
  exports["Eq"] = Eq;
  exports["Ne"] = Ne;
  exports["And"] = And;
  exports["Or"] = Or;
  exports["Not"] = Not;
  exports["True"] = True;
  exports["False"] = False;
  exports["Num"] = Num;
  exports["Call"] = Call;
  exports["Read"] = Read;
  exports["Apply1"] = Apply1;
  exports["Apply2"] = Apply2;
  exports["Apply3"] = Apply3;
  exports["Index1"] = Index1;
  exports["Index2"] = Index2;
  exports["Index3"] = Index3;
  exports["ThreadX"] = ThreadX;
  exports["ThreadY"] = ThreadY;
  exports["ThreadZ"] = ThreadZ;
  exports["DimensionsX"] = DimensionsX;
  exports["DimensionsY"] = DimensionsY;
  exports["DimensionsZ"] = DimensionsZ;
  exports["Add"] = Add;
  exports["Sub"] = Sub;
  exports["Mul"] = Mul;
  exports["Div"] = Div;
  exports["Mod"] = Mod;
  exports["Var"] = Var;
  exports["Set"] = $$Set;
  exports["Vset"] = Vset;
  exports["Assign"] = Assign;
  exports["For"] = For;
  exports["IF"] = IF;
  exports["IF'"] = IF$prime;
  exports["While"] = While;
  exports["Function"] = $$Function;
  exports["at"] = at;
  exports["at2"] = at2;
  exports["at3"] = at3;
  exports["break"] = $$break;
  exports["call"] = call;
  exports["end"] = end;
  exports["function"] = $$function;
  exports["i"] = i;
  exports["read"] = read;
  exports["return"] = $$return;
  exports["set"] = set;
  exports["sqr"] = sqr;
  exports["sqrt"] = sqrt;
  exports["var"] = $$var;
  exports["vset"] = vset;
  exports["exprSemiRing"] = exprSemiRing;
  exports["exprRing"] = exprRing;
  exports["exprCommRing"] = exprCommRing;
  exports["exprEuclRing"] = exprEuclRing;
  exports["condHeyting"] = condHeyting;
  exports["condBool"] = condBool;
  exports["showCond"] = showCond;
  exports["showBlock"] = showBlock;
  exports["showStm"] = showStm;
  exports["showExpr"] = showExpr;
})(PS["GPU.DSL"] = PS["GPU.DSL"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["GPU"];
  var GPU_DSL = PS["GPU.DSL"];
  exports["makeK0"] = $foreign.makeK0;
  exports["makeK1"] = $foreign.makeK1;
  exports["makeK2"] = $foreign.makeK2;
  exports["makeK3"] = $foreign.makeK3;
  exports["makeK4"] = $foreign.makeK4;
  exports["makeK5"] = $foreign.makeK5;
})(PS["GPU"] = PS["GPU"] || {});
(function(exports) {
  /* globals exports, JSON */
  "use strict";

  // module Global.Unsafe

  exports.unsafeStringify = function (x) {
    return JSON.stringify(x);
  };

  exports.unsafeToFixed = function (digits) {
    return function (n) {
      return n.toFixed(digits);
    };
  };

  exports.unsafeToExponential = function (digits) {
    return function (n) {
      return n.toExponential(digits);
    };
  };

  exports.unsafeToPrecision  = function (digits) {
    return function (n) {
      return n.toPrecision(digits);
    };
  };
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Global.Unsafe"];
  exports["unsafeStringify"] = $foreign.unsafeStringify;
  exports["unsafeToExponential"] = $foreign.unsafeToExponential;
  exports["unsafeToFixed"] = $foreign.unsafeToFixed;
  exports["unsafeToPrecision"] = $foreign.unsafeToPrecision;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.canvasElementToImageSource = function(e) {
      return e;
  };

  exports.tryLoadImageImpl = function (src) {
    return function(e) {
          return function(f) {
              return function () {
                  var img = new Image();
                  img.src = src;
                  img.addEventListener("load", function() {
                      f(img)();
                  }, false);
                  img.addEventListener("error", function(error) {
                      e();
                  }, false);

                  return {};
              }
          }
      };
  };

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setCanvasWidth = function(width) {
      return function(canvas) {
          return function() {
              canvas.width = width;
              return canvas;
          };
      };
  };

  exports.setCanvasHeight = function(height) {
      return function(canvas) {
          return function() {
              canvas.height = height;
              return canvas;
          };
      };
  };

  exports.canvasToDataURL = function(canvas) {
      return function() {
          return canvas.toDataURL();
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setShadowColor = function(color) {
      return function(ctx) {
          return function() {
              ctx.shadowColor = color;
              return ctx;
          };
      };
  };

  exports.setShadowBlur = function(blur) {
      return function(ctx) {
          return function() {
              ctx.shadowBlur = blur;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetX = function(offsetX) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetX = offsetX;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetY = function(offsetY) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetY = offsetY;
              return ctx;
          };
      };
  };

  exports.setMiterLimit = function(limit) {
      return function(ctx) {
          return function() {
              ctx.miterLimit = limit;
              return ctx;
          };
      };
  };

  exports.setLineCapImpl = function(cap) {
      return function(ctx) {
          return function() {
              ctx.lineCap = cap;
              return ctx;
          };
      };
  };

  exports.setLineJoinImpl = function(join) {
      return function(ctx) {
          return function() {
              ctx.lineJoin = join;
              return ctx;
          };
      };
  };

  exports.setGlobalCompositeOperationImpl = function(ctx) {
      return function(op) {
          return function() {
              ctx.globalCompositeOperation = op;
              return ctx;
          };
      };
  };

  exports.setGlobalAlpha = function(ctx) {
      return function(alpha) {
          return function() {
              ctx.globalAlpha = alpha;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.strokeRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.strokeRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.transform = function(t) {
      return function(ctx) {
          return function() {
              ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.textAlignImpl = function(ctx) {
      return function() {
          return ctx.textAlign;
      }
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
              return ctx;
          }
      }
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.strokeText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.strokeText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.measureText = function(ctx) {
      return function(text) {
          return function() {
              return ctx.measureText(text);
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };

  exports.imageDataWidth = function(image) {
      return image.width;
  };

  exports.imageDataHeight = function(image) {
      return image.height;
  };

  exports.imageDataBuffer = function(image) {
      return image.data;
  };

  exports.getImageData = function(ctx) {
      return function(x) {
          return function(y) {
              return function(w) {
                  return function(h) {
                      return function() {
                          return ctx.getImageData(x, y, w, h);
                      };
                  };
              };
          };
      };
  };

  exports.putImageDataFull = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function(dx) {
                      return function(dy) {
                          return function(dw) {
                              return function(dh) {
                                  return function() {
                                      ctx.putImageData(image_data, x, y, dx, dy, dw, dh);
                                      return ctx;
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };

  exports.putImageData = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.putImageData(image_data, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.createImageData = function(ctx) {
      return function(sw) {
          return function(sh) {
              return function() {
                  return ctx.createImageData(sw, sh);
              };
          };
      };
  };

  exports.createImageDataCopy = function(ctx) {
      return function(image_data) {
          return function() {
              return ctx.createImageData(image_data);
          };
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.drawImageScale = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function(dWidth) {
                      return function(dHeight) {
                          return function() {
                              ctx.drawImage(image_source, dx, dy, dWidth, dHeight);
                              return ctx;
                          };
                      };
                  };
              };
          };
      };
  };

  exports.drawImageFull = function(ctx) {
      return function(image_source) {
          return function(sx) {
              return function(sy) {
                  return function(sWidth) {
                      return function(sHeight) {
                          return function(dx) {
                              return function(dy) {
                                  return function(dWidth) {
                                      return function(dHeight) {
                                          return function() {
                                              ctx.drawImage(image_source, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
                                              return ctx;
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };

  exports.createPatternImpl = function(img) {
      return function(repeat) {
          return function(ctx) {
              return function() {
                  return ctx.createPattern(img, repeat);
              };
          };
      };
  };

  exports.setPatternFillStyle = function(pattern) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = pattern;
              return ctx;
          };
      };
  };

  exports.createLinearGradient = function(linearGradient) {
      return function(ctx) {
          return function() {
              return ctx.createLinearGradient(linearGradient.x0, linearGradient.y0, linearGradient.x1, linearGradient.y1);
          };
      };
  };

  exports.createRadialGradient = function(radialGradient) {
      return function(ctx) {
          return function() {
              return ctx.createRadialGradient(radialGradient.x0, radialGradient.y0, radialGradient.r0, radialGradient.x1, radialGradient.y1, radialGradient.r1);
          };
      };
  };

  exports.addColorStop = function(stop) {
      return function(color) {
          return function(gradient) {
              return function() {
                  gradient.addColorStop(stop, color);
                  return gradient;
              };
          };
      };
  };

  exports.setGradientFillStyle = function(gradient) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = gradient;
              return ctx;
          };
      };
  };

  exports.quadraticCurveTo = function(qCurve) {
      return function(ctx) {
          return function() {
              ctx.quadraticCurveTo(qCurve.cpx, qCurve.cpy, qCurve.x, qCurve.y);
              return ctx;
          };
      };
  };

  exports.bezierCurveTo = function(bCurve) {
      return function(ctx) {
          return function() {
              ctx.bezierCurveTo(bCurve.cp1x, bCurve.cp1y, bCurve.cp2x, bCurve.cp2y, bCurve.x, bCurve.y);
              return ctx;
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var Repeat = (function () {
      function Repeat() {

      };
      Repeat.value = new Repeat();
      return Repeat;
  })();
  var RepeatX = (function () {
      function RepeatX() {

      };
      RepeatX.value = new RepeatX();
      return RepeatX;
  })();
  var RepeatY = (function () {
      function RepeatY() {

      };
      RepeatY.value = new RepeatY();
      return RepeatY;
  })();
  var NoRepeat = (function () {
      function NoRepeat() {

      };
      NoRepeat.value = new NoRepeat();
      return NoRepeat;
  })();
  var BevelJoin = (function () {
      function BevelJoin() {

      };
      BevelJoin.value = new BevelJoin();
      return BevelJoin;
  })();
  var RoundJoin = (function () {
      function RoundJoin() {

      };
      RoundJoin.value = new RoundJoin();
      return RoundJoin;
  })();
  var MiterJoin = (function () {
      function MiterJoin() {

      };
      MiterJoin.value = new MiterJoin();
      return MiterJoin;
  })();
  var Round = (function () {
      function Round() {

      };
      Round.value = new Round();
      return Round;
  })();
  var Square = (function () {
      function Square() {

      };
      Square.value = new Square();
      return Square;
  })();
  var Butt = (function () {
      function Butt() {

      };
      Butt.value = new Butt();
      return Butt;
  })();
  var SourceOver = (function () {
      function SourceOver() {

      };
      SourceOver.value = new SourceOver();
      return SourceOver;
  })();
  var SourceIn = (function () {
      function SourceIn() {

      };
      SourceIn.value = new SourceIn();
      return SourceIn;
  })();
  var SourceOut = (function () {
      function SourceOut() {

      };
      SourceOut.value = new SourceOut();
      return SourceOut;
  })();
  var SourceAtop = (function () {
      function SourceAtop() {

      };
      SourceAtop.value = new SourceAtop();
      return SourceAtop;
  })();
  var DestinationOver = (function () {
      function DestinationOver() {

      };
      DestinationOver.value = new DestinationOver();
      return DestinationOver;
  })();
  var DestinationIn = (function () {
      function DestinationIn() {

      };
      DestinationIn.value = new DestinationIn();
      return DestinationIn;
  })();
  var DestinationOut = (function () {
      function DestinationOut() {

      };
      DestinationOut.value = new DestinationOut();
      return DestinationOut;
  })();
  var DestinationAtop = (function () {
      function DestinationAtop() {

      };
      DestinationAtop.value = new DestinationAtop();
      return DestinationAtop;
  })();
  var Lighter = (function () {
      function Lighter() {

      };
      Lighter.value = new Lighter();
      return Lighter;
  })();
  var Copy = (function () {
      function Copy() {

      };
      Copy.value = new Copy();
      return Copy;
  })();
  var Xor = (function () {
      function Xor() {

      };
      Xor.value = new Xor();
      return Xor;
  })();
  var Multiply = (function () {
      function Multiply() {

      };
      Multiply.value = new Multiply();
      return Multiply;
  })();
  var Screen = (function () {
      function Screen() {

      };
      Screen.value = new Screen();
      return Screen;
  })();
  var Overlay = (function () {
      function Overlay() {

      };
      Overlay.value = new Overlay();
      return Overlay;
  })();
  var Darken = (function () {
      function Darken() {

      };
      Darken.value = new Darken();
      return Darken;
  })();
  var Lighten = (function () {
      function Lighten() {

      };
      Lighten.value = new Lighten();
      return Lighten;
  })();
  var ColorDodge = (function () {
      function ColorDodge() {

      };
      ColorDodge.value = new ColorDodge();
      return ColorDodge;
  })();
  var ColorBurn = (function () {
      function ColorBurn() {

      };
      ColorBurn.value = new ColorBurn();
      return ColorBurn;
  })();
  var HardLight = (function () {
      function HardLight() {

      };
      HardLight.value = new HardLight();
      return HardLight;
  })();
  var SoftLight = (function () {
      function SoftLight() {

      };
      SoftLight.value = new SoftLight();
      return SoftLight;
  })();
  var Difference = (function () {
      function Difference() {

      };
      Difference.value = new Difference();
      return Difference;
  })();
  var Exclusion = (function () {
      function Exclusion() {

      };
      Exclusion.value = new Exclusion();
      return Exclusion;
  })();
  var Hue = (function () {
      function Hue() {

      };
      Hue.value = new Hue();
      return Hue;
  })();
  var Saturation = (function () {
      function Saturation() {

      };
      Saturation.value = new Saturation();
      return Saturation;
  })();
  var Color = (function () {
      function Color() {

      };
      Color.value = new Color();
      return Color;
  })();
  var Luminosity = (function () {
      function Luminosity() {

      };
      Luminosity.value = new Luminosity();
      return Luminosity;
  })();
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              var v = $foreign.save(ctx)();
              var v1 = action();
              var v2 = $foreign.restore(ctx)();
              return v1;
          };
      };
  };
  var tryLoadImage = function (path) {
      return function (k) {
          return $foreign.tryLoadImageImpl(path)(k(Data_Maybe.Nothing.value))(function ($34) {
              return k(Data_Maybe.Just.create($34));
          });
      };
  };
  var textAlign = function (ctx) {
      var unsafeParseTextAlign = function (v) {
          if (v === "left") {
              return AlignLeft.value;
          };
          if (v === "right") {
              return AlignRight.value;
          };
          if (v === "center") {
              return AlignCenter.value;
          };
          if (v === "start") {
              return AlignStart.value;
          };
          if (v === "end") {
              return AlignEnd.value;
          };
          return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("invalid TextAlign: " + v);
      };
      return Data_Functor.map(Control_Monad_Eff.functorEff)(unsafeParseTextAlign)($foreign.textAlignImpl(ctx));
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              var v = $foreign.beginPath(ctx)();
              var v1 = path();
              var v2 = $foreign.stroke(ctx)();
              return v1;
          };
      };
  };
  var showTextAlign = new Data_Show.Show(function (v) {
      if (v instanceof AlignLeft) {
          return "AlignLeft";
      };
      if (v instanceof AlignRight) {
          return "AlignRight";
      };
      if (v instanceof AlignCenter) {
          return "AlignCenter";
      };
      if (v instanceof AlignStart) {
          return "AlignStart";
      };
      if (v instanceof AlignEnd) {
          return "AlignEnd";
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 484, column 1 - line 484, column 41: " + [ v.constructor.name ]);
  });
  var showPatternRepeat = new Data_Show.Show(function (v) {
      if (v instanceof Repeat) {
          return "Repeat";
      };
      if (v instanceof RepeatX) {
          return "RepeatX";
      };
      if (v instanceof RepeatY) {
          return "RepeatY";
      };
      if (v instanceof NoRepeat) {
          return "NoRepeat";
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 594, column 1 - line 594, column 49: " + [ v.constructor.name ]);
  });
  var showComposite = new Data_Show.Show(function (v) {
      if (v instanceof SourceOver) {
          return "SourceOver";
      };
      if (v instanceof SourceIn) {
          return "SourceIn";
      };
      if (v instanceof SourceOut) {
          return "SourceOut";
      };
      if (v instanceof SourceAtop) {
          return "SourceAtop";
      };
      if (v instanceof DestinationOver) {
          return "DestinationOver";
      };
      if (v instanceof DestinationIn) {
          return "DestinationIn";
      };
      if (v instanceof DestinationOut) {
          return "DestinationOut";
      };
      if (v instanceof DestinationAtop) {
          return "DestinationAtop";
      };
      if (v instanceof Lighter) {
          return "Lighter";
      };
      if (v instanceof Copy) {
          return "Copy";
      };
      if (v instanceof Xor) {
          return "Xor";
      };
      if (v instanceof Multiply) {
          return "Multiply";
      };
      if (v instanceof Screen) {
          return "Screen";
      };
      if (v instanceof Overlay) {
          return "Overlay";
      };
      if (v instanceof Darken) {
          return "Darken";
      };
      if (v instanceof Lighten) {
          return "Lighten";
      };
      if (v instanceof ColorDodge) {
          return "ColorDodge";
      };
      if (v instanceof ColorBurn) {
          return "ColorBurn";
      };
      if (v instanceof HardLight) {
          return "HardLight";
      };
      if (v instanceof SoftLight) {
          return "SoftLight";
      };
      if (v instanceof Difference) {
          return "Difference";
      };
      if (v instanceof Exclusion) {
          return "Exclusion";
      };
      if (v instanceof Hue) {
          return "Hue";
      };
      if (v instanceof Saturation) {
          return "Saturation";
      };
      if (v instanceof Color) {
          return "Color";
      };
      if (v instanceof Luminosity) {
          return "Luminosity";
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 282, column 1 - line 282, column 41: " + [ v.constructor.name ]);
  });
  var setTextAlign = function (ctx) {
      return function (textalign) {
          var toString = function (v) {
              if (v instanceof AlignLeft) {
                  return "left";
              };
              if (v instanceof AlignRight) {
                  return "right";
              };
              if (v instanceof AlignCenter) {
                  return "center";
              };
              if (v instanceof AlignStart) {
                  return "start";
              };
              if (v instanceof AlignEnd) {
                  return "end";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 513, column 5 - line 514, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.setTextAlignImpl(ctx)(toString(textalign));
      };
  };
  var setLineJoin = function (v) {
      if (v instanceof BevelJoin) {
          return $foreign.setLineJoinImpl("bevel");
      };
      if (v instanceof RoundJoin) {
          return $foreign.setLineJoinImpl("round");
      };
      if (v instanceof MiterJoin) {
          return $foreign.setLineJoinImpl("miter");
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 245, column 1 - line 245, column 91: " + [ v.constructor.name ]);
  };
  var setLineCap = function (v) {
      if (v instanceof Round) {
          return $foreign.setLineCapImpl("round");
      };
      if (v instanceof Square) {
          return $foreign.setLineCapImpl("square");
      };
      if (v instanceof Butt) {
          return $foreign.setLineCapImpl("butt");
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 232, column 1 - line 232, column 89: " + [ v.constructor.name ]);
  };
  var setGlobalCompositeOperation = function (ctx) {
      return function (composite) {
          var toString = function (v) {
              if (v instanceof SourceOver) {
                  return "source-over";
              };
              if (v instanceof SourceIn) {
                  return "source-in";
              };
              if (v instanceof SourceOut) {
                  return "source-out";
              };
              if (v instanceof SourceAtop) {
                  return "source-atop";
              };
              if (v instanceof DestinationOver) {
                  return "destination-over";
              };
              if (v instanceof DestinationIn) {
                  return "destination-in";
              };
              if (v instanceof DestinationOut) {
                  return "destination-out";
              };
              if (v instanceof DestinationAtop) {
                  return "destination-atop";
              };
              if (v instanceof Lighter) {
                  return "lighter";
              };
              if (v instanceof Copy) {
                  return "copy";
              };
              if (v instanceof Xor) {
                  return "xor";
              };
              if (v instanceof Multiply) {
                  return "multiply";
              };
              if (v instanceof Screen) {
                  return "screen";
              };
              if (v instanceof Overlay) {
                  return "overlay";
              };
              if (v instanceof Darken) {
                  return "darken";
              };
              if (v instanceof Lighten) {
                  return "lighten";
              };
              if (v instanceof ColorDodge) {
                  return "color-dodge";
              };
              if (v instanceof ColorBurn) {
                  return "color-burn";
              };
              if (v instanceof HardLight) {
                  return "hard-light";
              };
              if (v instanceof SoftLight) {
                  return "soft-light";
              };
              if (v instanceof Difference) {
                  return "difference";
              };
              if (v instanceof Exclusion) {
                  return "exclusion";
              };
              if (v instanceof Hue) {
                  return "hue";
              };
              if (v instanceof Saturation) {
                  return "saturation";
              };
              if (v instanceof Color) {
                  return "color";
              };
              if (v instanceof Luminosity) {
                  return "luminosity";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 316, column 5 - line 317, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.setGlobalCompositeOperationImpl(ctx)(toString(composite));
      };
  };
  var setCanvasDimensions = function (d) {
      return function (ce) {
          return Control_Bind.bind(Control_Monad_Eff.bindEff)($foreign.setCanvasHeight(d.height)(ce))($foreign.setCanvasWidth(d.width));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var getCanvasDimensions = function (ce) {
      return function __do() {
          var v = $foreign.getCanvasWidth(ce)();
          var v1 = $foreign.getCanvasHeight(ce)();
          return {
              width: v, 
              height: v1
          };
      };
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              var v = $foreign.beginPath(ctx)();
              var v1 = path();
              var v2 = $foreign.fill(ctx)();
              return v1;
          };
      };
  };
  var createPattern = function (img) {
      return function (repeat) {
          var toString = function (v) {
              if (v instanceof Repeat) {
                  return "repeat";
              };
              if (v instanceof RepeatX) {
                  return "repeat-x";
              };
              if (v instanceof RepeatY) {
                  return "repeat-y";
              };
              if (v instanceof NoRepeat) {
                  return "no-repeat";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 606, column 5 - line 607, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.createPatternImpl(img)(toString(repeat));
      };
  };
  exports["SourceOver"] = SourceOver;
  exports["SourceIn"] = SourceIn;
  exports["SourceOut"] = SourceOut;
  exports["SourceAtop"] = SourceAtop;
  exports["DestinationOver"] = DestinationOver;
  exports["DestinationIn"] = DestinationIn;
  exports["DestinationOut"] = DestinationOut;
  exports["DestinationAtop"] = DestinationAtop;
  exports["Lighter"] = Lighter;
  exports["Copy"] = Copy;
  exports["Xor"] = Xor;
  exports["Multiply"] = Multiply;
  exports["Screen"] = Screen;
  exports["Overlay"] = Overlay;
  exports["Darken"] = Darken;
  exports["Lighten"] = Lighten;
  exports["ColorDodge"] = ColorDodge;
  exports["ColorBurn"] = ColorBurn;
  exports["HardLight"] = HardLight;
  exports["SoftLight"] = SoftLight;
  exports["Difference"] = Difference;
  exports["Exclusion"] = Exclusion;
  exports["Hue"] = Hue;
  exports["Saturation"] = Saturation;
  exports["Color"] = Color;
  exports["Luminosity"] = Luminosity;
  exports["Round"] = Round;
  exports["Square"] = Square;
  exports["Butt"] = Butt;
  exports["BevelJoin"] = BevelJoin;
  exports["RoundJoin"] = RoundJoin;
  exports["MiterJoin"] = MiterJoin;
  exports["Repeat"] = Repeat;
  exports["RepeatX"] = RepeatX;
  exports["RepeatY"] = RepeatY;
  exports["NoRepeat"] = NoRepeat;
  exports["AlignLeft"] = AlignLeft;
  exports["AlignRight"] = AlignRight;
  exports["AlignCenter"] = AlignCenter;
  exports["AlignStart"] = AlignStart;
  exports["AlignEnd"] = AlignEnd;
  exports["createPattern"] = createPattern;
  exports["fillPath"] = fillPath;
  exports["getCanvasDimensions"] = getCanvasDimensions;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["setCanvasDimensions"] = setCanvasDimensions;
  exports["setGlobalCompositeOperation"] = setGlobalCompositeOperation;
  exports["setLineCap"] = setLineCap;
  exports["setLineJoin"] = setLineJoin;
  exports["setTextAlign"] = setTextAlign;
  exports["strokePath"] = strokePath;
  exports["textAlign"] = textAlign;
  exports["tryLoadImage"] = tryLoadImage;
  exports["withContext"] = withContext;
  exports["showComposite"] = showComposite;
  exports["showTextAlign"] = showTextAlign;
  exports["showPatternRepeat"] = showPatternRepeat;
  exports["addColorStop"] = $foreign.addColorStop;
  exports["arc"] = $foreign.arc;
  exports["beginPath"] = $foreign.beginPath;
  exports["bezierCurveTo"] = $foreign.bezierCurveTo;
  exports["canvasElementToImageSource"] = $foreign.canvasElementToImageSource;
  exports["canvasToDataURL"] = $foreign.canvasToDataURL;
  exports["clearRect"] = $foreign.clearRect;
  exports["clip"] = $foreign.clip;
  exports["closePath"] = $foreign.closePath;
  exports["createImageData"] = $foreign.createImageData;
  exports["createImageDataCopy"] = $foreign.createImageDataCopy;
  exports["createLinearGradient"] = $foreign.createLinearGradient;
  exports["createRadialGradient"] = $foreign.createRadialGradient;
  exports["drawImage"] = $foreign.drawImage;
  exports["drawImageFull"] = $foreign.drawImageFull;
  exports["drawImageScale"] = $foreign.drawImageScale;
  exports["fill"] = $foreign.fill;
  exports["fillRect"] = $foreign.fillRect;
  exports["fillText"] = $foreign.fillText;
  exports["font"] = $foreign.font;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["getImageData"] = $foreign.getImageData;
  exports["imageDataBuffer"] = $foreign.imageDataBuffer;
  exports["imageDataHeight"] = $foreign.imageDataHeight;
  exports["imageDataWidth"] = $foreign.imageDataWidth;
  exports["lineTo"] = $foreign.lineTo;
  exports["measureText"] = $foreign.measureText;
  exports["moveTo"] = $foreign.moveTo;
  exports["putImageData"] = $foreign.putImageData;
  exports["putImageDataFull"] = $foreign.putImageDataFull;
  exports["quadraticCurveTo"] = $foreign.quadraticCurveTo;
  exports["rect"] = $foreign.rect;
  exports["restore"] = $foreign.restore;
  exports["rotate"] = $foreign.rotate;
  exports["save"] = $foreign.save;
  exports["scale"] = $foreign.scale;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setFont"] = $foreign.setFont;
  exports["setGlobalAlpha"] = $foreign.setGlobalAlpha;
  exports["setGradientFillStyle"] = $foreign.setGradientFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["setMiterLimit"] = $foreign.setMiterLimit;
  exports["setPatternFillStyle"] = $foreign.setPatternFillStyle;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["stroke"] = $foreign.stroke;
  exports["strokeRect"] = $foreign.strokeRect;
  exports["strokeText"] = $foreign.strokeText;
  exports["transform"] = $foreign.transform;
  exports["translate"] = $foreign.translate;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
    "use strict";

  exports.animate = function (draw) {
    return function (step) {
      return function again (sys) {
        return function () {
          requestAnimationFrame (again (step (sys)))
          draw (sys) ()
        }
      }
    }
  }
})(PS["NBody"] = PS["NBody"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["NBody"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var GPU = PS["GPU"];
  var GPU_DSL = PS["GPU.DSL"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];        
  var step = function (dt) {
      return function (sys) {
          var velocities = Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v.v;
          })(sys);
          var positions = Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v.q;
          })(sys);
          var opts = {
              dimensions: [ 100, 2, 2 ]
          };
          var masses = Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v.m;
          })(sys);
          var goback = function (v) {
              return function (v1) {
                  if (v1.length === 2) {
                      return {
                          m: v, 
                          v: v1[0], 
                          q: v1[1]
                      };
                  };
                  return {
                      m: 0.0, 
                      v: [ 0.0, 0.0 ], 
                      q: [ 0.0, 0.0 ]
                  };
              };
          };
          var body1 = new GPU_DSL.S(GPU_DSL.vset("f1")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(GPU_DSL.vset("f2")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(GPU_DSL["var"]("d1"), new GPU_DSL.S(GPU_DSL["var"]("d2"), new GPU_DSL.S(GPU_DSL["var"]("r"), new GPU_DSL.S(GPU_DSL.vset("pf")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.ThreadY.value, Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(new GPU_DSL.For("body", 0, Data_Array.length(sys), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.read("body"), GPU_DSL.ThreadX.value), GPU_DSL["break"], new GPU_DSL.S(GPU_DSL.set("d1")(Data_Ring.sub(GPU_DSL.exprRing)(GPU_DSL.at2("positions")(GPU_DSL.read("body"))(Data_Semiring.zero(GPU_DSL.exprSemiRing)))(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.zero(GPU_DSL.exprSemiRing)))), new GPU_DSL.S(GPU_DSL.set("d2")(Data_Ring.sub(GPU_DSL.exprRing)(GPU_DSL.at2("positions")(GPU_DSL.read("body"))(Data_Semiring.one(GPU_DSL.exprSemiRing)))(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.one(GPU_DSL.exprSemiRing)))), new GPU_DSL.S(GPU_DSL.set("r")(GPU_DSL.sqrt(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.sqr(GPU_DSL.read("d1")))(GPU_DSL.sqr(GPU_DSL.read("d2"))))), new GPU_DSL.S(GPU_DSL.set("d1")(Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("d1"))(GPU_DSL.read("r"))), new GPU_DSL.S(GPU_DSL.set("d2")(Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("d2"))(GPU_DSL.read("r"))), new GPU_DSL.S(GPU_DSL.set("pf")(Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(Data_Semiring.mul(GPU_DSL.exprSemiRing)(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at("masses")(GPU_DSL.read("body")))(GPU_DSL.at("masses")(GPU_DSL.ThreadX.value)))(new GPU_DSL.Num(6.674e-11)))(GPU_DSL.sqr(GPU_DSL.read("r")))), new GPU_DSL.S(GPU_DSL.set("f1")(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.read("f1"))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.read("d1"))(GPU_DSL.read("pf")))), new GPU_DSL.S(GPU_DSL.set("f2")(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.read("f2"))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.read("d2"))(GPU_DSL.read("pf")))), GPU_DSL.end))))))))), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.ThreadZ.value, Data_Semiring.zero(GPU_DSL.exprSemiRing)), GPU_DSL["return"](Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("f1"))(GPU_DSL.at("masses")(GPU_DSL.ThreadX.value))), GPU_DSL["return"](Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("f2"))(GPU_DSL.at("masses")(GPU_DSL.ThreadX.value)))), GPU_DSL.end))), GPU_DSL.end), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.ThreadZ.value, Data_Semiring.zero(GPU_DSL.exprSemiRing)), GPU_DSL["return"](Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.zero(GPU_DSL.exprSemiRing)))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at2("velocities")(GPU_DSL.ThreadX.value)(Data_Semiring.zero(GPU_DSL.exprSemiRing)))(new GPU_DSL.Num(dt)))), GPU_DSL["return"](Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.one(GPU_DSL.exprSemiRing)))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at2("velocities")(GPU_DSL.ThreadX.value)(Data_Semiring.one(GPU_DSL.exprSemiRing)))(new GPU_DSL.Num(dt))))), GPU_DSL.end)), GPU_DSL.end)))))));
          var kernel = GPU.makeK3(opts)(Data_Show.show(GPU_DSL.showBlock)(body1))("masses")("velocities")("positions");
          var out = kernel(masses)(velocities)(positions);
          return Data_Array.zipWith(goback)(masses)(out);
      };
  };
  var redraw = function (ctx) {
      return function (sys) {
          var qs = Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v.q;
          })(sys);
          var o = function (v) {
              if (v.length === 2) {
                  return {
                      x: v[0], 
                      y: v[1], 
                      r: 4.0, 
                      start: 0.0, 
                      end: 6.3
                  };
              };
              return {
                  x: 0.0, 
                  y: 0.0, 
                  r: 0.0, 
                  start: 0.0, 
                  end: 0.0
              };
          };
          var drawO = function (v) {
              return Graphics_Canvas.fillPath(ctx)(Graphics_Canvas.arc(ctx)(o(v.q)));
          };
          return function __do() {
              var v = Graphics_Canvas.clearRect(ctx)({
                  x: 0.0, 
                  y: 0.0, 
                  h: 600.0, 
                  w: 800.0
              })();
              var v1 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(drawO)(sys)();
              return Data_Unit.unit;
          };
      };
  };
  var randomSystem = Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(Data_Array.replicate(100)(function __do() {
      var v = Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(Data_Array.replicate(2)(Control_Monad_Eff_Random.randomRange(0.0)(600.0)))();
      var v2 = Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(Data_Array.replicate(2)(Control_Monad_Eff_Random.randomRange(0.0)(600.0)))();
      var v3 = Control_Monad_Eff_Random.randomRange(1.0)(100000.0)();
      return {
          m: v3, 
          v: v, 
          q: v2
      };
  }));
  var main = function (dictPartial) {
      return function __do() {
          var v = Graphics_Canvas.getCanvasElementById("canvas")();
          var __unused = function (dictPartial1) {
              return function ($dollar17) {
                  return $dollar17;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_Maybe.Just) {
                  return function __do() {
                      var v1 = Graphics_Canvas.getContext2D(v.value0)();
                      var v2 = randomSystem();
                      return $foreign.animate(redraw(v1))(step(0.1))(v2)();
                  };
              };
              throw new Error("Failed pattern match at NBody line 20, column 3 - line 21, column 3: " + [ v.constructor.name ]);
          })())();
      };
  };
  var body = Data_Show.show(GPU_DSL.showBlock)(new GPU_DSL.S(GPU_DSL.vset("f1")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(GPU_DSL.vset("f2")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(GPU_DSL["var"]("d1"), new GPU_DSL.S(GPU_DSL["var"]("d2"), new GPU_DSL.S(GPU_DSL["var"]("r"), new GPU_DSL.S(GPU_DSL.vset("pf")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.ThreadY.value, Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(new GPU_DSL.For("body", 0, 100, new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.read("body"), GPU_DSL.ThreadX.value), GPU_DSL["break"], new GPU_DSL.S(GPU_DSL.set("d1")(Data_Ring.sub(GPU_DSL.exprRing)(GPU_DSL.at2("positions")(GPU_DSL.read("body"))(Data_Semiring.zero(GPU_DSL.exprSemiRing)))(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.zero(GPU_DSL.exprSemiRing)))), new GPU_DSL.S(GPU_DSL.set("d2")(Data_Ring.sub(GPU_DSL.exprRing)(GPU_DSL.at2("positions")(GPU_DSL.read("body"))(Data_Semiring.one(GPU_DSL.exprSemiRing)))(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.one(GPU_DSL.exprSemiRing)))), new GPU_DSL.S(GPU_DSL.set("r")(GPU_DSL.sqrt(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.sqr(GPU_DSL.read("d1")))(GPU_DSL.sqr(GPU_DSL.read("d2"))))), new GPU_DSL.S(GPU_DSL.set("d1")(Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("d1"))(GPU_DSL.read("r"))), new GPU_DSL.S(GPU_DSL.set("d2")(Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("d2"))(GPU_DSL.read("r"))), new GPU_DSL.S(GPU_DSL.set("pf")(Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(Data_Semiring.mul(GPU_DSL.exprSemiRing)(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at("masses")(GPU_DSL.read("body")))(GPU_DSL.at("masses")(GPU_DSL.ThreadX.value)))(new GPU_DSL.Num(6.674e-11)))(GPU_DSL.sqr(GPU_DSL.read("r")))), new GPU_DSL.S(GPU_DSL.set("f1")(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.read("f1"))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.read("d1"))(GPU_DSL.read("pf")))), new GPU_DSL.S(GPU_DSL.set("f2")(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.read("f2"))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.read("d2"))(GPU_DSL.read("pf")))), GPU_DSL.end))))))))), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.ThreadZ.value, Data_Semiring.zero(GPU_DSL.exprSemiRing)), GPU_DSL["return"](Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("f1"))(GPU_DSL.at("masses")(GPU_DSL.ThreadX.value))), GPU_DSL["return"](Data_EuclideanRing.div(GPU_DSL.exprEuclRing)(GPU_DSL.read("f2"))(GPU_DSL.at("masses")(GPU_DSL.ThreadX.value)))), GPU_DSL.end))), GPU_DSL.end), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Eq(GPU_DSL.ThreadZ.value, Data_Semiring.zero(GPU_DSL.exprSemiRing)), GPU_DSL["return"](Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.zero(GPU_DSL.exprSemiRing)))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at2("velocities")(GPU_DSL.ThreadX.value)(Data_Semiring.zero(GPU_DSL.exprSemiRing)))(new GPU_DSL.Num(3.0e-2)))), GPU_DSL["return"](Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.at2("positions")(GPU_DSL.ThreadX.value)(Data_Semiring.one(GPU_DSL.exprSemiRing)))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at2("velocities")(GPU_DSL.ThreadX.value)(Data_Semiring.one(GPU_DSL.exprSemiRing)))(new GPU_DSL.Num(3.0e-2))))), GPU_DSL.end)), GPU_DSL.end))))))));
  exports["body"] = body;
  exports["main"] = main;
  exports["randomSystem"] = randomSystem;
  exports["redraw"] = redraw;
  exports["step"] = step;
  exports["animate"] = $foreign.animate;
})(PS["NBody"] = PS["NBody"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var GPU = PS["GPU"];
  var GPU_DSL = PS["GPU.DSL"];
  var Prelude = PS["Prelude"];        
  var def = {
      dimensions: [ 1 ]
  };
  var identity = function (dictShow) {
      var body = Data_Show.show(GPU_DSL.showBlock)(GPU_DSL["return"](GPU_DSL.read("x")));
      return GPU.makeK1(def)(body)("x");
  };
  var matMult = function (n) {
      return function (m) {
          var i = GPU_DSL.read("i");
          var d2 = Data_Array.length(n);
          var d1 = (function () {
              var v = Data_Array.index(m)(0);
              if (v instanceof Data_Maybe.Just) {
                  return Data_Array.length(v.value0);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return 0;
              };
              throw new Error("Failed pattern match at Test line 47, column 10 - line 51, column 5: " + [ v.constructor.name ]);
          })();
          var opts = (function () {
              var $5 = {};
              for (var $6 in def) {
                  if ({}.hasOwnProperty.call(def, $6)) {
                      $5[$6] = def[$6];
                  };
              };
              $5.dimensions = [ d1, d2 ];
              return $5;
          })();
          var body = new GPU_DSL.S(GPU_DSL["var"]("sum"), new GPU_DSL.S(GPU_DSL.set("sum")(Data_Semiring.zero(GPU_DSL.exprSemiRing)), new GPU_DSL.S(new GPU_DSL.For("i", 0, d1 - 1 | 0, new GPU_DSL.S(GPU_DSL.set("sum")(Data_Semiring.add(GPU_DSL.exprSemiRing)(GPU_DSL.read("sum"))(Data_Semiring.mul(GPU_DSL.exprSemiRing)(GPU_DSL.at2("A")(GPU_DSL.ThreadY.value)(i))(GPU_DSL.at2("B")(i)(GPU_DSL.ThreadX.value)))), GPU_DSL.end)), GPU_DSL["return"](GPU_DSL.read("sum")))));
          return GPU.makeK2(opts)(Data_Show.show(GPU_DSL.showBlock)(body))("A")("B")(n)(m);
      };
  };
  var testMultMatrix = (function () {
      var b = [ [ 0, 1, 3 ], [ 1, 1, 3 ], [ 1, 1, 3 ] ];
      var a = [ [ 1, 1, 3 ], [ 0, 1, 3 ], [ 12, 12, 12 ] ];
      return Data_Show.show(Data_Show.showArray(Data_Show.showArray(Data_Show.showInt)))(matMult(a)(b));
  })();
  var testIf = (function () {
      var body = new GPU_DSL.S(GPU_DSL["var"]("res"), new GPU_DSL.S(new GPU_DSL.IF(new GPU_DSL.Gt(GPU_DSL.read("a"), new GPU_DSL.Num(23.0)), new GPU_DSL.S(GPU_DSL.set("res")(GPU_DSL.read("a")), GPU_DSL.end), new GPU_DSL.S(GPU_DSL.set("res")(GPU_DSL.read("b")), GPU_DSL.end)), GPU_DSL["return"](GPU_DSL.read("res"))));
      return GPU.makeK2(def)(Data_Show.show(GPU_DSL.showBlock)(body))("a")("b");
  })();
  exports["def"] = def;
  exports["identity"] = identity;
  exports["matMult"] = matMult;
  exports["testIf"] = testIf;
  exports["testMultMatrix"] = testMultMatrix;
})(PS["Test"] = PS["Test"] || {});